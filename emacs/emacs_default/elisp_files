(setq-default filesets-be-docile-flag 'nil)

(setq filesets-submenus '("all config" ("0 all config" ["Files: all config" (filesets-open ':files '"all config")] "---" ("0 .bash_aliases, .bash_aliases.org" ["0 .bash_aliases" (filesets-file-open nil '"~/.bash_aliases" '"all config")] ["1 .bash_aliases.org" (filesets-file-open nil '"~/.bash_aliases.org" '"all config")]) ("1 .bash_completion.sh, .bash_history" ["2 .bash_completion.sh" (filesets-file-open nil '"~/.bash_completion.sh" '"all config")] ["3 .bash_history" (filesets-file-open nil '"~/.bash_history" '"all config")]) ("2 .bash_logout, .bash_profile" ["4 .bash_logout" (filesets-file-open nil '"~/.bash_logout" '"all config")] ["5 .bash_profile" (filesets-file-open nil '"~/.bash_profile" '"all config")]) ("3 .bashrc, .env_variables.sh" ["6 .bashrc" (filesets-file-open nil '"~/.bashrc" '"all config")] ["7 .env_variables.sh" (filesets-file-open nil '"~/.env_variables.sh" '"all config")]) ("4 .gitignore, .inputrc" ["8 .gitignore" (filesets-file-open nil '"~/.gitignore" '"all config")] ["9 .inputrc" (filesets-file-open nil '"~/.inputrc" '"all config")]) ("5 .tmux.conf, abbrevs.vim" ["a .tmux.conf" (filesets-file-open nil '"~/.tmux.conf" '"all config")] ["b abbrevs.vim" (filesets-file-open nil '"~/.config/nvim/abbrevs.vim" '"all config")]) ("6 custom.el, filesets.el" ["c custom.el" (filesets-file-open nil '"~/.emacs.d/etc/custom.el" '"all config")] ["d filesets.el" (filesets-file-open nil '"~/.emacs.d/lisp/functions/filesets.el" '"all config")]) ("7 functions.el, functions.org" ["e functions.el" (filesets-file-open nil '"~/.emacs.d/functions.el" '"all config")] ["f functions.org" (filesets-file-open nil '"~/.emacs.d/functions.org" '"all config")]) ("8 hydras.el, hydras.org" ["g hydras.el" (filesets-file-open nil '"~/.emacs.d/hydras.el" '"all config")] ["h hydras.org" (filesets-file-open nil '"~/.emacs.d/hydras.org" '"all config")]) ("9 init.el, init.org" ["i init.el" (filesets-file-open nil '"~/.emacs.d/init.el" '"all config")] ["j init.org" (filesets-file-open nil '"~/.emacs.d/init.org" '"all config")]) ("a init.vim, keys.el" ["k init.vim" (filesets-file-open nil '"~/.config/nvim/init.vim" '"all config")] ["l keys.el" (filesets-file-open nil '"~/.emacs.d/keys.el" '"all config")]) ("b keys.org, macros.el" ["m keys.org" (filesets-file-open nil '"~/.emacs.d/keys.org" '"all config")] ["n macros.el" (filesets-file-open nil '"~/.emacs.d/macros.el" '"all config")]) ("c macros.org, mappings.vim" ["o macros.org" (filesets-file-open nil '"~/.emacs.d/macros.org" '"all config")] ["p mappings.vim" (filesets-file-open nil '"~/.config/nvim/mappings.vim" '"all config")]) ("d misc.el, misc.org" ["q misc.el" (filesets-file-open nil '"~/.emacs.d/misc.el" '"all config")] ["r misc.org" (filesets-file-open nil '"~/.emacs.d/misc.org" '"all config")]) ("e packs.el, packs.org" ["s packs.el" (filesets-file-open nil '"~/.emacs.d/packs.el" '"all config")] ["t packs.org" (filesets-file-open nil '"~/.emacs.d/packs.org" '"all config")]) ("f plugins.vim, rc.conf" ["u plugins.vim" (filesets-file-open nil '"~/.config/nvim/plugins.vim" '"all config")] ["v rc.conf" (filesets-file-open nil '"~/.config/ranger/rc.conf" '"all config")]) ("g rifle.conf, zathurarc" ["w rifle.conf" (filesets-file-open nil '"~/.config/ranger/rifle.conf" '"all config")] ["x zathurarc" (filesets-file-open nil '"~/.config/zathura/zathurarc" '"all config")]) "---" ["Close all files" (filesets-close ':files '"all config")] ["Run Command" (filesets-run-cmd nil '"all config" ':files)] ["Add current buffer" (filesets-add-buffer '"all config" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"all config" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"all config")]) "bash config" ("1 bash config" ["Files: bash config" (filesets-open ':files '"bash config")] "---" ["0 .bash_aliases" (filesets-file-open nil '"~/.bash_aliases" '"bash config")] ["1 .bash_aliases.org" (filesets-file-open nil '"~/.bash_aliases.org" '"bash config")] ["2 .bash_completion.sh" (filesets-file-open nil '"~/.bash_completion.sh" '"bash config")] ["3 .bash_history" (filesets-file-open nil '"~/.bash_history" '"bash config")] ["4 .bash_logout" (filesets-file-open nil '"~/.bash_logout" '"bash config")] ["5 .bash_profile" (filesets-file-open nil '"~/.bash_profile" '"bash config")] ["6 .bashrc" (filesets-file-open nil '"~/.bashrc" '"bash config")] ["7 .env_variables.sh" (filesets-file-open nil '"~/.env_variables.sh" '"bash config")] ["8 .gitignore" (filesets-file-open nil '"~/.gitignore" '"bash config")] ["9 .inputrc" (filesets-file-open nil '"~/.inputrc" '"bash config")] "---" ["Close all files" (filesets-close ':files '"bash config")] ["Run Command" (filesets-run-cmd nil '"bash config" ':files)] ["Add current buffer" (filesets-add-buffer '"bash config" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"bash config" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"bash config")]) "bash notes" ("2 bash notes" ["Files: bash notes" (filesets-open ':files '"bash notes")] "---" ["0 bash_notes.org" (filesets-file-open nil '"~/Bash/bash_notes/bash_notes.org" '"bash notes")] ["1 bash_tasks.org" (filesets-file-open nil '"~/Bash/bash_notes/bash_tasks.org" '"bash notes")] "---" ["Close all files" (filesets-close ':files '"bash notes")] ["Run Command" (filesets-run-cmd nil '"bash notes" ':files)] ["Add current buffer" (filesets-add-buffer '"bash notes" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"bash notes" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"bash notes")]) "emacs config" ("3 emacs config" ["Files: emacs config" (filesets-open ':files '"emacs config")] "---" ["0 custom.el" (filesets-file-open nil '"~/.emacs.d/etc/custom.el" '"emacs config")] ["1 filesets.el" (filesets-file-open nil '"~/.emacs.d/lisp/functions/filesets.el" '"emacs config")] ["2 functions.el" (filesets-file-open nil '"~/.emacs.d/functions.el" '"emacs config")] ["3 functions.org" (filesets-file-open nil '"~/.emacs.d/functions.org" '"emacs config")] ["4 hydras.el" (filesets-file-open nil '"~/.emacs.d/hydras.el" '"emacs config")] ["5 hydras.org" (filesets-file-open nil '"~/.emacs.d/hydras.org" '"emacs config")] ["6 init.el" (filesets-file-open nil '"~/.emacs.d/init.el" '"emacs config")] ["7 init.org" (filesets-file-open nil '"~/.emacs.d/init.org" '"emacs config")] ["8 keys.el" (filesets-file-open nil '"~/.emacs.d/keys.el" '"emacs config")] ["9 keys.org" (filesets-file-open nil '"~/.emacs.d/keys.org" '"emacs config")] ["a macros.el" (filesets-file-open nil '"~/.emacs.d/macros.el" '"emacs config")] ["b macros.org" (filesets-file-open nil '"~/.emacs.d/macros.org" '"emacs config")] ["c misc.el" (filesets-file-open nil '"~/.emacs.d/misc.el" '"emacs config")] ["d misc.org" (filesets-file-open nil '"~/.emacs.d/misc.org" '"emacs config")] ["e packs.el" (filesets-file-open nil '"~/.emacs.d/packs.el" '"emacs config")] ["f packs.org" (filesets-file-open nil '"~/.emacs.d/packs.org" '"emacs config")] "---" ["Close all files" (filesets-close ':files '"emacs config")] ["Run Command" (filesets-run-cmd nil '"emacs config" ':files)] ["Add current buffer" (filesets-add-buffer '"emacs config" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"emacs config" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"emacs config")]) "materias" ("4 materias" ["Files: materias" (filesets-open ':files '"materias")] "---" ["0 arquitetura_de_computatores.org" (filesets-file-open nil '"/home/Documents/Org/Studying/Unifacs/Segundo_Semestre/Matérias/arquitetura_de_computatores.org" '"materias")] ["1 desenvolvimento_social.org" (filesets-file-open nil '"/home/Documents/Org/Studying/Unifacs/Segundo_Semestre/Matérias/desenvolvimento_social.org" '"materias")] ["2 gerencia_de_ti.org" (filesets-file-open nil '"/home/Documents/Org/Studying/Unifacs/Segundo_Semestre/Matérias/gerencia_de_ti.org" '"materias")] ["3 matematica.org" (filesets-file-open nil '"/home/Documents/Org/Studying/Unifacs/Segundo_Semestre/Matérias/matematica.org" '"materias")] ["4 programacao_orientada_a_objetos.org" (filesets-file-open nil '"/home/Documents/Org/Studying/Unifacs/Segundo_Semestre/Matérias/programacao_orientada_a_objetos.org" '"materias")] "---" ["Close all files" (filesets-close ':files '"materias")] ["Run Command" (filesets-run-cmd nil '"materias" ':files)] ["Add current buffer" (filesets-add-buffer '"materias" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"materias" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"materias")]) "nvim config" ("5 nvim config" ["Files: nvim config" (filesets-open ':files '"nvim config")] "---" ["0 abbrevs.vim" (filesets-file-open nil '"~/.config/nvim/abbrevs.vim" '"nvim config")] ["1 init.vim" (filesets-file-open nil '"~/.config/nvim/init.vim" '"nvim config")] ["2 mappings.vim" (filesets-file-open nil '"~/.config/nvim/mappings.vim" '"nvim config")] ["3 plugins.vim" (filesets-file-open nil '"~/.config/nvim/plugins.vim" '"nvim config")] "---" ["Close all files" (filesets-close ':files '"nvim config")] ["Run Command" (filesets-run-cmd nil '"nvim config" ':files)] ["Add current buffer" (filesets-add-buffer '"nvim config" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"nvim config" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"nvim config")]) "org agenda" ("6 org agenda" ["Files: org agenda" (filesets-open ':files '"org agenda")] "---" ["0 agora.org" (filesets-file-open nil '"~/org/Planning/agora.org" '"org agenda")] ["1 contatos.org" (filesets-file-open nil '"~/org/Info/contatos.org" '"org agenda")] ["2 depois.org" (filesets-file-open nil '"~/org/Planning/depois.org" '"org agenda")] ["3 logo.org" (filesets-file-open nil '"~/org/Planning/logo.org" '"org agenda")] ["4 projetos.org" (filesets-file-open nil '"~/org/Info/projetos.org" '"org agenda")] ["5 saude.org" (filesets-file-open nil '"~/org/Info/saude.org" '"org agenda")] "---" ["Close all files" (filesets-close ':files '"org agenda")] ["Run Command" (filesets-run-cmd nil '"org agenda" ':files)] ["Add current buffer" (filesets-add-buffer '"org agenda" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"org agenda" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"org agenda")]) "other config" ("7 other config" ["Files: other config" (filesets-open ':files '"other config")] "---" ["0 .tmux.conf" (filesets-file-open nil '"~/.tmux.conf" '"other config")] ["1 rc.conf" (filesets-file-open nil '"~/.config/ranger/rc.conf" '"other config")] ["2 rifle.conf" (filesets-file-open nil '"~/.config/ranger/rifle.conf" '"other config")] ["3 zathurarc" (filesets-file-open nil '"~/.config/zathura/zathurarc" '"other config")] "---" ["Close all files" (filesets-close ':files '"other config")] ["Run Command" (filesets-run-cmd nil '"other config" ':files)] ["Add current buffer" (filesets-add-buffer '"other config" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"other config" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"other config")])))

(setq filesets-menu-cache '(("0 all config" ["Files: all config" (filesets-open ':files '"all config")] "---" ("0 .bash_aliases, .bash_aliases.org" ["0 .bash_aliases" (filesets-file-open nil '"~/.bash_aliases" '"all config")] ["1 .bash_aliases.org" (filesets-file-open nil '"~/.bash_aliases.org" '"all config")]) ("1 .bash_completion.sh, .bash_history" ["2 .bash_completion.sh" (filesets-file-open nil '"~/.bash_completion.sh" '"all config")] ["3 .bash_history" (filesets-file-open nil '"~/.bash_history" '"all config")]) ("2 .bash_logout, .bash_profile" ["4 .bash_logout" (filesets-file-open nil '"~/.bash_logout" '"all config")] ["5 .bash_profile" (filesets-file-open nil '"~/.bash_profile" '"all config")]) ("3 .bashrc, .env_variables.sh" ["6 .bashrc" (filesets-file-open nil '"~/.bashrc" '"all config")] ["7 .env_variables.sh" (filesets-file-open nil '"~/.env_variables.sh" '"all config")]) ("4 .gitignore, .inputrc" ["8 .gitignore" (filesets-file-open nil '"~/.gitignore" '"all config")] ["9 .inputrc" (filesets-file-open nil '"~/.inputrc" '"all config")]) ("5 .tmux.conf, abbrevs.vim" ["a .tmux.conf" (filesets-file-open nil '"~/.tmux.conf" '"all config")] ["b abbrevs.vim" (filesets-file-open nil '"~/.config/nvim/abbrevs.vim" '"all config")]) ("6 custom.el, filesets.el" ["c custom.el" (filesets-file-open nil '"~/.emacs.d/etc/custom.el" '"all config")] ["d filesets.el" (filesets-file-open nil '"~/.emacs.d/lisp/functions/filesets.el" '"all config")]) ("7 functions.el, functions.org" ["e functions.el" (filesets-file-open nil '"~/.emacs.d/functions.el" '"all config")] ["f functions.org" (filesets-file-open nil '"~/.emacs.d/functions.org" '"all config")]) ("8 hydras.el, hydras.org" ["g hydras.el" (filesets-file-open nil '"~/.emacs.d/hydras.el" '"all config")] ["h hydras.org" (filesets-file-open nil '"~/.emacs.d/hydras.org" '"all config")]) ("9 init.el, init.org" ["i init.el" (filesets-file-open nil '"~/.emacs.d/init.el" '"all config")] ["j init.org" (filesets-file-open nil '"~/.emacs.d/init.org" '"all config")]) ("a init.vim, keys.el" ["k init.vim" (filesets-file-open nil '"~/.config/nvim/init.vim" '"all config")] ["l keys.el" (filesets-file-open nil '"~/.emacs.d/keys.el" '"all config")]) ("b keys.org, macros.el" ["m keys.org" (filesets-file-open nil '"~/.emacs.d/keys.org" '"all config")] ["n macros.el" (filesets-file-open nil '"~/.emacs.d/macros.el" '"all config")]) ("c macros.org, mappings.vim" ["o macros.org" (filesets-file-open nil '"~/.emacs.d/macros.org" '"all config")] ["p mappings.vim" (filesets-file-open nil '"~/.config/nvim/mappings.vim" '"all config")]) ("d misc.el, misc.org" ["q misc.el" (filesets-file-open nil '"~/.emacs.d/misc.el" '"all config")] ["r misc.org" (filesets-file-open nil '"~/.emacs.d/misc.org" '"all config")]) ("e packs.el, packs.org" ["s packs.el" (filesets-file-open nil '"~/.emacs.d/packs.el" '"all config")] ["t packs.org" (filesets-file-open nil '"~/.emacs.d/packs.org" '"all config")]) ("f plugins.vim, rc.conf" ["u plugins.vim" (filesets-file-open nil '"~/.config/nvim/plugins.vim" '"all config")] ["v rc.conf" (filesets-file-open nil '"~/.config/ranger/rc.conf" '"all config")]) ("g rifle.conf, zathurarc" ["w rifle.conf" (filesets-file-open nil '"~/.config/ranger/rifle.conf" '"all config")] ["x zathurarc" (filesets-file-open nil '"~/.config/zathura/zathurarc" '"all config")]) "---" ["Close all files" (filesets-close ':files '"all config")] ["Run Command" (filesets-run-cmd nil '"all config" ':files)] ["Add current buffer" (filesets-add-buffer '"all config" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"all config" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"all config")]) ("1 bash config" ["Files: bash config" (filesets-open ':files '"bash config")] "---" ["0 .bash_aliases" (filesets-file-open nil '"~/.bash_aliases" '"bash config")] ["1 .bash_aliases.org" (filesets-file-open nil '"~/.bash_aliases.org" '"bash config")] ["2 .bash_completion.sh" (filesets-file-open nil '"~/.bash_completion.sh" '"bash config")] ["3 .bash_history" (filesets-file-open nil '"~/.bash_history" '"bash config")] ["4 .bash_logout" (filesets-file-open nil '"~/.bash_logout" '"bash config")] ["5 .bash_profile" (filesets-file-open nil '"~/.bash_profile" '"bash config")] ["6 .bashrc" (filesets-file-open nil '"~/.bashrc" '"bash config")] ["7 .env_variables.sh" (filesets-file-open nil '"~/.env_variables.sh" '"bash config")] ["8 .gitignore" (filesets-file-open nil '"~/.gitignore" '"bash config")] ["9 .inputrc" (filesets-file-open nil '"~/.inputrc" '"bash config")] "---" ["Close all files" (filesets-close ':files '"bash config")] ["Run Command" (filesets-run-cmd nil '"bash config" ':files)] ["Add current buffer" (filesets-add-buffer '"bash config" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"bash config" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"bash config")]) ("2 bash notes" ["Files: bash notes" (filesets-open ':files '"bash notes")] "---" ["0 bash_notes.org" (filesets-file-open nil '"~/Bash/bash_notes/bash_notes.org" '"bash notes")] ["1 bash_tasks.org" (filesets-file-open nil '"~/Bash/bash_notes/bash_tasks.org" '"bash notes")] "---" ["Close all files" (filesets-close ':files '"bash notes")] ["Run Command" (filesets-run-cmd nil '"bash notes" ':files)] ["Add current buffer" (filesets-add-buffer '"bash notes" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"bash notes" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"bash notes")]) ("3 emacs config" ["Files: emacs config" (filesets-open ':files '"emacs config")] "---" ["0 custom.el" (filesets-file-open nil '"~/.emacs.d/etc/custom.el" '"emacs config")] ["1 filesets.el" (filesets-file-open nil '"~/.emacs.d/lisp/functions/filesets.el" '"emacs config")] ["2 functions.el" (filesets-file-open nil '"~/.emacs.d/functions.el" '"emacs config")] ["3 functions.org" (filesets-file-open nil '"~/.emacs.d/functions.org" '"emacs config")] ["4 hydras.el" (filesets-file-open nil '"~/.emacs.d/hydras.el" '"emacs config")] ["5 hydras.org" (filesets-file-open nil '"~/.emacs.d/hydras.org" '"emacs config")] ["6 init.el" (filesets-file-open nil '"~/.emacs.d/init.el" '"emacs config")] ["7 init.org" (filesets-file-open nil '"~/.emacs.d/init.org" '"emacs config")] ["8 keys.el" (filesets-file-open nil '"~/.emacs.d/keys.el" '"emacs config")] ["9 keys.org" (filesets-file-open nil '"~/.emacs.d/keys.org" '"emacs config")] ["a macros.el" (filesets-file-open nil '"~/.emacs.d/macros.el" '"emacs config")] ["b macros.org" (filesets-file-open nil '"~/.emacs.d/macros.org" '"emacs config")] ["c misc.el" (filesets-file-open nil '"~/.emacs.d/misc.el" '"emacs config")] ["d misc.org" (filesets-file-open nil '"~/.emacs.d/misc.org" '"emacs config")] ["e packs.el" (filesets-file-open nil '"~/.emacs.d/packs.el" '"emacs config")] ["f packs.org" (filesets-file-open nil '"~/.emacs.d/packs.org" '"emacs config")] "---" ["Close all files" (filesets-close ':files '"emacs config")] ["Run Command" (filesets-run-cmd nil '"emacs config" ':files)] ["Add current buffer" (filesets-add-buffer '"emacs config" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"emacs config" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"emacs config")]) ("4 materias" ["Files: materias" (filesets-open ':files '"materias")] "---" ["0 arquitetura_de_computatores.org" (filesets-file-open nil '"/home/Documents/Org/Studying/Unifacs/Segundo_Semestre/Matérias/arquitetura_de_computatores.org" '"materias")] ["1 desenvolvimento_social.org" (filesets-file-open nil '"/home/Documents/Org/Studying/Unifacs/Segundo_Semestre/Matérias/desenvolvimento_social.org" '"materias")] ["2 gerencia_de_ti.org" (filesets-file-open nil '"/home/Documents/Org/Studying/Unifacs/Segundo_Semestre/Matérias/gerencia_de_ti.org" '"materias")] ["3 matematica.org" (filesets-file-open nil '"/home/Documents/Org/Studying/Unifacs/Segundo_Semestre/Matérias/matematica.org" '"materias")] ["4 programacao_orientada_a_objetos.org" (filesets-file-open nil '"/home/Documents/Org/Studying/Unifacs/Segundo_Semestre/Matérias/programacao_orientada_a_objetos.org" '"materias")] "---" ["Close all files" (filesets-close ':files '"materias")] ["Run Command" (filesets-run-cmd nil '"materias" ':files)] ["Add current buffer" (filesets-add-buffer '"materias" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"materias" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"materias")]) ("5 nvim config" ["Files: nvim config" (filesets-open ':files '"nvim config")] "---" ["0 abbrevs.vim" (filesets-file-open nil '"~/.config/nvim/abbrevs.vim" '"nvim config")] ["1 init.vim" (filesets-file-open nil '"~/.config/nvim/init.vim" '"nvim config")] ["2 mappings.vim" (filesets-file-open nil '"~/.config/nvim/mappings.vim" '"nvim config")] ["3 plugins.vim" (filesets-file-open nil '"~/.config/nvim/plugins.vim" '"nvim config")] "---" ["Close all files" (filesets-close ':files '"nvim config")] ["Run Command" (filesets-run-cmd nil '"nvim config" ':files)] ["Add current buffer" (filesets-add-buffer '"nvim config" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"nvim config" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"nvim config")]) ("6 org agenda" ["Files: org agenda" (filesets-open ':files '"org agenda")] "---" ["0 agora.org" (filesets-file-open nil '"~/org/Planning/agora.org" '"org agenda")] ["1 contatos.org" (filesets-file-open nil '"~/org/Info/contatos.org" '"org agenda")] ["2 depois.org" (filesets-file-open nil '"~/org/Planning/depois.org" '"org agenda")] ["3 logo.org" (filesets-file-open nil '"~/org/Planning/logo.org" '"org agenda")] ["4 projetos.org" (filesets-file-open nil '"~/org/Info/projetos.org" '"org agenda")] ["5 saude.org" (filesets-file-open nil '"~/org/Info/saude.org" '"org agenda")] "---" ["Close all files" (filesets-close ':files '"org agenda")] ["Run Command" (filesets-run-cmd nil '"org agenda" ':files)] ["Add current buffer" (filesets-add-buffer '"org agenda" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"org agenda" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"org agenda")]) ("7 other config" ["Files: other config" (filesets-open ':files '"other config")] "---" ["0 .tmux.conf" (filesets-file-open nil '"~/.tmux.conf" '"other config")] ["1 rc.conf" (filesets-file-open nil '"~/.config/ranger/rc.conf" '"other config")] ["2 rifle.conf" (filesets-file-open nil '"~/.config/ranger/rifle.conf" '"other config")] ["3 zathurarc" (filesets-file-open nil '"~/.config/zathura/zathurarc" '"other config")] "---" ["Close all files" (filesets-close ':files '"other config")] ["Run Command" (filesets-run-cmd nil '"other config" ':files)] ["Add current buffer" (filesets-add-buffer '"other config" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"other config" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"other config")])))

(setq filesets-ingroup-cache 'nil)

(setq filesets-cache-version "1.8.4")

(setq-default filesets-be-docile-flag 'nil)

(setq filesets-submenus '("all config" ("0 all config" ["Files: all config" (filesets-open ':files '"all config")] "---" ("0 .bash_aliases, .bash_aliases.org" ["0 .bash_aliases" (filesets-file-open nil '"~/.bash_aliases" '"all config")] ["1 .bash_aliases.org" (filesets-file-open nil '"~/.bash_aliases.org" '"all config")]) ("1 .bash_completion.sh, .bash_history" ["2 .bash_completion.sh" (filesets-file-open nil '"~/.bash_completion.sh" '"all config")] ["3 .bash_history" (filesets-file-open nil '"~/.bash_history" '"all config")]) ("2 .bash_logout, .bash_profile" ["4 .bash_logout" (filesets-file-open nil '"~/.bash_logout" '"all config")] ["5 .bash_profile" (filesets-file-open nil '"~/.bash_profile" '"all config")]) ("3 .bashrc, .env_variables.sh" ["6 .bashrc" (filesets-file-open nil '"~/.bashrc" '"all config")] ["7 .env_variables.sh" (filesets-file-open nil '"~/.env_variables.sh" '"all config")]) ("4 .gitignore, .inputrc" ["8 .gitignore" (filesets-file-open nil '"~/.gitignore" '"all config")] ["9 .inputrc" (filesets-file-open nil '"~/.inputrc" '"all config")]) ("5 .tmux.conf, abbrevs.vim" ["a .tmux.conf" (filesets-file-open nil '"~/.tmux.conf" '"all config")] ["b abbrevs.vim" (filesets-file-open nil '"~/.config/nvim/abbrevs.vim" '"all config")]) ("6 custom.el, filesets.el" ["c custom.el" (filesets-file-open nil '"~/.emacs.d/etc/custom.el" '"all config")] ["d filesets.el" (filesets-file-open nil '"~/.emacs.d/lisp/functions/filesets.el" '"all config")]) ("7 functions.el, functions.org" ["e functions.el" (filesets-file-open nil '"~/.emacs.d/functions.el" '"all config")] ["f functions.org" (filesets-file-open nil '"~/.emacs.d/functions.org" '"all config")]) ("8 hydras.el, hydras.org" ["g hydras.el" (filesets-file-open nil '"~/.emacs.d/hydras.el" '"all config")] ["h hydras.org" (filesets-file-open nil '"~/.emacs.d/hydras.org" '"all config")]) ("9 init.el, init.org" ["i init.el" (filesets-file-open nil '"~/.emacs.d/init.el" '"all config")] ["j init.org" (filesets-file-open nil '"~/.emacs.d/init.org" '"all config")]) ("a init.vim, keys.el" ["k init.vim" (filesets-file-open nil '"~/.config/nvim/init.vim" '"all config")] ["l keys.el" (filesets-file-open nil '"~/.emacs.d/keys.el" '"all config")]) ("b keys.org, macros.el" ["m keys.org" (filesets-file-open nil '"~/.emacs.d/keys.org" '"all config")] ["n macros.el" (filesets-file-open nil '"~/.emacs.d/macros.el" '"all config")]) ("c macros.org, mappings.vim" ["o macros.org" (filesets-file-open nil '"~/.emacs.d/macros.org" '"all config")] ["p mappings.vim" (filesets-file-open nil '"~/.config/nvim/mappings.vim" '"all config")]) ("d misc.el, misc.org" ["q misc.el" (filesets-file-open nil '"~/.emacs.d/misc.el" '"all config")] ["r misc.org" (filesets-file-open nil '"~/.emacs.d/misc.org" '"all config")]) ("e packs.el, packs.org" ["s packs.el" (filesets-file-open nil '"~/.emacs.d/packs.el" '"all config")] ["t packs.org" (filesets-file-open nil '"~/.emacs.d/packs.org" '"all config")]) ("f plugins.vim, rc.conf" ["u plugins.vim" (filesets-file-open nil '"~/.config/nvim/plugins.vim" '"all config")] ["v rc.conf" (filesets-file-open nil '"~/.config/ranger/rc.conf" '"all config")]) ("g rifle.conf, zathurarc" ["w rifle.conf" (filesets-file-open nil '"~/.config/ranger/rifle.conf" '"all config")] ["x zathurarc" (filesets-file-open nil '"~/.config/zathura/zathurarc" '"all config")]) "---" ["Close all files" (filesets-close ':files '"all config")] ["Run Command" (filesets-run-cmd nil '"all config" ':files)] ["Add current buffer" (filesets-add-buffer '"all config" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"all config" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"all config")]) "bash config" ("1 bash config" ["Files: bash config" (filesets-open ':files '"bash config")] "---" ["0 .bash_aliases" (filesets-file-open nil '"~/.bash_aliases" '"bash config")] ["1 .bash_aliases.org" (filesets-file-open nil '"~/.bash_aliases.org" '"bash config")] ["2 .bash_completion.sh" (filesets-file-open nil '"~/.bash_completion.sh" '"bash config")] ["3 .bash_history" (filesets-file-open nil '"~/.bash_history" '"bash config")] ["4 .bash_logout" (filesets-file-open nil '"~/.bash_logout" '"bash config")] ["5 .bash_profile" (filesets-file-open nil '"~/.bash_profile" '"bash config")] ["6 .bashrc" (filesets-file-open nil '"~/.bashrc" '"bash config")] ["7 .env_variables.sh" (filesets-file-open nil '"~/.env_variables.sh" '"bash config")] ["8 .gitignore" (filesets-file-open nil '"~/.gitignore" '"bash config")] ["9 .inputrc" (filesets-file-open nil '"~/.inputrc" '"bash config")] "---" ["Close all files" (filesets-close ':files '"bash config")] ["Run Command" (filesets-run-cmd nil '"bash config" ':files)] ["Add current buffer" (filesets-add-buffer '"bash config" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"bash config" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"bash config")]) "bash notes" ("2 bash notes" ["Files: bash notes" (filesets-open ':files '"bash notes")] "---" ["0 bash_notes.org" (filesets-file-open nil '"~/Bash/bash_notes/bash_notes.org" '"bash notes")] ["1 bash_tasks.org" (filesets-file-open nil '"~/Bash/bash_notes/bash_tasks.org" '"bash notes")] "---" ["Close all files" (filesets-close ':files '"bash notes")] ["Run Command" (filesets-run-cmd nil '"bash notes" ':files)] ["Add current buffer" (filesets-add-buffer '"bash notes" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"bash notes" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"bash notes")]) "emacs config" ("3 emacs config" ["Files: emacs config" (filesets-open ':files '"emacs config")] "---" ["0 custom.el" (filesets-file-open nil '"~/.emacs.d/etc/custom.el" '"emacs config")] ["1 filesets.el" (filesets-file-open nil '"~/.emacs.d/lisp/functions/filesets.el" '"emacs config")] ["2 functions.el" (filesets-file-open nil '"~/.emacs.d/functions.el" '"emacs config")] ["3 functions.org" (filesets-file-open nil '"~/.emacs.d/functions.org" '"emacs config")] ["4 hydras.el" (filesets-file-open nil '"~/.emacs.d/hydras.el" '"emacs config")] ["5 hydras.org" (filesets-file-open nil '"~/.emacs.d/hydras.org" '"emacs config")] ["6 init.el" (filesets-file-open nil '"~/.emacs.d/init.el" '"emacs config")] ["7 init.org" (filesets-file-open nil '"~/.emacs.d/init.org" '"emacs config")] ["8 keys.el" (filesets-file-open nil '"~/.emacs.d/keys.el" '"emacs config")] ["9 keys.org" (filesets-file-open nil '"~/.emacs.d/keys.org" '"emacs config")] ["a macros.el" (filesets-file-open nil '"~/.emacs.d/macros.el" '"emacs config")] ["b macros.org" (filesets-file-open nil '"~/.emacs.d/macros.org" '"emacs config")] ["c misc.el" (filesets-file-open nil '"~/.emacs.d/misc.el" '"emacs config")] ["d misc.org" (filesets-file-open nil '"~/.emacs.d/misc.org" '"emacs config")] ["e packs.el" (filesets-file-open nil '"~/.emacs.d/packs.el" '"emacs config")] ["f packs.org" (filesets-file-open nil '"~/.emacs.d/packs.org" '"emacs config")] "---" ["Close all files" (filesets-close ':files '"emacs config")] ["Run Command" (filesets-run-cmd nil '"emacs config" ':files)] ["Add current buffer" (filesets-add-buffer '"emacs config" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"emacs config" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"emacs config")]) "materias" ("4 materias" ["Files: materias" (filesets-open ':files '"materias")] "---" ["0 arquitetura_de_computatores.org" (filesets-file-open nil '"/home/Documents/Org/Studying/Unifacs/Segundo_Semestre/Matérias/arquitetura_de_computatores.org" '"materias")] ["1 desenvolvimento_social.org" (filesets-file-open nil '"/home/Documents/Org/Studying/Unifacs/Segundo_Semestre/Matérias/desenvolvimento_social.org" '"materias")] ["2 gerencia_de_ti.org" (filesets-file-open nil '"/home/Documents/Org/Studying/Unifacs/Segundo_Semestre/Matérias/gerencia_de_ti.org" '"materias")] ["3 matematica.org" (filesets-file-open nil '"/home/Documents/Org/Studying/Unifacs/Segundo_Semestre/Matérias/matematica.org" '"materias")] ["4 programacao_orientada_a_objetos.org" (filesets-file-open nil '"/home/Documents/Org/Studying/Unifacs/Segundo_Semestre/Matérias/programacao_orientada_a_objetos.org" '"materias")] "---" ["Close all files" (filesets-close ':files '"materias")] ["Run Command" (filesets-run-cmd nil '"materias" ':files)] ["Add current buffer" (filesets-add-buffer '"materias" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"materias" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"materias")]) "nvim config" ("5 nvim config" ["Files: nvim config" (filesets-open ':files '"nvim config")] "---" ["0 abbrevs.vim" (filesets-file-open nil '"~/.config/nvim/abbrevs.vim" '"nvim config")] ["1 init.vim" (filesets-file-open nil '"~/.config/nvim/init.vim" '"nvim config")] ["2 mappings.vim" (filesets-file-open nil '"~/.config/nvim/mappings.vim" '"nvim config")] ["3 plugins.vim" (filesets-file-open nil '"~/.config/nvim/plugins.vim" '"nvim config")] "---" ["Close all files" (filesets-close ':files '"nvim config")] ["Run Command" (filesets-run-cmd nil '"nvim config" ':files)] ["Add current buffer" (filesets-add-buffer '"nvim config" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"nvim config" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"nvim config")]) "org agenda" ("6 org agenda" ["Files: org agenda" (filesets-open ':files '"org agenda")] "---" ["0 agora.org" (filesets-file-open nil '"~/org/Planning/agora.org" '"org agenda")] ["1 contatos.org" (filesets-file-open nil '"~/org/Info/contatos.org" '"org agenda")] ["2 depois.org" (filesets-file-open nil '"~/org/Planning/depois.org" '"org agenda")] ["3 logo.org" (filesets-file-open nil '"~/org/Planning/logo.org" '"org agenda")] ["4 projetos.org" (filesets-file-open nil '"~/org/Info/projetos.org" '"org agenda")] ["5 saude.org" (filesets-file-open nil '"~/org/Info/saude.org" '"org agenda")] "---" ["Close all files" (filesets-close ':files '"org agenda")] ["Run Command" (filesets-run-cmd nil '"org agenda" ':files)] ["Add current buffer" (filesets-add-buffer '"org agenda" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"org agenda" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"org agenda")]) "other config" ("7 other config" ["Files: other config" (filesets-open ':files '"other config")] "---" ["0 .tmux.conf" (filesets-file-open nil '"~/.tmux.conf" '"other config")] ["1 rc.conf" (filesets-file-open nil '"~/.config/ranger/rc.conf" '"other config")] ["2 rifle.conf" (filesets-file-open nil '"~/.config/ranger/rifle.conf" '"other config")] ["3 zathurarc" (filesets-file-open nil '"~/.config/zathura/zathurarc" '"other config")] "---" ["Close all files" (filesets-close ':files '"other config")] ["Run Command" (filesets-run-cmd nil '"other config" ':files)] ["Add current buffer" (filesets-add-buffer '"other config" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"other config" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"other config")])))

(setq filesets-menu-cache '(("0 all config" ["Files: all config" (filesets-open ':files '"all config")] "---" ("0 .bash_aliases, .bash_aliases.org" ["0 .bash_aliases" (filesets-file-open nil '"~/.bash_aliases" '"all config")] ["1 .bash_aliases.org" (filesets-file-open nil '"~/.bash_aliases.org" '"all config")]) ("1 .bash_completion.sh, .bash_history" ["2 .bash_completion.sh" (filesets-file-open nil '"~/.bash_completion.sh" '"all config")] ["3 .bash_history" (filesets-file-open nil '"~/.bash_history" '"all config")]) ("2 .bash_logout, .bash_profile" ["4 .bash_logout" (filesets-file-open nil '"~/.bash_logout" '"all config")] ["5 .bash_profile" (filesets-file-open nil '"~/.bash_profile" '"all config")]) ("3 .bashrc, .env_variables.sh" ["6 .bashrc" (filesets-file-open nil '"~/.bashrc" '"all config")] ["7 .env_variables.sh" (filesets-file-open nil '"~/.env_variables.sh" '"all config")]) ("4 .gitignore, .inputrc" ["8 .gitignore" (filesets-file-open nil '"~/.gitignore" '"all config")] ["9 .inputrc" (filesets-file-open nil '"~/.inputrc" '"all config")]) ("5 .tmux.conf, abbrevs.vim" ["a .tmux.conf" (filesets-file-open nil '"~/.tmux.conf" '"all config")] ["b abbrevs.vim" (filesets-file-open nil '"~/.config/nvim/abbrevs.vim" '"all config")]) ("6 custom.el, filesets.el" ["c custom.el" (filesets-file-open nil '"~/.emacs.d/etc/custom.el" '"all config")] ["d filesets.el" (filesets-file-open nil '"~/.emacs.d/lisp/functions/filesets.el" '"all config")]) ("7 functions.el, functions.org" ["e functions.el" (filesets-file-open nil '"~/.emacs.d/functions.el" '"all config")] ["f functions.org" (filesets-file-open nil '"~/.emacs.d/functions.org" '"all config")]) ("8 hydras.el, hydras.org" ["g hydras.el" (filesets-file-open nil '"~/.emacs.d/hydras.el" '"all config")] ["h hydras.org" (filesets-file-open nil '"~/.emacs.d/hydras.org" '"all config")]) ("9 init.el, init.org" ["i init.el" (filesets-file-open nil '"~/.emacs.d/init.el" '"all config")] ["j init.org" (filesets-file-open nil '"~/.emacs.d/init.org" '"all config")]) ("a init.vim, keys.el" ["k init.vim" (filesets-file-open nil '"~/.config/nvim/init.vim" '"all config")] ["l keys.el" (filesets-file-open nil '"~/.emacs.d/keys.el" '"all config")]) ("b keys.org, macros.el" ["m keys.org" (filesets-file-open nil '"~/.emacs.d/keys.org" '"all config")] ["n macros.el" (filesets-file-open nil '"~/.emacs.d/macros.el" '"all config")]) ("c macros.org, mappings.vim" ["o macros.org" (filesets-file-open nil '"~/.emacs.d/macros.org" '"all config")] ["p mappings.vim" (filesets-file-open nil '"~/.config/nvim/mappings.vim" '"all config")]) ("d misc.el, misc.org" ["q misc.el" (filesets-file-open nil '"~/.emacs.d/misc.el" '"all config")] ["r misc.org" (filesets-file-open nil '"~/.emacs.d/misc.org" '"all config")]) ("e packs.el, packs.org" ["s packs.el" (filesets-file-open nil '"~/.emacs.d/packs.el" '"all config")] ["t packs.org" (filesets-file-open nil '"~/.emacs.d/packs.org" '"all config")]) ("f plugins.vim, rc.conf" ["u plugins.vim" (filesets-file-open nil '"~/.config/nvim/plugins.vim" '"all config")] ["v rc.conf" (filesets-file-open nil '"~/.config/ranger/rc.conf" '"all config")]) ("g rifle.conf, zathurarc" ["w rifle.conf" (filesets-file-open nil '"~/.config/ranger/rifle.conf" '"all config")] ["x zathurarc" (filesets-file-open nil '"~/.config/zathura/zathurarc" '"all config")]) "---" ["Close all files" (filesets-close ':files '"all config")] ["Run Command" (filesets-run-cmd nil '"all config" ':files)] ["Add current buffer" (filesets-add-buffer '"all config" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"all config" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"all config")]) ("1 bash config" ["Files: bash config" (filesets-open ':files '"bash config")] "---" ["0 .bash_aliases" (filesets-file-open nil '"~/.bash_aliases" '"bash config")] ["1 .bash_aliases.org" (filesets-file-open nil '"~/.bash_aliases.org" '"bash config")] ["2 .bash_completion.sh" (filesets-file-open nil '"~/.bash_completion.sh" '"bash config")] ["3 .bash_history" (filesets-file-open nil '"~/.bash_history" '"bash config")] ["4 .bash_logout" (filesets-file-open nil '"~/.bash_logout" '"bash config")] ["5 .bash_profile" (filesets-file-open nil '"~/.bash_profile" '"bash config")] ["6 .bashrc" (filesets-file-open nil '"~/.bashrc" '"bash config")] ["7 .env_variables.sh" (filesets-file-open nil '"~/.env_variables.sh" '"bash config")] ["8 .gitignore" (filesets-file-open nil '"~/.gitignore" '"bash config")] ["9 .inputrc" (filesets-file-open nil '"~/.inputrc" '"bash config")] "---" ["Close all files" (filesets-close ':files '"bash config")] ["Run Command" (filesets-run-cmd nil '"bash config" ':files)] ["Add current buffer" (filesets-add-buffer '"bash config" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"bash config" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"bash config")]) ("2 bash notes" ["Files: bash notes" (filesets-open ':files '"bash notes")] "---" ["0 bash_notes.org" (filesets-file-open nil '"~/Bash/bash_notes/bash_notes.org" '"bash notes")] ["1 bash_tasks.org" (filesets-file-open nil '"~/Bash/bash_notes/bash_tasks.org" '"bash notes")] "---" ["Close all files" (filesets-close ':files '"bash notes")] ["Run Command" (filesets-run-cmd nil '"bash notes" ':files)] ["Add current buffer" (filesets-add-buffer '"bash notes" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"bash notes" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"bash notes")]) ("3 emacs config" ["Files: emacs config" (filesets-open ':files '"emacs config")] "---" ["0 custom.el" (filesets-file-open nil '"~/.emacs.d/etc/custom.el" '"emacs config")] ["1 filesets.el" (filesets-file-open nil '"~/.emacs.d/lisp/functions/filesets.el" '"emacs config")] ["2 functions.el" (filesets-file-open nil '"~/.emacs.d/functions.el" '"emacs config")] ["3 functions.org" (filesets-file-open nil '"~/.emacs.d/functions.org" '"emacs config")] ["4 hydras.el" (filesets-file-open nil '"~/.emacs.d/hydras.el" '"emacs config")] ["5 hydras.org" (filesets-file-open nil '"~/.emacs.d/hydras.org" '"emacs config")] ["6 init.el" (filesets-file-open nil '"~/.emacs.d/init.el" '"emacs config")] ["7 init.org" (filesets-file-open nil '"~/.emacs.d/init.org" '"emacs config")] ["8 keys.el" (filesets-file-open nil '"~/.emacs.d/keys.el" '"emacs config")] ["9 keys.org" (filesets-file-open nil '"~/.emacs.d/keys.org" '"emacs config")] ["a macros.el" (filesets-file-open nil '"~/.emacs.d/macros.el" '"emacs config")] ["b macros.org" (filesets-file-open nil '"~/.emacs.d/macros.org" '"emacs config")] ["c misc.el" (filesets-file-open nil '"~/.emacs.d/misc.el" '"emacs config")] ["d misc.org" (filesets-file-open nil '"~/.emacs.d/misc.org" '"emacs config")] ["e packs.el" (filesets-file-open nil '"~/.emacs.d/packs.el" '"emacs config")] ["f packs.org" (filesets-file-open nil '"~/.emacs.d/packs.org" '"emacs config")] "---" ["Close all files" (filesets-close ':files '"emacs config")] ["Run Command" (filesets-run-cmd nil '"emacs config" ':files)] ["Add current buffer" (filesets-add-buffer '"emacs config" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"emacs config" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"emacs config")]) ("4 materias" ["Files: materias" (filesets-open ':files '"materias")] "---" ["0 arquitetura_de_computatores.org" (filesets-file-open nil '"/home/Documents/Org/Studying/Unifacs/Segundo_Semestre/Matérias/arquitetura_de_computatores.org" '"materias")] ["1 desenvolvimento_social.org" (filesets-file-open nil '"/home/Documents/Org/Studying/Unifacs/Segundo_Semestre/Matérias/desenvolvimento_social.org" '"materias")] ["2 gerencia_de_ti.org" (filesets-file-open nil '"/home/Documents/Org/Studying/Unifacs/Segundo_Semestre/Matérias/gerencia_de_ti.org" '"materias")] ["3 matematica.org" (filesets-file-open nil '"/home/Documents/Org/Studying/Unifacs/Segundo_Semestre/Matérias/matematica.org" '"materias")] ["4 programacao_orientada_a_objetos.org" (filesets-file-open nil '"/home/Documents/Org/Studying/Unifacs/Segundo_Semestre/Matérias/programacao_orientada_a_objetos.org" '"materias")] "---" ["Close all files" (filesets-close ':files '"materias")] ["Run Command" (filesets-run-cmd nil '"materias" ':files)] ["Add current buffer" (filesets-add-buffer '"materias" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"materias" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"materias")]) ("5 nvim config" ["Files: nvim config" (filesets-open ':files '"nvim config")] "---" ["0 abbrevs.vim" (filesets-file-open nil '"~/.config/nvim/abbrevs.vim" '"nvim config")] ["1 init.vim" (filesets-file-open nil '"~/.config/nvim/init.vim" '"nvim config")] ["2 mappings.vim" (filesets-file-open nil '"~/.config/nvim/mappings.vim" '"nvim config")] ["3 plugins.vim" (filesets-file-open nil '"~/.config/nvim/plugins.vim" '"nvim config")] "---" ["Close all files" (filesets-close ':files '"nvim config")] ["Run Command" (filesets-run-cmd nil '"nvim config" ':files)] ["Add current buffer" (filesets-add-buffer '"nvim config" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"nvim config" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"nvim config")]) ("6 org agenda" ["Files: org agenda" (filesets-open ':files '"org agenda")] "---" ["0 agora.org" (filesets-file-open nil '"~/org/Planning/agora.org" '"org agenda")] ["1 contatos.org" (filesets-file-open nil '"~/org/Info/contatos.org" '"org agenda")] ["2 depois.org" (filesets-file-open nil '"~/org/Planning/depois.org" '"org agenda")] ["3 logo.org" (filesets-file-open nil '"~/org/Planning/logo.org" '"org agenda")] ["4 projetos.org" (filesets-file-open nil '"~/org/Info/projetos.org" '"org agenda")] ["5 saude.org" (filesets-file-open nil '"~/org/Info/saude.org" '"org agenda")] "---" ["Close all files" (filesets-close ':files '"org agenda")] ["Run Command" (filesets-run-cmd nil '"org agenda" ':files)] ["Add current buffer" (filesets-add-buffer '"org agenda" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"org agenda" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"org agenda")]) ("7 other config" ["Files: other config" (filesets-open ':files '"other config")] "---" ["0 .tmux.conf" (filesets-file-open nil '"~/.tmux.conf" '"other config")] ["1 rc.conf" (filesets-file-open nil '"~/.config/ranger/rc.conf" '"other config")] ["2 rifle.conf" (filesets-file-open nil '"~/.config/ranger/rifle.conf" '"other config")] ["3 zathurarc" (filesets-file-open nil '"~/.config/zathura/zathurarc" '"other config")] "---" ["Close all files" (filesets-close ':files '"other config")] ["Run Command" (filesets-run-cmd nil '"other config" ':files)] ["Add current buffer" (filesets-add-buffer '"other config" (current-buffer))] ["Remove current buffer" (filesets-remove-buffer '"other config" (current-buffer))] ["Rebuild this submenu" (filesets-rebuild-this-submenu '"other config")])))

(setq filesets-ingroup-cache 'nil)

(setq filesets-cache-version "1.8.4")

(defun focus-emacs ()
  (interactive)
  (let ((inhibit-message t))
    (shell-command "~/scripts/i3_scripts/focus_emacs.sh")))

(defun focus-chrome ()
  (interactive)
  (let ((inhibit-message t))
    (shell-command "~/scripts/i3_scripts/focus_chrome.sh")))

(defun my/focus-chrome-delayed ()
  (interactive)
  (let ((inhibit-message t))
    (progn
      (sit-for 2)
      (shell-command "~/scripts/i3_scripts/focus_chrome.sh"))))

(defun my/yank-flush ()
  (interactive)
  (org-narrow-to-subtree)
  (yank)
  (flush-lines "^$"))

(defun my/yank-to-notes ()
  (interactive)
  (my/yank-region)
  (switch-to-buffer-other-window "bash_notes.org")
  (yas-expand-snippet dica))


(defun my/kill-buffer-and-workspace ()
  (interactive)
  (widen)
  (my/save-all)
  (kill-this-buffer)
  (eyebrowse-close-window-config))

(defun ox-export-to-docx-and-open ()
 "Export the current org file as a docx via markdown."
 (interactive)
 (let* ((bibfile (expand-file-name (car (org-ref-find-bibliography))))
        ;; this is probably a full path
        (current-file (buffer-file-name))
        (basename (file-name-sans-extension current-file))
        (docx-file (concat basename ".docx")))
   (save-buffer)
   (when (file-exists-p docx-file) (delete-file docx-file))
   (shell-command (format
                   "pandoc -s -S --bibliography=%s %s -o %s"
                   bibfile current-file docx-file))
   (org-open-file docx-file '(16))))

(defun my/term-emacs-state ()
  (interactive)
  (evil-force-normal-state)
  (evil-emacs-state))

(defun my/reload-keys ()
(interactive)
(load-file "~/.emacs.d/keys.el")
(message "keys reloaded"))

(defun my/blog-post ()
  (interactive)
  (my/quiet-save-buffer)
  (disable-theme 'noctilux)
  (org2blog/wp-post-buffer)
  (load-theme 'noctilux)
  (delete-other-windows)
  (start-process-shell-command "chrome-reload-focus" nil "~/scripts/i3_scripts/chrome_reload.sh"))

(defun my/blog-publish ()
  (interactive)
  (my/quiet-save-buffer)
  (disable-theme 'noctilux)
  (org2blog/wp-post-buffer-and-publish)
  (load-theme 'noctilux)
  (delete-other-windows)
  (start-process-shell-command "chrome-reload-focus" nil "~/scripts/i3_scripts/chrome_reload.sh"))

(defun my/search-pack ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.emacs.d/packs.org")
    (widen)
    (counsel-outline)))

(defun my/pdf-view--rotate (&optional counterclockwise-p page-p)
  "Rotate PDF 90 degrees.  Requires pdftk to work.\n
Clockwise rotation is the default; set COUNTERCLOCKWISE-P to
non-nil for the other direction.  Rotate the whole document by
default; set PAGE-P to non-nil to rotate only the current page.
\nWARNING: overwrites the original file, so be careful!"
  ;; error out when pdftk is not installed
  (if (null (executable-find "pdftk"))
      (error "Rotation requires pdftk")
    ;; only rotate in pdf-view-mode
    (when (eq major-mode 'pdf-view-mode)
      (let* ((rotate (if counterclockwise-p "left" "right"))
	     (file   (format "\"%s\"" (pdf-view-buffer-file-name)))
	     (page   (pdf-view-current-page))
	     (pages  (cond ((not page-p)                        ; whole doc?
			    (format "1-end%s" rotate))
			   ((= page 1)                          ; first page?
			    (format "%d%s %d-end"
				    page rotate (1+ page)))
			   ((= page (pdf-info-number-of-pages)) ; last page?
			    (format "1-%d %d%s"
				    (1- page) page rotate))
			   (t                                   ; interior page?
			    (format "1-%d %d%s %d-end"
				    (1- page) page rotate (1+ page))))))
	;; empty string if it worked
	(if (string= "" (shell-command-to-string
			 (format (concat "pdftk %s cat %s "
					 "output %s.NEW "
					 "&& mv %s.NEW %s")
				 file pages file file file)))
	    (pdf-view-revert-buffer nil t)
	  (error "Rotation error!"))))))

(defun my/pdf-view-rotate-clockwise (&optional arg)
  "Rotate PDF page 90 degrees clockwise.  With prefix ARG, rotate
entire document."
  (interactive "P")
  (pdf-view--rotate nil (not arg)))

(defun my/pdf-view-rotate-counterclockwise (&optional arg)
  "Rotate PDF page 90 degrees counterclockwise.  With prefix ARG,
rotate entire document."
  (interactive "P")
  (pdf-view--rotate :counterclockwise (not arg)))


(defun find-agenda ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/org/Planning/agenda.org")))

(defun find-pcc-notes ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "/home/mrbig/PCC/pcc_notes/pcc_notes.org")))

(defun my/find-scratch-buffer ()
  (interactive)
  (evil-save-state
    (find-scratch-buffer)))

(defun find-i3-config ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.config/i3/config.org")))

(defun find-init ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.emacs.d/init.org")))

(defun find-vertigo ()
  (interactive)
  (let ((inhibit-message t))
    (my/evil-botright)
    (find-file "~/.emacs.d/tmp/vertigo_cheat_sheet")
    (adjust-vertigo-cheat-sheet)
    (disable-modeline)
    (disable-cursor)
    (other-window -1)))

(fset 'adjust-vertigo-cheat-sheet
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([32 116 106 106 106 escape 24 67108912 61 61 escape] 0 "%d") arg)))

(defun find-pdf-keys ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.emacs.d/lisp/functions/pdf_view.el")))

(defun find-abbrevs ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.emacs.d/etc/abbrev_defs")))

(defun find-init.el ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.emacs.d/init.el")))

(defun find-packs ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.emacs.d/packs.org")))

(defun find-packs.el ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.emacs.d/packs.el")))

(defun find-keys ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.emacs.d/keys.org")))

(defun find-keys.el ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.emacs.d/keys.el")))

(defun find-misc ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.emacs.d/misc.org")))

(defun find-misc.el ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.emacs.d/misc.el")))

(defun find-functions ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.emacs.d/functions.org")))

(defun find-functions.el ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.emacs.d/functions.el")))

(defun find-hydras ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.emacs.d/hydras.org")))

(defun find-hydras.el ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.emacs.d/hydras.el")))

(defun find-macros ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.emacs.d/macros.org")))

(defun find-macros.el ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.emacs.d/macros.el")))

(defun find-scratch-markdown ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.emacs.d/tmp/scratch.md")))

(defun find-temp-markdown ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.emacs.d/tmp/temp.md")
    (erase-buffer)
    (yank)
    (beginning-of-buffer)))

(defun find-scratch-org ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.emacs.d/tmp/scratch.org")))

(defun find-scratch-c ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.emacs.d/tmp/scratch.c")))

(defun find-scratch-py ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.emacs.d/tmp/scratch.py")))

(defun find-bash-aliases ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.bash_aliases.org")))


(defun find-bashrc ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.bashrc")))

(defun find-profile ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.profile")))

(defun find-inputrc ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.inputrc")))

(defun find-bash-profile ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.bash_profile")))

(defun find-env_variables ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.env_variables.sh")))

(defun find-tmux-conf ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "/home/dotfiles/tmux/tmuxconf")))

(defun find-zathurarc ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "/home/dotfiles/zathura/zathurarc")))

(defun find-links ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/org/Creative/Web/links.org")
    (olivetti-mode 1)
    (line-no-numbers)
    (olivetti-set-width 80)
    (disable-modeline)
    (beginning-of-buffer)
    (org-next-link)
    (disable-cursor)
    (link-hint-open-link)))

(defun find-emacs-custom ()
  (interactive)
  (let ((inhibit-message t))
    (find-file "~/.emacs.d/etc/custom.el")))

(defun my/goto-scratch-buffer ()
(interactive)
(switch-to-buffer "*scratch*"))

(defun my/goto-info-buffer ()
  (interactive)
  (switch-to-buffer "*info*"))
(defun my/goto-info-buffer-other-window ()
  (interactive)
  (switch-to-buffer-other-window "*info*"))

(defun my/copy-dir ()
  "Put the current dir name on the clipboard"
  (interactive)
  (let ((filename default-directory))
    (setq kill-ring nil)
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (message filename))))

(defun my/copy-filename-only ()
  (interactive)
  (let ((filename (buffer-name)))
    (setq kill-ring nil)
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (message filename))))

;;;; https://stackoverflow.com/questions/2416655/file-path-to-clipboard-in-emacs

(defun prelude-copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename))
(message filename)))

(defun rename-file-and-buffer ()
  "Rename the current buffer and file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (message "Buffer is not visiting a file!")
      (let ((new-name (read-file-name "New name: " filename)))
        (cond
         ((vc-backend filename) (vc-rename-file filename new-name))
         (t
          (rename-file filename new-name t)
          (set-visited-file-name new-name t t)))))))

(defvar my/kill-file-list nil
  "List of recently killed files.")

(defun my/add-file-to-killed-file-list ()
  "If buffer is associated with a file name, add that file to the
`my/kill-file-list' when killing the buffer."
  (when buffer-file-name
    (push buffer-file-name my/kill-file-list)))

(add-hook 'kill-buffer-hook #'my/add-file-to-killed-file-list)

(defun my/reopen-kill-file ()
  "Reopen the most recently killed file, if one exists."
  (interactive)
  (when my/kill-file-list
    (find-file (pop my/kill-file-list))))

(defun my/reopen-kill-file-fancy()
  "Pick a file to revisit from a list of files killed during this
Emacs session."
  (interactive)
  (if my/kill-file-list
      (let ((file (completing-read "Reopen killed file: " my/kill-file-list
                                   nil nil nil nil (car my/kill-file-list))))
        (when file
          (setq my/kill-file-list (cl-delete file my/kill-file-list :test #'equal))
          (find-file file)))
    (error "No recently-killed files to reopen")))

(defun my/goto-warnings-buffer ()
(interactive)
(switch-to-buffer "*Warning*"))

(defun my/goto-messages-buffer ()
(interactive)
(switch-to-buffer "*Messages*"))

(defun my/server-edit ()
(interactive)
(my/quiet-save-buffer)
(server-edit))

(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list)))
  (delete-other-windows)
  (message " other buffers killed"))

(defun kill-all-buffers ()
  "Kill all buffers."
  (interactive)
  (progn
    (my/save-all)
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list)))
    (kill-this-buffer)
    (delete-other-windows)
    (message " all buffers killed")))

(defun my/man-follow (man-args)
  "Get a Un*x manual page of the item under point and put it in a buffer."
  (interactive (list (Man-default-man-entry)))
  (if (or (not man-args)
	  (string= man-args ""))
      (error "No item under point")
    (man man-args))
  (other-window 1)
  (delete-other-windows))

(defun my/push-button (&optional pos use-mouse-action)
  "Perform the action specified by a button at location POS.
POS may be either a buffer position or a mouse-event.  If
USE-MOUSE-ACTION is non-nil, invoke the button's `mouse-action'
property instead of its `action' property; if the button has no
`mouse-action', the value of `action' is used instead.

The action in both cases may be either a function to call or a
marker to display and is invoked using `button-activate' (which
see).

POS defaults to point, except when `push-button' is invoked
interactively as the result of a mouse-event, in which case, the
mouse event is used.
If there's no button at POS, do nothing and return nil, otherwise
return t."
  (interactive
   (list (if (integerp last-command-event) (point) last-command-event)))
  (if (and (not (integerp pos)) (eventp pos))
      ;; POS is a mouse event; switch to the proper window/buffer
      (let ((posn (event-start pos)))
	(with-current-buffer (window-buffer (posn-window posn))
	  (if (posn-string posn)
	      ;; mode-line, header-line, or display string event.
	      (button-activate (posn-string posn) t)
	    (push-button (posn-point posn) t))))
    ;; POS is just normal position
    (let ((button (button-at (or pos (point)))))
      (when button
	(button-activate button use-mouse-action)
	t)))
  (other-window 1)
  (delete-other-windows))

(defun my/Man-previous-section (n)
  "Move point to Nth previous section (default 1)."
  (interactive "p")
  (let ((case-fold-search nil))
    (if (looking-at Man-heading-regexp)
	(forward-line -1))
    (if (re-search-backward Man-heading-regexp (point-min) t n)
	(beginning-of-line)
      (goto-char (point-min)))))

(defun my/Man-next-section (n)
  "Move point to Nth next section (default 1)."
  (interactive "p")
  (let ((case-fold-search nil)
	(start (point)))
    (if (looking-at Man-heading-regexp)
	(forward-line 1))
    (if (re-search-forward Man-heading-regexp (point-max) t n)
	(beginning-of-line)
      (goto-char (point-max))
      ;; The last line doesn't belong to any section.
      (forward-line -1))
    ;; But don't move back from the starting point (can happen if `start'
    ;; is somewhere on the last line).
    (if (< (point) start) (goto-char start))))

(defun my-man()
  (interactive)
  (other-window -1)
  (line-numbers)
  (delete-other-windows)
  (centered-cursor-mode 1))

(defun my-tldr ()
  (interactive)
  (line-numbers)
  (delete-other-windows))

(defun my-man-kill ()
  (interactive)
  (Man-kill)
  (delete-frame))


(defun my/tangle-default ()
  (interactive)
  (widenToCenter)
  (my/quiet-save-buffer)
  (org-babel-tangle-file (prelude-copy-file-name-to-clipboard))
  (message "this file was tangled"))

(defun my/tangle-reload-keys ()
  (interactive)
  (my/quiet-save-buffer)
  (defvar foo)
  (setq foo (concat "tangle-py " (prelude-copy-file-name-to-clipboard)))
  (shell-command foo)
  (load-file "~/.emacs.d/keys.el")
  (message "keys reloaded"))

(defun tangle-py ()
  (interactive)
  (my/quiet-save-buffer)
  (defvar foo)
  (setq foo (concat "tangle-py " (prelude-copy-file-name-to-clipboard)))
  (shell-command foo)
  (message "this file was tangled"))

(defun tangle-and-eval-block ()
  (interactive)
  (indent-block)
  (eval-src-block)
  (start-process-shell-command "tangle" nil "tangle-py ~/.emacs.d/*.org"))

(defun tangle-and-eval-block-narrowed ()
  (interactive)
  (indent-block)
  (widenToCenter)
  (eval-src-block)
  (start-process-shell-command "tangle" nil "tangle-py ~/.emacs.d/*.org")

  (recursive-narrow-or-widen-dwim))

(defun my/reset-keys ()
  (interactive)
  (my/save-all)
  (shell-command "~/scripts/keyboard/init_keys.sh")
  (message "the keys were reseted"))

(defun tangle-py-all ()
  (interactive)
  (my/save-all)
  (shell-command "tangle-py ~/.emacs.d/*.org")
  (message "all files tangled"))

(defun tangle-py-all-recompile ()
  (interactive)
  (my/save-all)
  (shell-command "tangle-py ~/.emacs.d/*.org")
  (my/recompile)
  (message "all files tangled"))

(defun tangle-py-all-debug ()
  (interactive)
  (my/save-all)
  (shell-command "tangle-py ~/.emacs.d/*.org")
  (start-process-shell-command "new emacs" nil "emacs --debug-init"))

(defun tangle-py-all-and-restart ()
  (interactive)
  (progn
    (my/save-all)
    (shell-command "tangle-py ~/.emacs.d/*.org")
    (restart-emacs)))

(defun i3-reload ()
  (interactive)
  (my/save-all)

  (shell-command "tangle-py ~/.config/i3/*.org")
  (let ((inhibit-message t))
    (shell-command "i3-msg fullscreen disable ")
    (shell-command "i3-msg restart"))
  (message "i3 reloaded"))

(defun tangle-py-all-bug-hunter-init ()
  (interactive)
  (my/save-all)

  (shell-command "tangle-py ~/.emacs.d/*.org")
  (load-file user-init-file)
  (bug-hunter-init-file)
  (message "all files were tangled"))

(defun tangle-py-all-and-load ()
  (interactive)
  (my/save-all)

  (shell-command "tangle-py ~/.emacs.d/*.org")
  (load-file user-init-file)
  (message "all files tangled and loaded"))

(defun my/reload-init ()
  (interactive)
  (load-file user-init-file)
  (message "reloaded"))

;;;; TRIPLE CHECK ;;;;

(defun tangle-py-all-with-messages ()
  (interactive)
  (my/save-all)
  (async-shell-command "tangle-py ~/.emacs.d/*.org")
  (other-window -1)
  (evil-window-move-very-bottom)
  (adjust-term-c))

(defun my/save-all ()
  (interactive)
  (setq current-prefix-arg '(4))
  (call-interactively 'save-some-buffers))

;; (defun restart-emacs ()
;;   (interactive)
;;   (shell-command "~/scripts/emacs_scripts/rel"))

(defun tangle-py-all-recompile-new-instance ()
  (interactive)
  (progn
    (my/save-all)
    (shell-command "tangle-py ~/.emacs.d/*.org")
    (my/recompile)
    (async-shell-command "emacs")
    (delete-windows-on "*Async Shell Command*")))

(defun tangle-py-all-recompile-restart ()
  (interactive)
  (progn
    (my/save-all)
    (shell-command "tangle-py ~/.emacs.d/*.org")
    (my/recompile)
    (restart-emacs)))

(defun my/recompile ()
  (interactive)
  (progn
    (byte-recompile-directory "~/.emacs.d")
    (delete-windows-on "*Compile-Log*")
    (message " recompiled")))

(defun my/move-line-up ()
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))

(defun my/move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))

(defun my/insert-em-dash ()
  (interactive)
  (insert "—"))

(defun my/erase-kill-ring ()
(interactive)
(setq kill-ring nil))

(defun my/insert-space ()
  (interactive)
  (insert " "))

(defun my/swapped-insert ()
  (interactive)
  (evil-append 1)
  (evil-swap-keys-mode 'toggle))

(defun my/swapped-disable ()
  (interactive)
  (evil-swap-keys-mode -1))

(defun my/swapped-enable ()
  (interactive)
  (evil-swap-keys-mode 1))

(defun my/org-started ()
  (interactive)
  (org-todo "STARTED")
  (org-clock-in))

(defun my/copy-to-line-end ()
  (interactive)
  (evil-yank-line))

(defun my/append-to-visual-line ()
(interactive)
(evil-end-of-visual-line)
(evil-insert-state))

(defun my/insert-to-visual-line ()
  (interactive)
  (evil-beginning-of-visual-line)
  (evil-insert-state))

(defun my/capitalize ()
  (interactive)
  (fix-word-capitalize)
  (insert " "))


(defun my/undo-to-x ()
  (interactive)
  (undo-tree-save-state-to-register 'x)
  (message " state 1 saved"))
(defun my/undo-restore-x ()
  (interactive)
  (undo-tree-restore-state-from-register 'x)
  (message " state 1 restored"))

(defun my/undo-to-y ()
  (interactive)
  (undo-tree-save-state-to-register 'y)
  (message " state 2 saved"))
(defun my/undo-restore-y ()
  (interactive)
  (undo-tree-restore-state-from-register 'y)
  (message " state 2 restored"))

(defun my/undo-to-z ()
  (interactive)
  (undo-tree-save-state-to-register 'z)
  (message " state 3 saved"))
(defun my/undo-restore-z ()
  (interactive)
  (undo-tree-restore-state-from-register 'z)
  (message " state 3 restored"))



(defun indent-buffer-python ()
  (interactive)
  (save-excursion
    (let ((inhibit-message t))
      (evil-indent
       (point-min)
       (point-max)))))

(defun indent-buffer ()
  (interactive)
  (save-excursion
    (let ((inhibit-message t))
      (evil-indent
       (point-min)
       (point-max))
      (xah-clean-empty-lines))))

(defun copy-whole-buffer ()
  "Copy entire buffer to clipboard"
  (interactive)
  (clipboard-kill-ring-save
   (point-min)
   (point-max)))

(defun kill-buffer-contents ()
  (interactive)
  (kill-region
   (point-min)
   (point-max)))

(defun copy-to-chrome ()
  "Paste buffer on Chrome"
  (interactive)
  (copy-whole-buffer)
  (let ((inhibit-message t))
    (shell-command "~/scripts/i3_scripts/paste_to_chrome.sh")))

(defun copy-to-messenger ()
  (interactive)
  (copy-whole-buffer)
  (let ((inhibit-message t))
    (shell-command "~/scripts/i3_scripts/paste_to_im.sh")))

(defun my/unfill-paragraph (&optional region)
  "Takes a multi-line paragraph and makes it into a single line of text."
  (interactive (progn
		 (barf-if-buffer-read-only)
		 (list t)))
  (let ((fill-column (point-max)))
    (fill-paragraph nil region)))

(defun my/super-unfill-buffer ()
  (interactive)
  (save-excursion
    (mark-whole-buffer)
    (my/unfill-paragraph t)))

(defun my/super-fill-buffer ()
  (interactive)
  (fill-region
   (point-min)
   (point-max)))

;; (defmacro without-evil-mode (&rest do-this)
;;   ;; Check if evil-mode is on, and disable it temporarily
;;   `(let ((evil-mode-is-on (evil-mode?)))
;;      (if evil-mode-is-on
;;          (disable-evil-mode))
;;      (ignore-errors
;;        ,@do-this)
;;      (if evil-mode-is-on
;;          (enable-evil-mode))))

;; (defmacro evil-mode? ()
;;   "Checks if evil-mode is active. Uses Evil's state to check."
;;   `evil-state)

;; (defmacro disable-evil-mode ()
;;   "Disable evil-mode with visual cues."
;;   `(progn
;;      (evil-mode 0)
;;      (message "Evil mode disabled")))

;; (defmacro enable-evil-mode ()
;;   "Enable evil-mode with visual cues."
;;   `(progn
;;      (evil-mode 1)
;;      (message "Evil mode enabled")))

;; ;; delete: char
;; (evil-define-operator evil-destroy-char (beg end type register yank-handler)
;;   :motion evil-forward-char
;;   (evil-delete-char beg end type ?_))

;; ;; delete: char (backwards)
;; (evil-define-operator evil-destroy-backward-char (beg end type register yank-handler)
;;   :motion evil-forward-char
;;   (evil-delete-backward-char beg end type ?_))

;; ;; delete: text object
;; (evil-define-operator evil-destroy (beg end type register yank-handler)
;;   "Vim's 's' without clipboard."
;;   (evil-delete beg end type ?_ yank-handler))

;; ;; delete: to end of line
;; (evil-define-operator evil-destroy-line (beg end type register yank-handler)
;;   :motion nil
;;   :keep-visual t
;;   (interactive "<R><x>")
;;   (evil-delete-line beg end type ?_ yank-handler))

;; ;; delete: whole line
;; (evil-define-operator evil-destroy-whole-line (beg end type register yank-handler)
;;   :motion evil-line
;;   (interactive "<R><x>")
;;   (evil-delete-whole-line beg end type ?_ yank-handler))

;; ;; change: text object
;; (evil-define-operator evil-destroy-change (beg end type register yank-handler delete-func)
;;   (evil-change beg end type ?_ yank-handler delete-func))

;; ;; paste: before
;; (defun evil-destroy-paste-before ()
;;   (interactive)
;;   (without-evil-mode
;;    (delete-region (point) (mark))
;;    (evil-paste-before 1)))

;; ;; paste: after
;; (defun evil-destroy-paste-after ()
;;   (interactive)
;;   (without-evil-mode
;;    (delete-region (point) (mark))
;;    (evil-paste-after 1)))

;; ;; paste: text object
;; (evil-define-operator evil-destroy-replace (beg end type register yank-handler)
;;   (evil-destroy beg end type register yank-handler)
;;   (evil-paste-before 1 register))

(defun my/truncate-off ()
(interactive)
(setq truncate-lines nil))

(defun my/company-ispell-en ()
  (interactive)
  (set (make-local-variable 'company-backends)
       '(company-ispell company-dabbrev company-dabbrev-code))
  (setq-local company-ispell-dictionary nil)
  (setq-local company-tooltip-limit 8)
  (setq-local company-idle-delay 0.4)
  (setq-local company-minimum-prefix-length 3)
  (message " company-ispell-en enabled"))

(defun my/company-ispell-pt ()
  (interactive)
  (set (make-local-variable 'company-backends)
       '(company-ispell company-dabbrev company-dabbrev-code))
  (set (make-local-variable 'company-ispell-dictionary)
       (file-truename "~/.emacs.d/etc/ptBR-2013-10-30AOC-2/pt_BR.txt"))
  (setq-local company-tooltip-limit 8)
  (setq-local company-idle-delay 0.2)
  (setq-local company-minimum-prefix-length 3)
  (message " company-ispell-pt enabled"))

(defun my/company-defaults ()
  (interactive)
  (setq company-backends '(company-bbdb company-eclim company-semantic company-clang company-xcode company-cmake company-capf company-files (company-dabbrev-code company-gtags company-etags company-keywords) company-oddmuse company-dabbrev company-shell))
  (message " company-defaults"))

(defun my/company-prose ()
  (interactive)
  (setq-local company-backends '(company-bbdb company-eclim company-semantic company-clang company-xcode company-cmake company-capf company-files (company-dabbrev-code company-gtags company-etags company-keywords) company-oddmuse company-dabbrev company-shell))
  (setq-local company-tooltip-limit 5)
  (setq-local company-idle-delay 0.0)
  (setq-local company-minimum-prefix-length 3)
  (message " company-prose"))



(defun my/company-show-options ()
  (interactive)
  (counsel-M-x "^my/company-idle-"))

(defun my/counsel-projectile-commands ()
  (interactive)
  (counsel-M-x "^counsel-projectile "))

(defun my/eclim-commands ()
  (interactive)
  (counsel-M-x "^eclim- "))

(defun my/company-show-delay ()
  (interactive)
  (describe-variable 'company-idle-delay))

(defun my/company-show-prefix-length ()
  (interactive)
  (describe-variable 'company-minimum-prefix-length))

(defun my/company-idle-zero-prefix-one ()
  (interactive)
  (setq-local company-idle-delay 0.0)
  (setq-local company-tooltip-limit 5)
  (setq-local company-minimum-prefix-length 1)
  (message "idle delay: 0, minimun prefix length: 1"))

(defun my/company-idle-zero-prefix-two ()
  (interactive)
  (setq-local company-idle-delay 0.0)
  (setq-local company-minimum-prefix-length 2)
  (message "idle delay: 0, minimun prefix length: 2"))

(defun my/company-idle-one-prefix-one ()
  (interactive)
  (setq-local company-idle-delay 0.1)
  (setq-local company-tooltip-limit 5)
  (setq-local company-minimum-prefix-length 1)
  (message "idle delay: 0.1, minimun prefix length: 1"))

(defun my/company-idle-one-prefix-two ()
  (interactive)
  (setq-local company-idle-delay 0.1)
  (setq-local company-tooltip-limit 5)
  (setq-local company-minimum-prefix-length 2)
  (message "idle delay: 0.1, minimun prefix length: 2"))

(defun my/company-idle-two-prefix-one ()
  (interactive)
  (setq-local company-idle-delay 0.2)
  (setq-local company-tooltip-limit 5)
  (setq-local company-minimum-prefix-length 1)
  (message "idle delay: 0.2, minimun prefix length: 1"))

(defun my/company-idle-two-prefix-two ()
  (interactive)
  (setq-local company-idle-delay 0.2)
  (setq-local company-tooltip-limit 5)
  (setq-local company-minimum-prefix-length 2)
  (message "idle delay: 0.2, minimun prefix length: 2"))


(defun my/company-complete ()
  (interactive)
  (company-complete)
  (insert " "))

(defun my/company-complete-first ()
  (interactive)
  (company-select-next)
  (company-complete))

(defun my/company-complete-first-comint ()
  (interactive)
  (company-select-next)
  (company-complete)
  (comint-send-input))

(defun my/company-complete-comint ()
  (interactive)
  (company-complete)
  (comint-send-input))


(defun my/company-yasnippet ()
  (interactive)
  (company-abort)
  (yas-expand))

(defun my/company-abort-all ()
  (interactive)
  (company-abort)
  (backward-kill-word 1))

(defun my/evil-substitute ()
  (interactive)
(evil-ex "%s/"))

(defun del-dup-lines-region (start end)
  "Find duplicate lines in region START to END keeping first occurrence."
  (interactive "*r")
  (save-excursion
    (let ((end (copy-marker end)))
      (while
          (progn
            (goto-char start)
            (re-search-forward "^\\(.*\\)\n\\(\\(.*\n\\)*\\)\\1\n" end t))
        (replace-match "\\1\n\\2")))))

(defun del-dup-lines-buffer ()
  "Delete duplicate lines in buffer and keep first occurrence."
  (interactive "*")
  (uniquify-all-lines-region (point-min) (point-max)))

(defun sel-to-end ()
(interactive)
(evil-visual-char)
(evil-last-non-blank))


(defun my/bash-shebang ()
  (interactive)
  (beginning-of-buffer)
  (let ((inhibit-message t))
    (kill-buffer-contents)
    (sh-mode)
    (insert "#!/usr/bin/env bash")
    (sh-set-shell "bash")
    (my/quiet-save-buffer-markdown)
    (newline nil 1)
    (newline nil 1)
    (evil-insert-state)))

(defun my/python-shebang ()
  (interactive)
  (beginning-of-buffer)
  (let ((inhibit-message t))
    (kill-buffer-contents)
    (insert "#!/usr/bin/env python3")
    (newline nil 1)
    (newline nil 1)))


(defun toggle-camelcase-underscores ()
  "Toggle between camelcase and underscore notation for the symbol at point."
  (interactive)
  (save-excursion
    (let* ((bounds (bounds-of-thing-at-point 'symbol))
           (start (car bounds))
           (end (cdr bounds))
           (currently-using-underscores-p (progn (goto-char start)
                                                 (re-search-forward "_" end t))))
      (if currently-using-underscores-p
          (progn
            (upcase-initials-region start end)
            (replace-string "_" "" nil start end)
            (downcase-region start (1+ start)))
        (replace-regexp "\\([A-Z]\\)" "_\\1" nil (1+ start) end)
        (downcase-region start (cdr (bounds-of-thing-at-point 'symbol)))))))

(defun whack-whitespace (arg)
  "Delete all white space from point to the next word.  With prefix ARG
    delete across newlines as well.  The only danger in this is that you
    don't have to actually be at the end of a word to make it work.  It
    skips over to the next whitespace and then whacks it all to the next
    word."
  (interactive "P")
  (let ((regexp (if arg "[ \t\n]+" "[ \t]+")))
    (re-search-forward regexp nil t)
    (replace-match "" nil nil)))

(defun endless/simple-get-word ()
  (car-safe (save-excursion (ispell-get-word nil))))

(defun endless/ispell-word-then-abbrev (p)
  "Call `ispell-word', then create an abbrev for it.
With prefix P, create local abbrev. Otherwise it will
be global.
If there's nothing wrong with the word at point, keep
looking for a typo until the beginning of buffer. You can
skip typos you don't want to fix with `SPC', and you can
abort completely with `C-g'."
  (interactive "P")
  (let (bef aft)
    (save-excursion
      (while (if (setq bef (endless/simple-get-word))
		 ;; Word was corrected or used quit.
		 (if (ispell-word nil 'quiet)
		     nil ; End the loop.
		   ;; Also end if we reach `bob'.
		   (not (bobp)))
	       ;; If there's no word at point, keep looking
	       ;; until `bob'.
	       (not (bobp)))
	(backward-word)
	(backward-char))
      (setq aft (endless/simple-get-word)))
    (if (and aft bef (not (equal aft bef)))
	(let ((aft (downcase aft))
	      (bef (downcase bef)))
	  (define-abbrev
	    (if p local-abbrev-table global-abbrev-table)
	    bef aft)
	  (message "\"%s\" now expands to \"%s\" %sally"
		   bef aft (if p "loc" "glob")))
      (user-error "No typo at or before point"))))

(setq save-abbrevs 'silently)
(setq-default abbrev-mode t)

(defun backward-kill-line (arg)
  "Kill ARG lines backward."
  (interactive "p")
  (kill-line (- 1 arg)))

(defun brasileiro ()
(interactive)
(ispell-change-dictionary "brasileiro")
(flyspell-buffer)
(message " português"))

(defun american ()
(interactive)
(ispell-change-dictionary "american")
(flyspell-buffer)
(message " american"))

;; https://stackoverflow.com/a/30697761/9509067
(defun sort-lines-by-length (reverse beg end)
  "Sort lines by length."
  (interactive "P\nr")
  (save-excursion
    (save-restriction
      (narrow-to-region beg end)
      (goto-char (point-min))
      (let ;; To make `end-of-line' and etc. to ignore fields.
          ((inhibit-field-text-motion t))
        (sort-subr reverse 'forward-line 'end-of-line nil nil
                   (lambda (l1 l2)
                     (apply #'< (mapcar (lambda (range) (- (cdr range) (car range)))
                                        (list l1 l2)))))))))

(defun my/par-justify-59 (&optional _justify)
  "Invoke shell command `par' on the current paragraph."
  (interactive)
  (save-excursion
    (mark-paragraph)
    (forward-whitespace 1)
    (shell-command-on-region (point) (mark) "par 59j1g1" nil :replace))
  t) ;; Don't return nil. See variable `fill-paragraph-function'.

(defun my/par-justify-79 (&optional _justify)
  "Invoke shell command `par' on the current paragraph."
  (interactive)
  (save-excursion
    (mark-paragraph)
    (forward-whitespace 1)
    (shell-command-on-region (point) (mark) "par 79j1g1" nil :replace))
  t) ;; Don't return nil. See variable `fill-paragraph-function'.

(defun my/par-justify-85 (&optional _justify)
  "Invoke shell command `par' on the current paragraph."
  (interactive)
  (save-excursion
    (mark-paragraph)
    (forward-whitespace 1)
    (shell-command-on-region (point) (mark) "par 85j1g1" nil :replace))
  t) ;; Don't return nil. See variable `fill-paragraph-function'.

(defun my/par-justify-95 (&optional _justify)
  "Invoke shell command `par' on the current paragraph."
  (interactive)
  (save-excursion
    (mark-paragraph)
    (forward-whitespace 1)
    (shell-command-on-region (point) (mark) "par 95j1g1" nil :replace))
  t) ;; Don't return nil. See variable `fill-paragraph-function'.

(defun my/par-justify-100 (&optional _justify)
  "Invoke shell command `par' on the current paragraph."
  (interactive)
  (save-excursion
    (mark-paragraph)
    (forward-whitespace 1)
    (shell-command-on-region (point) (mark) "par 105j1g1" nil :replace))
  t) ;; Don't return nil. See variable `fill-paragraph-function'.

(defun my/par-fit-59 (&optional _justify)
  "Invoke shell command `par' on the current paragraph."
  (interactive)
  (save-excursion
    (mark-paragraph)
    (forward-whitespace 1)
    (shell-command-on-region (point) (mark) "par 59f1g1" nil :replace))
  t) ;; Don't return nil. See variable `fill-paragraph-function'.

(defun my/par-fit-79 (&optional _justify)
  "Invoke shell command `par' on the current paragraph."
  (interactive)
  (save-excursion
    (mark-paragraph)
    (forward-whitespace 1)
    (shell-command-on-region (point) (mark) "par 79f1g1" nil :replace))
  t) ;; Don't return nil. See variable `fill-paragraph-function'.

(defun my/par-fit-85 (&optional _justify)
  "Invoke shell command `par' on the current paragraph."
  (interactive)
  (save-excursion
    (mark-paragraph)
    (forward-whitespace 1)
    (shell-command-on-region (point) (mark) "par 85f1g1" nil :replace))
  t) ;; Don't return nil. See variable `fill-paragraph-function'.

(defun my/par-fit-95 (&optional _justify)
  "Invoke shell command `par' on the current paragraph."
  (interactive)
  (save-excursion
    (mark-paragraph)
    (forward-whitespace 1)
    (shell-command-on-region (point) (mark) "par 95f1g1" nil :replace))
  t) ;; Don't return nil. See variable `fill-paragraph-function'.

(defun my/par-fit-100 (&optional _justify)
  "Invoke shell command `par' on the current paragraph."
  (interactive)
  (save-excursion
    (mark-paragraph)
    (forward-whitespace 1)
    (shell-command-on-region (point) (mark) "par 125f1g1" nil :replace))
  t) ;; Don't return nil. See variable `fill-paragraph-function'.

(defun my/next-sentence ()
  (interactive)
  (evil-forward-sentence-begin)
  (beacon-blink))

(defun my/prev-sentence ()
  (interactive)
  (evil-backward-sentence-begin)
  (beacon-blink))

(defun widenToCenter ()
  (interactive)
  (save-excursion
    (widen)
    (recenter)))

(defun my/paragraph-backwards ()
  (interactive)
  (previous-line)
  (backward-paragraph)
  (next-line)
  (back-to-indentation))

(defun my/paragraph-forward ()
  (interactive)
  (forward-paragraph)
  (next-line)
  (back-to-indentation))

(defun my/markdown-forward-paragraph ()
(interactive)
(markdown-forward-paragraph)
(forward-to-indentation))

(defun last-buffer ()
  "Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))


(defun my/goto-pdf-window ()
  (interactive)
  (let ((which-key-inhibit t))
    (switch-to-buffer-other-window "bash_guide.pdf")))

(defun my/goto-bash-notes ()
  (interactive)
  (let ((which-key-inhibit t))
    (switch-to-buffer-other-window "bash_notes.org")))

(defun my/goto-shell-window ()
  (interactive)
  (let ((which-key-inhibit t))
    (switch-to-buffer-other-window "*shell*")))



(defun my/window-to-register-91 ()
  (interactive)
  (window-configuration-to-register 91)
  (message " layout saved"))

(defun my/jump-to-register-91 ()
  (interactive)
  (jump-to-register 91)
  (message " layout 1 restored"))

(defun my/window-to-register-nine ()
  (interactive)
  (window-configuration-to-register 99)
  (message " layout 1 saved"))

(defun my/jump-to-register-nine ()
  (interactive)
  (jump-to-register 99)
  (message " layout 1 restored"))

(defun my/window-to-register-eight ()
  (interactive)
  (window-configuration-to-register 88)
  (message " layout 2 saved"))

(defun my/jump-to-register-eight ()
  (interactive)
  (jump-to-register 88)
  (message " layout 2 restored"))

(defun my/window-to-register-sevenseven ()
  (interactive)
  (window-configuration-to-register 77)
  (message " layout 7 saved"))

(defun my/jump-to-register-sevenseven ()
  (interactive)
  (jump-to-register 55)
  (message " layout 7 restored"))

(defun my/window-to-register-fivefive ()
  (interactive)
  (window-configuration-to-register 55))

(defun my/jump-to-register-fivefive ()
  (interactive)
  (jump-to-register 55))


(defun text-scale-reset ()
  (interactive)
  (text-scale-adjust 0)
  (message ""))

(defun disable-modeline ()
  (interactive)
  (setq-local mode-line-format nil))


(defun my/split-below ()
  (interactive)
  (split-window-below)
  (other-window 1))

(defun my/split-right ()
  (interactive)
  (split-window-right)
  (other-window 1))

(defun my/split-vertically ()
  (interactive)
  (split-window-vertically)
  (other-window 1))

(defun my/evil-botright ()
  (interactive)
  (evil-window-new 1 "*scratch*")
  (evil-window-move-very-bottom))

(defalias 'my/evil-very-bottom 'my/evil-botright)

(defun my/evil-very-right ()
  (interactive)
  (split-window-right)
  (other-window 1)
  (evil-window-move-far-right))

(defun my/evil-very-left ()
  (interactive)
  (split-window-right)
  (other-window 1)
  (evil-window-move-far-left))

(defun my/evil-very-top ()
  (interactive)
  (split-window-right)
  (other-window 1)
  (evil-window-move-very-top))


(defun my/evil-inc-width-small ()
  (interactive)
  (let ((current-prefix-arg 6))
    (call-interactively 'evil-window-increase-width)))

(defun my/evil-dec-width-small ()
  (interactive)
  (let ((current-prefix-arg 6))
    (call-interactively 'evil-window-decrease-width)))

(defun my/evil-inc-height-small ()
  (interactive)
  (let ((current-prefix-arg 6))
    (call-interactively 'evil-window-increase-height)))

(defun my/evil-dec-height-small ()
  (interactive)
  (let ((current-prefix-arg 6))
    (call-interactively 'evil-window-decrease-height)))

(defun my/evil-inc-witdh-large ()
  (interactive)
  (let ((current-prefix-arg 12))
    (call-interactively 'evil-window-increase-witdh-large)))

(defun my/evil-dec-witdh-large ()
  (interactive)
  (let ((current-prefix-arg 12))
    (call-interactively 'evil-window-decrease-witdh-large)))

(defun my/evil-inc-height-large ()
  (interactive)
  (let ((current-prefix-arg 12))
    (call-interactively 'evil-window-increase-height-large)))

(defun my/evil-dec-height-large ()
  (interactive)
  (let ((current-prefix-arg 12))
    (call-interactively 'evil-window-decrease-height-large)))

(defun my/evil-inc-width ()
  (interactive)
  (let ((current-prefix-arg 8))
    (call-interactively 'evil-window-increase-width)))

(defun my/evil-dec-width ()
  (interactive)
  (let ((current-prefix-arg 8))
    (call-interactively 'evil-window-decrease-width)))

(defun my/evil-inc-height ()
  (interactive)
  (let ((current-prefix-arg 8))
    (call-interactively 'evil-window-increase-height)))

(defun my/evil-dec-height ()
  (interactive)
  (let ((current-prefix-arg 8))
    (call-interactively 'evil-window-decrease-height)))


(defun my/enlarge-window ()
  (interactive)
  (let ((current-prefix-arg 10))
    (call-interactively 'enlarge-window)))

(defun my/enlarge-window-horizontally ()
  (interactive)
  (let ((current-prefix-arg 10))
    (call-interactively 'enlarge-window-horizontally)))

(defun my/shrink-window ()
  (interactive)
  (let ((current-prefix-arg 10))
    (call-interactively 'shrink-window)))

(defun my/shrink-window-horizontally ()
  (interactive)
  (let ((current-prefix-arg 10))))

(defun my/evil-shell-bottom ()
  (interactive)
  (end-of-buffer)
  (evil-insert-state)
  (comint-clear-buffer)
  (message " "))

(defun my/shell-resync ()
  (interactive)
  (comint-kill-whole-line 1)
  (shell-resync-dirs)
  (comint-clear-buffer)
  (insert "ls")
  (comint-send-input))


(defun my/shell-list ()
  (interactive)
  (insert "ls")
  (comint-send-input))

(defun my/shell-clear-and-list ()
  (interactive)
  (comint-clear-buffer)
  (insert "ls")
  (comint-send-input))

(defun my/shell-go-up ()
  (interactive)
  (insert "cd ..")
  (comint-send-input)
  (comint-clear-buffer)
  (insert "ls")
  (comint-send-input))

(defun my/shell-go-back ()
  (interactive)
  (comint-clear-buffer)
  (insert "cd - && ls")
  (comint-send-input))

(defun my/shell-fasd-start ()
  (interactive)
  (insert "jj "))

(defun my/shell-fasd-complete ()
  (interactive)
  (comint-send-input)
  (comint-clear-buffer)
  (insert "ls")
  (comint-send-input))

(defun my/shell-go-previous ()
  (interactive)
  (comint-clear-buffer)
  (insert "my-shell-go-previous")
  (comint-send-input)
  (comint-clear-buffer)
  (insert "ls")
  (comint-send-input))



(defun my/shell-mode-hooks ()
  (interactive)
  (subword-mode 1)
  (company-mode 1)
  (smartparens-mode 1)
  (tab-jump-out-mode 1)
  (electric-pair-local-mode 1)
  (my/company-idle-zero-prefix-one)
  (beacon-mode 1)
  (my/shell-source-bashrc))

(defun my/shell-source-bashrc ()
  (interactive)
  (insert "source ~/.bashrc")
  (comint-send-input)
  (comint-clear-buffer))


(defun my/unpop-shell-other-window ()
  (interactive)
  (my/window-to-register-299)
  (delete-windows-on "*shell*"))

(defun my/pop-to-shell-other-window ()
  (interactive)
  (switch-to-buffer-other-window "*shell*")
  (my/jump-to-register-299))

(defun my/window-to-register-299 ()
  (interactive)
  (window-configuration-to-register 299))

(defun my/jump-to-register-299 ()
  (interactive)
  (jump-to-register 299))

(defun my/enlarge-window-negative ()
  (interactive)
  (let ((current-prefix-arg -8))
    (call-interactively 'enlarge-window)))



(defun my/term-botright ()
  (interactive)
  (evil-window-split)
  (windmove-down)
  (evil-window-move-very-bottom)
  (term "/bin/bash")
  (comint-clear-buffer)
  (my/evil-dec-height))

(defun my/shell-botright ()
  (interactive)
  (my/window-to-register-nine)
  (shell)
  (evil-window-move-very-bottom)
  (evil-insert-state)
  (my/jump-to-register-nine)
  (my/evil-botright)
  (switch-to-buffer "*shell*")
  (my/evil-dec-height)
  (setq-local line-spacing 2))

(defun my/shell-bellow ()
  (interactive)
  (my/window-to-register-nine)
  (shell)
  (evil-window-move-very-bottom)
  (evil-insert-state)
  (my/jump-to-register-nine)
  (my/evil-botright)
  (switch-to-buffer "*shell*")
  (setq-local line-spacing 2))

(defun my/shell-far-right ()
  (interactive)
  (my/window-to-register-nine)
  (shell)
  (evil-window-move-far-right)
  (evil-insert-state)
  (my/jump-to-register-nine)
  (my/evil-very-right)
  (switch-to-buffer "*shell*")
  (setq-local line-spacing 2))

(defun my/shell-far-left ()
  (interactive)
  (my/window-to-register-nine)
  (shell)
  (evil-window-move-far-left)
  (evil-insert-state)
  (my/jump-to-register-nine)
  (my/evil-very-left)
  (switch-to-buffer "*shell*")
  (setq-local line-spacing 2))

(defun my/shell-very-top ()
  (interactive)
  (my/window-to-register-nine)
  (shell)
  (evil-window-move-very-top)
  (evil-insert-state)
  (my/jump-to-register-nine)
  (my/evil-very-top)
  (switch-to-buffer "*shell*")
  (setq-local line-spacing 2))

(defun my/term-dec-height ()
  (interactive)
  (let ((current-prefix-arg 6))
    (call-interactively 'evil-window-decrease-height)))



;; (defun execute-shell-program ()
;;   (interactive)
;;   (my/quiet-save-buffer)
;;   (defvar foo)
;;   (setq foo (concat "bash " (buffer-file-name)))
;;   (switch-to-buffer-other-window "*Async Shell Command*")
;;   (async-shell-command foo)
;;   (evil-window-move-very-bottom)
;;   (hl-line-mode 1)
;;   (evil-normal-state))

(defun execute-shell-program ()
  (interactive)
  (my/quiet-save-buffer)
  (defvar foo)
  (setq foo (concat "bash " (buffer-file-name)))
  (async-shell-command foo)
  (switch-to-buffer-other-window "*Async Shell Command*")
  (evil-normal-state))

(defun my/kill-buffer ()
  (interactive)
  (kill-this-buffer)
  (other-window -1))


(defun execute-python-program ()
  (interactive)
  (my/window-to-register-91)
  (my/quiet-save-buffer)
  (defvar foo)
  (setq foo (concat "python3 " (buffer-file-name)))
  (other-window 1)
  (switch-to-buffer-other-window "*Async Shell Command*")
  (shell-command foo))

(defun my/execute-python-program-shell-simple  ()
  (interactive)
  (my/window-to-register-91)
  (my/quiet-save-buffer)
  (defvar foo)
  (setq foo (concat "python3 " (prelude-copy-file-name-to-clipboard)))
  (shell-command foo))

(defun my/execute-python-program-shell ()
  (interactive)
  (progn
    (my/quiet-save-buffer)
    (prelude-copy-file-name-to-clipboard)
    (shell)
    (sit-for 0.3)
    (insert "source ~/scripts/cline_scripts/smallprompt.sh")
    (comint-send-input)
    (insert "python3 ")
    (yank)
    (comint-send-input)
    (evil-insert-state)
    (sit-for 0.3)
    (comint-clear-buffer)
    (company-mode -1)))


(defun ipython ()
  (interactive)
  (term "/home/dotfiles/scripts/cline_scripts/ipython-no-banner"))

(defun my/ipython-botright ()
  (interactive)
  (my/window-to-register-nine)
  (ipython)
  (evil-window-move-very-bottom)
  (evil-insert-state)
  (my/jump-to-register-nine)
  (my/evil-botright)
  (switch-to-buffer "*terminal*")
  (my/evil-dec-height)
  (sit-for 0.1)
  (comint-clear-buffer))


(defun bpython ()
  (interactive)
  (term "bpython3"))

(defun my/bpython-botright ()
  (interactive)
  (progn
    (my/window-to-register-91)
    (bpython)
    (evil-window-move-very-bottom)
    (evil-insert-state)
    (my/jump-to-register-nine)
    (my/evil-botright)
    (switch-to-buffer "*terminal*")
    (my/evil-dec-height)
    (sit-for 0.1)
    (comint-clear-buffer)))



(defun my/unpop-python-other-window ()
  (interactive)
  (my/window-to-register-301)
  (delete-windows-on "*Python*"))

(defun my/pop-to-python-other-window ()
  (interactive)
  (switch-to-buffer-other-window "*Python*")
  (my/jump-to-register-301))

(defun my/window-to-register-301 ()
  (interactive)
  (window-configuration-to-register 301))

(defun my/jump-to-register-301 ()
  (interactive)
  (jump-to-register 301))

(defun my/enlarge-window-negative ()
  (interactive)
  (let ((current-prefix-arg -8))
    (call-interactively 'enlarge-window)))

(defun my/python-botright ()
  (interactive)
  (my/window-to-register-nine)
  (run-python)
  (evil-window-move-very-bottom)
  (evil-insert-state)
  (my/jump-to-register-nine)
  (my/evil-botright)
  (switch-to-buffer "*Python*")
  (my/evil-dec-height)
  (sit-for 0.1)
  (comint-clear-buffer))


(defmacro with-timer (title &rest forms)
  "Run the given FORMS, counting the elapsed time.
A message including the given TITLE and the corresponding elapsed
time is displayed."
  (declare (indent 1))
  (let ((nowvar (make-symbol "now"))
	(body   `(progn ,@forms)))
    `(let ((,nowvar (current-time)))
       (message "%s..." ,title)
       (prog1 ,body
	 (let ((elapsed
		(float-time (time-subtract (current-time) ,nowvar))))
	   (message "%s... done (%.3fs)" ,title elapsed))))))

(defun my/time-benchmark ()
  (interactive)
  (with-timer
      (find-file "~/.emacs.d/packs.org")))


(defun my/enable-ivy-counsel ()
  (interactive)
  (ivy-mode 1)
  (counsel-mode 1)
  (message "ivy on"))

(defun my/disable-ivy-counsel ()
  (interactive)
  (ivy-mode -1)
  (counsel-mode -1)
  (message "ivy off"))



(defun my/conf-hooks ()
  (interactive)
  (line-numbers)
  (subword-mode 1)
  (company-mode 1)
  (flycheck-mode 1)
  (smartparens-mode 1)
  (tab-jump-out-mode 1)
  (electric-operator-mode 1)
  (rainbow-delimiters-mode 1)
  (electric-pair-local-mode 1)
  (highlight-numbers-mode 1)
  (highlight-operators-mode 1)
  (highlight-indent-guides-mode 1)
  (electric-pair-local-mode 1)
  (subword-mode 1)
  (tab-jump-out-mode 1))

(add-hook 'conf-space-mode-hook 'my/conf-hooks)


(defun my/man-follow (man-args)
  "Get a Un*x manual page of the item under point and put it in a buffer."
  (interactive (list (Man-default-man-entry)))
  (if (or (not man-args)
	  (string= man-args ""))
      (error "No item under point")
    (man man-args))
(other-window 1)
(delete-other-windows))

(defun my/push-button (&optional pos use-mouse-action)
  "Perform the action specified by a button at location POS.
POS may be either a buffer position or a mouse-event.  If
USE-MOUSE-ACTION is non-nil, invoke the button's `mouse-action'
property instead of its `action' property; if the button has no
`mouse-action', the value of `action' is used instead.

The action in both cases may be either a function to call or a
marker to display and is invoked using `button-activate' (which
see).

POS defaults to point, except when `push-button' is invoked
interactively as the result of a mouse-event, in which case, the
mouse event is used.
If there's no button at POS, do nothing and return nil, otherwise
return t."
  (interactive
   (list (if (integerp last-command-event) (point) last-command-event)))
  (if (and (not (integerp pos)) (eventp pos))
      ;; POS is a mouse event; switch to the proper window/buffer
      (let ((posn (event-start pos)))
	(with-current-buffer (window-buffer (posn-window posn))
	  (if (posn-string posn)
	      ;; mode-line, header-line, or display string event.
	      (button-activate (posn-string posn) t)
	    (push-button (posn-point posn) t))))
    ;; POS is just normal position
    (let ((button (button-at (or pos (point)))))
      (when button
	(button-activate button use-mouse-action)
	t)))
(other-window 1)
(delete-other-windows))

(defun my/Man-previous-section (n)
  "Move point to Nth previous section (default 1)."
  (interactive "p")
  (let ((case-fold-search nil))
    (if (looking-at Man-heading-regexp)
	(forward-line -1))
    (if (re-search-backward Man-heading-regexp (point-min) t n)
	(beginning-of-line)
      (goto-char (point-min)))))

(defun my/Man-next-section (n)
  "Move point to Nth next section (default 1)."
  (interactive "p")
  (let ((case-fold-search nil)
        (start (point)))
    (if (looking-at Man-heading-regexp)
	(forward-line 1))
    (if (re-search-forward Man-heading-regexp (point-max) t n)
	(beginning-of-line)
      (goto-char (point-max))
      ;; The last line doesn't belong to any section.
      (forward-line -1))
    ;; But don't move back from the starting point (can happen if `start'
    ;; is somewhere on the last line).
    (if (< (point) start) (goto-char start))))

(defun my/man()
  (interactive)
  (other-window -1)
  (line-numbers)
  (delete-other-windows)
  (centered-cursor-mode 1))

(defun my/man-kill ()
  (interactive)
  (Man-kill)
  (delete-frame))



(defun my/pdf-goto-start ()
  (interactive)
  (let ((which-key-inhibit t))
    (windmove-left)
    (pdf-view-first-page)
    (my/previous-window)))

(defun my/pdf-goto-end ()
  (interactive)
  (let ((which-key-inhibit t))
    (windmove-left)
    (pdf-view-last-page)
    (my/previous-window)))

(defun my/pdf-shrink ()
  (interactive)
  (let ((which-key-inhibit t))
    (windmove-left)
    (pdf-view-shrink 1.25)
    (my/previous-window)))

(defun my/pdf-enlarge ()
  (interactive)
  (let ((which-key-inhibit t))
    (windmove-left)
    (pdf-view-enlarge 1.25)
    (my/previous-window)))

(defun my/down-pdf-window ()
  (interactive)
  (let ((which-key-inhibit t))
    (windmove-left)
    (pdf-view-scroll-up-or-next-page)
    (other-window -1)))

(defun my/up-pdf-window ()
  (interactive)
  (let ((which-key-inhibit t))
    (windmove-left)
    (pdf-view-scroll-down-or-previous-page)
    (other-window -1)))

(defun my/pdf-next-page-other-window ()
  (interactive)
  (let ((which-key-inhibit t))
    (windmove-left)
    (pdf-view-next-page)
    (other-window -1)))

(defun my/pdf-prev-page-other-window ()
  (interactive)
  (let ((which-key-inhibit t))
    (windmove-left)
    (pdf-view-previous-page)
    (other-window -1)))


(defun abbrev-edit-save-close ()
  (interactive)
  (abbrev-edit-save-buffer)
  (kill-this-buffer))


(defun my/sh-mode-hooks ()
  (interactive)
  (line-numbers)
  (subword-mode 1)
  (company-mode 1)
  (smartparens-mode 1)
  (tab-jump-out-mode 1)
  (flycheck-mode 1)
  (electric-pair-local-mode 1)
  (yas-minor-mode 1)
  (highlight-indent-guides-mode 1)
  (aggressive-indent-mode 1)
  (beacon-mode 1)
  (message " my sh-mode on"))


(defun my/quiet-shr-next-link ()
  (interactive)
  (let ((inhibit-message t)) (shr-next-link)))

(defun my/quiet-shr-prev-link ()
  (interactive)
  (let ((inhibit-message t)) (shr-previous-link)))


(defun zin/org-open-other-frame ()
  "Jump to bookmark in another frame. See `bookmark-jump' for more."
  (interactive)
  (let ((org-link-frame-setup (acons 'file 'find-file-other-frame org-link-frame-setup)))
    (org-open-at-point)))

(defun zin/org-open-other-window ()
  (interactive)
  (let ((org-link-frame-setup (acons 'file 'find-file-other-window org-link-frame-setup)))
    (org-open-at-point)))



(defun org-open-quiet ()
  (interactive)
  (let ((inhibit-message t)) (org-open-at-point)))


(defun org-hide-other ()
  (interactive)
  (point-to-register 'z)
  (org-shifttab)
  (jump-to-register 'z)
  (org-cycle)
  (outline-show-subtree)
  (message ""))

(defun my/org-agenda ()
  (interactive)
  (org-agenda t "a"))

(defun org-1-day-agenda ()
  (interactive)
  (let ((current-prefix-arg 1))
    (org-agenda t "a")))

(defun org-2-days-agenda ()
  (interactive)
  (let ((current-prefix-arg 2))
    (org-agenda t "a")))

(defun org-3-days-agenda ()
  (interactive)
  (let ((current-prefix-arg 3))
    (org-agenda t "a")))

(defun org-4-days-agenda ()
  (interactive)
  (let ((current-prefix-arg 4))
    (org-agenda t "a")))

(defun org-5-days-agenda ()
  (interactive)
  (let ((current-prefix-arg 5))
    (org-agenda t "a")))

(defun org-6-days-agenda ()
  (interactive)
  (let ((current-prefix-arg 6))
    (org-agenda t "a")))

(defun org-7-days-agenda ()
  (interactive)
  (let ((current-prefix-arg 7))
    (org-agenda t "a")))

(defun my/agenda-enter ()
  (interactive)
  (let ((current-prefix-arg 4))
    (org-agenda-switch-to)))

(defun org-hide-emphasis ()
  (interactive)
  (save-excursion
    (setq org-hide-emphasis-markers t)
    (let ((inhibit-message t))
      (org-mode-restart)
      (org-cycle))))

(defun org-show-emphasis ()
  (interactive)
  (save-excursion
    (setq org-hide-emphasis-markers nil)
    (let ((inhibit-message t))
      (org-mode-restart)
      (org-cycle))))

;; (eval-after-load 'org
;;   '(progn
;;      (defun wicked/org-clock-in-if-starting ()
;;        "Clock in when the task is marked STARTED."
;;        (when (and (string= state "STARTED")
;; 		  (not (string= last-state state)))
;; 	 (org-clock-in)))
;;      (add-hook 'org-after-todo-state-change-hook
;; 	       'wicked/org-clock-in-if-starting)
;;      (defadvice org-clock-in (after wicked activate)
;;        "Set this task's status to 'STARTED'."
;;        (org-todo "STARTED"))))

(defun afs/org-remove-link ()
  "Replace an org link by its description or if empty its address"
  (interactive)
  (if (org-in-regexp org-bracket-link-regexp 1)
      (save-excursion
        (let ((remove (list (match-beginning 0) (match-end 0)))
              (description (if (match-end 3)
                               (org-match-string-no-properties 3)
                             (org-match-string-no-properties 1))))
          (apply 'delete-region remove)
          (insert description)))))

(defun org-clock-history ()
  "Show Clock History"
  (interactive)
  (let ((current-prefix-arg '(4))) (call-interactively 'org-clock-in)))

;;; i3wm-emacs.el --- i3wm emacs mode

;; Copyright (C) 2014 Steven Knight

;; Author: Steven Knight <steven@knight.cx>
;; URL: https://github.com/skk/i3wm-emacs

(define-derived-mode i3wm-emacs sh-mode
  "i3wm-emacs" "Major mode for editing configuration files for i3 (http://i3wm.org/)."

  (defvar i3-config-keywords
    '("set" "exec" "exec_alwyas" "bindsym" "bindcode" "font"
      "floating_modifier" "floating_minimum_size" "floating_maximum_size"
      "default_orientation" "workspace_layout" "new_window" "hide_edge_borders"
      "for_window" "assign" "workspace" "colorclass" "ipc-socket" "focus_follows_mouse"
      "popup_during_fullscreen" "force_focus_wrapping" "force_xinerama" "workspace_auto_back_and_forth")
    "i3 Config keywords")

  (defvar i3-config-types
    '()
    "i3 Config types.")

  (defvar i3-config-constants
    '()
    "i3 Config constants.")

  (defvar i3-config-events
    '()
    "i3 Config events.")

  (defvar i3-config-functions
    '()
    "i3 Config functions.")

  (defvar i3-config-keywords-regexp (regexp-opt i3-config-keywords 'words))
  (defvar i3-config-type-regexp (regexp-opt i3-config-types 'words))
  (defvar i3-config-constant-regexp (regexp-opt i3-config-constants 'words))
  (defvar i3-config-event-regexp (regexp-opt i3-config-events 'words))
  (defvar i3-config-functions-regexp (regexp-opt i3-config-functions 'words))

  (setq i3-config-font-lock-keywords
        `(
          (,i3-config-type-regexp . font-lock-type-face)
          (,i3-config-constant-regexp . font-lock-constant-face)
          (,i3-config-event-regexp . font-lock-builtin-face)
          (,i3-config-functions-regexp . font-lock-function-name-face)
          (,i3-config-keywords-regexp . font-lock-keyword-face)
          ;; note: order above matters.
          ))

  ;; code for syntax highlighting
  (setq font-lock-defaults '((i3-config-font-lock-keywords)))

  ;; clear memory
  (setq i3-config-keywords nil)
  (setq i3-config-types nil)
  (setq i3-config-constants nil)
  (setq i3-config-events nil)
  (setq i3-config-functions nil))

(provide 'i3wm-emacs)

(add-to-list 'auto-mode-alist '("\\i3/config\\'" . i3wm-emacs))

(add-hook 'i3wm-emacs-hook 'line-numbers)
(add-hook 'i3wm-emacs-hook 'my/prog-mode-hooks)
;;; i3wm-emacs.el ends here

;;; tmuxconf-emacs.el --- tmux emacs mode

;; Copyright (C) 2014 Steven Knight

;; Author: Steven Knight <steven@knight.cx>
;; URL: https://github.com/skk/i3wm-emacs

(define-derived-mode tmuxconf-emacs text-mode
  "tmuxconf-emacs" "Major mode for editing configuration files for i3 (http://i3wm.org/)."

  (defvar tmux-config-keywords
    '("set" "setw" "set-window-option" "set-clipboard" "set-titles" "set-titles-string" "bind-key" "bind" "unbind")
    "tmux Config keywords")

  (defvar tmux-config-types
    '()
    "tmux Config types.")

  (defvar tmux-config-constants
    '()
    "tmux Config constants.")

  (defvar tmux-config-events
    '("-g" "-n" "@plugin")
    "tmux Config events.")

  (defvar tmux-config-functions
    '()
    "tmux Config functions.")

  (defvar tmux-config-keywords-regexp (regexp-opt tmux-config-keywords 'words))
  (defvar tmux-config-type-regexp (regexp-opt tmux-config-types 'words))
  (defvar tmux-config-constant-regexp (regexp-opt tmux-config-constants 'words))
  (defvar tmux-config-event-regexp (regexp-opt tmux-config-events 'words))
  (defvar tmux-config-functions-regexp (regexp-opt tmux-config-functions 'words))

  (setq tmux-config-font-lock-keywords
        `(
          (,tmux-config-type-regexp . font-lock-type-face)
          (,tmux-config-constant-regexp . font-lock-constant-face)
          (,tmux-config-event-regexp . font-lock-builtin-face)
          (,tmux-config-functions-regexp . font-lock-function-name-face)
          (,tmux-config-keywords-regexp . font-lock-keyword-face)
          ;; note: order above matters.
          ))

  ;; code for syntax highlighting
  (setq font-lock-defaults '((tmux-config-font-lock-keywords)))

  ;; clear memory
  (setq tmux-config-keywords nil)
  (setq tmux-config-types nil)
  (setq tmux-config-constants nil)
  (setq tmux-config-events nil)
  (setq tmux-config-functions nil))

(provide 'tmuxconf-emacs)

(add-to-list 'auto-mode-alist '("\\.*tmux.*\\'" . tmuxconf-emacs))

;;; tmuxconf-emacs.el ends here

(defun xah-clean-whitespace ()
  "Delete trailing whitespace, and replace repeated blank lines to just 1.
Only space and tab is considered whitespace here.
Works on whole buffer or text selection, respects `narrow-to-region'.

URL `http://ergoemacs.org/emacs/elisp_compact_empty_lines.html'
Version 2017-09-22"
  (interactive)
  (let ($begin $end)
    (if (region-active-p)
        (setq $begin (region-beginning) $end (region-end))
      (setq $begin (point-min) $end (point-max)))
    (save-excursion
      (save-restriction
        (narrow-to-region $begin $end)
        (progn
          (goto-char (point-min))
          (while (re-search-forward "[ \t]+\n" nil "move")
            (replace-match "\n")))
        (progn
          (goto-char (point-min))
          (while (re-search-forward "\n\n\n+" nil "move")
            (replace-match "\n\n")))
        (progn
          (goto-char (point-max))
          (while (equal (char-before) 32) ; char 32 is space
            (delete-char -1))))
      (message "white space cleaned"))))

;; (add-hook 'before-save-hook 'xah-clean-whitespace)

(defun xah-clean-empty-lines ()
  "Replace repeated blank lines to just 1.
Works on whole buffer or text selection, respects `narrow-to-region'.

URL `http://ergoemacs.org/emacs/elisp_compact_empty_lines.html'
Version 2017-09-22"
  (interactive)
  (let ($begin $end)
    (if (region-active-p)
        (setq $begin (region-beginning) $end (region-end))
      (setq $begin (point-min) $end (point-max)))
    (save-excursion
      (save-restriction
        (narrow-to-region $begin $end)
        (progn
          (goto-char (point-min))
          (while (re-search-forward "\n\n\n+" nil "move")
            (replace-match "\n\n")))))))


(defun xah-next-user-buffer ()
  "Switch to the next user buffer.
“user buffer” is determined by `xah-user-buffer-q'.
URL `http://ergoemacs.org/emacs/elisp_next_prev_user_buffer.html'
Version 2016-06-19"
  (interactive)
  (next-buffer)
  (let ((i 0))
    (while (< i 20)
      (if (not (xah-user-buffer-q))
          (progn (next-buffer)
                 (setq i (1+ i)))
        (progn (setq i 100))))))

(defun xah-previous-user-buffer ()
  "Switch to the previous user buffer.
“user buffer” is determined by `xah-user-buffer-q'.
URL `http://ergoemacs.org/emacs/elisp_next_prev_user_buffer.html'
Version 2016-06-19"
  (interactive)
  (previous-buffer)
  (let ((i 0))
    (while (< i 20)
      (if (not (xah-user-buffer-q))
          (progn (previous-buffer)
                 (setq i (1+ i)))
        (progn (setq i 100))))))

(defun xah-next-emacs-buffer ()
  "Switch to the next emacs buffer.
“emacs buffer” here is buffer whose name starts with *.
URL `http://ergoemacs.org/emacs/elisp_next_prev_user_buffer.html'
Version 2016-06-19"
  (interactive)
  (next-buffer)
  (let ((i 0))
    (while (and (not (string-equal "*" (substring (buffer-name) 0 1))) (< i 20))
      (setq i (1+ i)) (next-buffer))))

(defun xah-previous-emacs-buffer ()
  "Switch to the previous emacs buffer.
“emacs buffer” here is buffer whose name starts with *.
URL `http://ergoemacs.org/emacs/elisp_next_prev_user_buffer.html'
Version 2016-06-19"
  (interactive)
  (previous-buffer)
  (let ((i 0))
    (while (and (not (string-equal "*" (substring (buffer-name) 0 1))) (< i 20))
      (setq i (1+ i)) (previous-buffer))))

(defun xah-user-buffer-q ()
  "Return t if current buffer is a user buffer, else nil.
Typically, if buffer name starts with *, it's not considered a user buffer.
This function is used by buffer switching command and close buffer command, so that next buffer shown is a user buffer.
You can override this function to get your idea of “user buffer”.
version 2016-06-18"
  (interactive)
  (if (string-equal "*" (substring (buffer-name) 0 1))
      nil
    (if (string-equal major-mode "dired-mode")
        nil
      t)))

(define-generic-mode 'xmodmap-mode
  '(?!)
  '("add" "clear" "keycode" "keysym" "pointer" "remove")
  nil
  '("[xX]modmap.*\\(rc\\)?\\'")
  nil
  "Simple mode for xmodmap files.")


(setq display-time-default-load-average nil)
(setq display-time-format "%H:%M")

(require 'time)

(defvar title-time-mode t
  "This is set to t iff we are displaying the current time in the title bar.")

(defun title-time-set ()
  "Set `frame-title-format' to the local system name followed by date,
time, and load information (as per `display-time-string-forms') and perhaps
followed by an appointment notification."
  (setq frame-title-format '(" " display-time-string)))

(defun title-time-update ()
  "Update the time display in the title-bar.
Skips inferior frames, that is, those without a minibuffer (eg. speedbar). "
  (interactive)
  ;; remove time display from the mode line
  (delq 'display-time-string global-mode-string)
  (delq 'appt-mode-string global-mode-string)
  (let ((start-frame (selected-frame)))
    (save-excursion
      (save-window-excursion
        (let ((my/frame-list (frame-list))
              (my/frame nil))
          (while (setq my/frame (car my/frame-list))
            (when (frame-parameter my/frame 'minibuffer)
              '(select-frame my/frame)
              (title-time-set))
            (setq my/frame-list (cdr my/frame-list))))))
    (select-frame start-frame)))

(add-hook 'display-time-hook #'title-time-update)

(display-time-mode 1)

(provide 'title-time)
(require 'title-time)

;;; title-time.el ends here


(define-derived-mode mv fundamental-mode

  (defun mv-hooks ()
    (setq display-line-numbers nil)
    (abbrev-mode -1)
    (vlf-mode 1))

  (add-hook 'mv-hook 'mv-hooks)

  (provide 'mv))

(general-define-key
 :keymaps 'mv-map
 "M-p" 'my/paragraph-backwards
 "M-n" 'my/paragraph-forward
 "<prior>" 'down-five
 "<next>" 'up-five)

(general-unbind 'mv-map
  :with 'ignore
  [remap my/quiet-save-buffer])


(defvar opened-org-agenda-files nil)

(defun opened-org-agenda-files ()
  (let ((files (org-agenda-files)))
    (setq opened-org-agenda-files nil)
    (mapcar
     (lambda (x)
       (when (get-file-buffer x)
	 (push x opened-org-agenda-files)))
     files)))

(defun kill-org-agenda-files ()
  (interactive)
  (let ((files (org-agenda-files)))
    (mapcar
     (lambda (x)
       (when
	   (and
	    (get-file-buffer x)
	    (not (member x opened-org-agenda-files)))
	 (kill-buffer (get-file-buffer x))))
     files)))

(defadvice org-agenda-list (around opened-org-agenda-list-around activate)
  (opened-org-agenda-files)
  ad-do-it
  (kill-org-agenda-files))

(defadvice org-search-view (around org-search-view-around activate)
  (opened-org-agenda-files)
  ad-do-it
  (kill-org-agenda-files))

(defadvice org-tags-view (around org-tags-view-around activate)
  (opened-org-agenda-files)
  ad-do-it
  (kill-org-agenda-files))

(defun my/quiet-save-buffer () (interactive)
       (save-excursion
	 (evil-ex-nohighlight)
	 (let ((inhibit-message t))
	   (delete-trailing-whitespace)
	   (save-buffer))))

(defun my/quiet-save-buffer-markdown () (interactive)
       (save-excursion
	 (evil-ex-nohighlight)
	 (let ((inhibit-message t))
	   (save-buffer))))

;; (defun my/quiet-save-python () (interactive)
;;        (evil-ex-nohighlight)
;;        (let ((inhibit-message t))
;; 	 (progn
;; 	   (elpy-autopep8-fix-code)
;; 	   (elpy-black-fix-code)
;; 	   (save-buffer))))


(defun my/date ()
  (interactive)
  (save-excursion
    (shell-command "date")))

(defun word-count-analysis (start end)
  "Count how many times each word is used in the region.
    Punctuation is ignored."
  (interactive "r")
  (let (words)
    (save-excursion
      (goto-char start)
      (while (re-search-forward "\\w+" end t)
        (let* ((word (intern (match-string 0)))
               (cell (assq word words)))
          (if cell
              (setcdr cell (1+ (cdr cell)))
            (setq words (cons (cons word 1) words))))))
    (when (interactive-p)
      (message "%S" words))
    words))

(defun show-major-mode ()
  (interactive)
  (describe-variable 'major-mode))


(defun show-server ()
  (interactive)
  (describe-variable 'server-name))


(defun show-fill-column ()
  (interactive)
  (describe-variable 'fill-column))

(defun delete-file-and-buffer ()
  (interactive)
  (let ((filename (buffer-file-name)))
    (when filename
   (if (vc-backend filename)
          (vc-delete-file filename)
        (progn
          (delete-file filename)
          (message "Deleted file %s" filename)
          (kill-buffer))))))


(defun my/move-file-to-trash ()
  (interactive)
  (move-file-to-trash (buffer-name))
  (kill-buffer)
  (delete-window))

(defun my/move-file-to-trash-close-ws ()
  (interactive)
  (move-file-to-trash (buffer-name))
  (kill-buffer)
  (eyebrowse-close-window-config))


(defun enable-cursor ()
  (interactive)
  (setq cursor-type t))

(defun disable-cursor ()
  (interactive)
  (setq cursor-type nil))

(defun noctilux-on ()
  (interactive)
  (my/disable-current-theme)
  (load-theme 'noctilux))

(defun poet-dark-on ()
  (interactive)
  (my/disable-current-theme)
  (load-theme 'poet-dark))

(defun poet-dark-monochrome-on ()
  (interactive)
  (my/disable-current-theme)
  (load-theme 'poet-dark-monochrome))

(defun my/new-theme ()
  (interactive)
  (my/disable-current-theme)
  (counsel-load-theme))


(defun my/fountain-export ()
(interactive)
(fountain-export-shell-command)
(quit-windows-on "*Fountain Export Process*"))

(defun eval-src-block ()
  (interactive)
  (org-edit-special nil)
  (eval-buffer)
  (org-edit-src-exit))

(defun my/eval-buffer ()
  (interactive)
  (my/quiet-save-buffer)
  (eval-buffer)
  (message "buffer evaluated"))

(defun i3-hide-all ()
  (interactive)
  (let ((inhibit-message t))
    (shell-command "~/scripts/i3_scripts/hide/hide_all")))

(defun my/ranger ()
  (interactive)
  (my/copy-dir)
  (start-process-shell-command "my/show-ranger" nil "~/scripts/emacs_scripts/show-ranger"))

(defun my/terminal ()
  (interactive)
  (my/copy-dir)
  (start-process-shell-command "my/show-ranger" nil "~/scripts/emacs_scripts/show-term"))
(defhydra hydra-spell (:color blue :hint nil)
  "
  ^
       ^Spell^            ^Modes^
       ----------------------------------
       _p_: correct prev      _m_: flyspell
       _n_: correct next      _l_: langtool
       _g_: goto next         _b_: pt dict
       _w_: correct word      _a_: en dict
       _b_: check buffer      _o_: company pt
       _c_: before point      _k_: company en
       _y_: yspell            _r_: prose on
"
  ("<escape>" nil)
  ("RET" hydra-python-mode/body)

  ("p" flyspell-correct-previous :color pink)
  ("n" flyspell-correct-next :color pink)
  ("g" flyspell-goto-next-error :color pink)
  ("w" flyspell-correct-word)
  ("b" flyspell-buffer)
  ("c" flyspell-correct-word-before-point)
  ("m" flyspell-mode)
  ("l" hydra-langtool/body)
  ("b" brasileiro)
  ("a" american)
  ("o" my/company-ispell-pt)
  ("k" my/company-ispell-en)
  ("r" prose-enable)
  ("R" prose-disable)
  ("y" flyspell-correct-word-generic)
  ("f" ranger-find-pcc-dir))

(defhydra hydra-kill (:color blue :hint nil :exit nil :foreign-keys nil)
  "
  ^
       ^Buffer^         ^Window^
       --------------------------
       _h_: this        _q_: quit
       _j_: +window     _d_: delete
       _k_: +workspace
       _l_: all
       _o_: other
"

  ("<escape>" nil)
  ;; ("C-S-k" kill-this-buffer)

  ("h" kill-this-buffer)
  ("K" kill-this-buffer)
  ("j" kill-buffer-and-window)
  ("k" my/kill-buffer-and-workspace)
  ("l" kill-all-buffers)
  ("o" kill-other-buffers)

  ("q" quit-window)
  ("d" delete-window))

(defhydra hydra-shell (:color blue :hint nil :exit nil :foreign-keys nil)
  "
  ^
       ^Shells^
       ----------------------
       _s_: small     _p_: python shell
       _j_: bellow    _a_: python async
       _h_: far left
       _l_: far right
       _k_: far top
"

  ("<escape>" nil)
  (";" kill-buffer-and-window)
  ("s" my/shell-botright)
  ("j" my/shell-bellow)
  ("h" my/shell-far-left)
  ("l" my/shell-far-right)
  ("k" my/shell-very-top)
  ("p" my/python-botright)
  ("a" my/execute-python-program-shell))

(defhydra hydra-vertigo (:color blue :hint nil)
  "
  ^
       ^Vertigo^
       ---------------------
       _,_: ↑
       _._: ↓

       a s d f g h j k l o
       1 2 3 4 5 6 7 8 9 0
"
  ("<escape>" nil)
  ("." vertigo-visible-jump-down)
  ("," vertigo-visible-jump-up))

(defhydra my/indent-tools-hydra (:color red :hint nil)
  "
 ^Indent^         | ^Navigation^        | ^Actions^
------------------+---------------------+-----------
 _._ indent       | _j_ v               | _K_ kill
 _,_ de-indent    | _k_ ʌ               | _i_ imenu
 _l_ end of level | _n_ next sibling    | _C_ Copy…
 _E_ end of fn    | _p_ previous sibling| _c_ comment
 _P_ paragraph    | _u_ up parent       | _U_ uncomment (paragraph)
 _SPC_ space      | _d_ down child      | _f_ fold
 ___ undo         | _e_ end of tree     | _q_ quit
"

  ("." indent-tools-indent)
  ("," indent-tools-demote)
  ("E" indent-tools-indent-end-of-defun)
  ("c" indent-tools-comment)
  ("U" indent-tools-uncomment)
  ("P" indent-tools-indent-paragraph)
  ("l" indent-tools-indent-end-of-level)
  ("K" indent-tools-kill-tree)
  ("C" indent-tools-copy-hydra/body :color blue)
  ("s" indent-tools-select)
  ("e" indent-tools-goto-end-of-tree)
  ("u" indent-tools-goto-parent)
  ("d" indent-tools-goto-child)
  ("S" indent-tools-select-end-of-tree)
  ("n" indent-tools-goto-next-sibling)
  ("p" indent-tools-goto-previous-sibling)
  ("i" helm-imenu)
  ("j" forward-line)
  ("k" previous-line)
  ("SPC" indent-tools-indent-space)
  ("_" undo-tree-undo)
  ("L" recenter-top-bottom)
  ("f" yafolding-toggle-element)
  ("q" nil))

(defhydra hydra-company (:color blue :hint nil :foreign-keys run)
  "
  ^
       ^Company^
       --------------------------------------------------------
       _a_: idle 0 prefix 1  _d_: idle 1 prefix 2  _g_: show option
       _b_: idle 0 prefix 2  _e_: idle 2 prefix 1  _h_: show delay
       _c_: idle 1 prefix 1  _f_: idle 2 prefix 2  _i_: show prefix
"
  ("<escape>" nil)
  ("RET" nil)

  ("a" my/company-idle-zero-prefix-one)
  ("b" my/company-idle-zero-prefix-two)

  ("c" my/company-idle-one-prefix-one)
  ("d" my/company-idle-one-prefix-two)

  ("e" my/company-idle-two-prefix-one)
  ("f" my/company-idle-two-prefix-two)

  ("g" my/company-show-options)
  ("h" my/company-show-delay)
  ("i" my/company-show-prefix-length))


(defhydra hydra-python-mode (:color blue :hint nil :foreign-keys run)
  "
  ^
       ^Python^
       -------------------------------
       _a_: run             _e_: input()
       _b_: run sh          _f_: company
       _c_: run sh simple   _q_: quickrun
       _d_: str()           _s_: quick shell
"
  ("<escape>" nil)
  ("RET" hydra-prog-mode/body)

  ("a" execute-python-program)
  ("b" my/execute-python-program-shell)
  ("c" my/execute-python-program-shell-simple)

  ("d" my/python-make-string)
  ("e" my/python-make-input)
  ("f" hydra-company/body)
  ("q" quickrun)
  ("s" quickrun-shell))

(defhydra hydra-prog-mode (:color blue :hint nil :foreign-keys run)
  "
  ^
       ^Flycheck^   ^Other^
       -----------------------------------------------
       _p_: prev    _j_: jump more    _x_: execute c shell
       _n_: next    _o_: prog mods
       _f_: first   _g_: jump go
       _m_: mode    _n_: progs on
       _b_: buffer  _q_: quick
       _s_: show    _h_: quick shell
       _l_: list    _e_: execute c

"
  ("<escape>" nil)
  ("RET" nil)
  ("m" flycheck-mode)
  ("b" flycheck-buffer)
  ("l" list-flycheck-errors)
  ("n" flycheck-next-error :exit nil)
  ("f" flycheck-first-error :exit nil)
  ("s" flycheck-display-error-at-point)
  ("p" flycheck-previous-error :exit nil)

  ("o" hydra-prog-modes/body)
  ("g" dumb-jump-go)
  ("j" hydra-dumb-jump/body)
  ("n" my/prog-mode-hooks)
  ("q" quickrun)
  ("h" quickrun-shell)
  ("e" my/execute-c-program)
  ("x" my/execute-c-program-shell))

(defhydra hydra-prog-mode (:color blue :hint nil :foreign-keys run)
  "
  ^
       ^Flycheck^
       -----------------------------------------------

"
  ("<escape>" nil)
  ("RET" nil)

  ("g" dumb-jump-go)
  ("j" hydra-dumb-jump/body)
  ("q" quickrun)
  ("h" quickrun-shell)

)

(defhydra hydra-dumb-jump (:color blue :hint nil :foreign-keys run)
  "
  ^
       ^Dumb Jump^
       -----------
       _j_: jump
       _b_: back
       _o_: other
       _p_: prompt
       _q_: quick
"
("<escape>" nil)

("j" dumb-jump-go)
("b" dumb-jump-back)
("o" dumb-jump-go-other-window)
("p" dumb-jump-go-prompt)
("q" dumb-jump-quick-look))



(defhydra hydra-prog-modes (:color blue :hint nil :foreign-keys run)
  "
  ^
     ^Prog Modes^
     -----------
     _h_: guides
     _c_: company
     _s_: smparens
     _t_: tab jump
     _e_: operator
     _r_: rainbow
     _e_: my prog on
     _d_: my prog off
"
("<escape>" nil)
("<C-return>" nil)
("RET" nil)

("m" flycheck-mode)
("c" company-mode)
("s" smartparens-mode)
("t" tab-jump-out-mode)
("h" highlight-indent-guides-mode)
("e" electric-operator-mode)
("r" rainbow-delimiters-mode)
("e" my/prog-mode-on)
("d" my/prog-mode-off))

(defhydra hydra-magit (:color blue :hint nil)
  "
  ^
       ^Magit^
       ---------------
       _s_: stage
       _c_: commit
       _a_: status
       _p_: dispatch
"
  ("q" nil)
  ("<escape>" nil)

  ("s" magit-stage-modified)
  ("c" my/magit-commit)
  ("a" magit-status)
  ("p" magit-dispatch-popup))

(defhydra hydra-yasnippet (:color blue :hint nil :exit nil :foreign-keys nil)
"
       ^
       ^YASnippet^
       --------------------
       _i_ insert  _r_eload
       _m_ mode    _l_oad
       _n_ new
       _y_ ivy
       _v_ visit
       _f_ finish
"
("M-;" nil)
("r" yas-reload-all)
("i" yas-insert-snippet)
("y" ivy-yasnippet)
("m" yas-minor-mode)
("f" yas-load-snippet-buffer-and-close)
("l" yas-load-snippet-buffer)
("v" yas-visit-snippet-file)
("n" yas-new-snippet))

(defhydra hydra-narrow (:color blue :hint nil :exit nil :foreign-keys nil)
  "
  ^
       ^Recursive^      ^Regular^
       ------------------------------
       _n_: maybe       _o_: org subtree
       _w_: widen       _e_: widen
       _r_: to region   _f_: to defun
       _d_: to defun    _i_: to region
         "

("<escape>" nil)
("<C-;>" nil)

("n" recursive-narrow-or-widen-dwim)
("d" recursive-narrow-to-defun)
("r" recursive-narrow-to-region)
("w" recursive-widen)

("o" org-narrow-to-subtree)
("e" widenToCenter)
("f" narrow-to-defun)
("i" narrow-to-region))

(defhydra hydra-window (:color blue :hint nil :exit nil :foreign-keys nil)
  "

      ^Move^      ^Resize^      ^Layouts
      ------------------------------------
      _K_: up     _h_: width+   _1_: save 1
      _J_: down   _l_: width-   _q_: load 1
      _H_: left   _k_: height   _2_: save 2
      _L_: right  _j_: height   _w_: load 2
      ^^          _b_: balance  _z_: zoom
      ^^          _r_: botright _x_: zoom-mode
  "
  ("<escape>" nil)
  ("RET" nil)

  ("K" buf-move-up)
  ("H" buf-move-left)
  ("J" buf-move-down)
  ("L" buf-move-right)

  ("h" my/evil-inc-width :exit nil)
  ("l" my/evil-dec-width :exit nil)
  ("j" my/evil-dec-height :exit nil)
  ("k" my/evil-inc-height :exit nil)

  ("1" my/window-to-register-91)
  ("q" my/jump-to-register-91)
  ("2" my/window-to-register-eight)
  ("w" my/jump-to-register-eight)
  ("b" balance-windows :exit t)
  ("z" zoom)
  ("x" zoom-mode)
  ("r" my/evil-botright))

(defhydra hydra-tangle (:color blue :hint nil :exit nil :foreign-keys nil)
  "

       ^Tangle^
       --------------
       _a_: all
       _b_: all & res
       _c_: default
       _d_: debug
       _e_: recompile
       _f_: restart
"
  ("a" tangle-py-all)
  ("b" tangle-py-all-and-restart)
  ("c" my/tangle-default)
  ("d" tangle-py-all-debug)
  ("e" tangle-py-all-recompile)
  ("f" restart-emacs))


(defhydra hydra-modes (:color blue :hint nil :exit nil :foreign-keys nil)
  "
       ^
       ^Modes^
       ---------------------------------------------------------------------------
       _a_: org      _e_: hl-line nu  _i_: which key      _o_: ivy on        _s_: line nonu
       _b_: text     _f_: menu bar    _j_: line nu        _p_: ivy off
       _c_: company  _g_: olivetti    _l_: tab jump       _q_: elec operator
       _d_: line nu  _h_: markdown    _m_: center cursor  _r_: wourd count

       "

  ("<escape>" nil)

  ("a" org-mode)
  ("b" text-mode)
  ("c" company-mode)
  ("d" line-numbers)

  ("e" hl-line-mode)
  ("f" menu-bar-mode)
  ("g" olivetti-mode)
  ("h" markdown-mode)

  ("i" which-key-mode)
  ("j" line-numbers)
  ("l" tab-jump-out-mode)
  ("m" centered-cursor-mode)

  ("o" my/enable-ivy-counsel)
  ("p" my/disable-ivy-counsel)
  ("q" electric-operator-mode)
  ("r" wc-mode)
  ("s" line-no-numbers)

)

(defhydra hydra-commands (:color blue :hint nil :exit nil :foreign-keys nil)
  "
  ^
       ^Commands^
       -------------------------------------------------------
_a_: tangle
_b_: more commands
_c_: dup line
_d_: eval line
_e_: show date
_f_: reload keys
_g_: sort by length
_h_: check parens
_i_: eval region
_j_: eval block
_l_: word count
_m_: copy path
_n_: copy dir
_o_: reload i3
  "

  ("<escape>" nil)

  ("e" eval-line)
  ("r" eval-region)
  ("s" tangle-and-eval-block)
  ("b" eval-buffer)
  ("3" i3-reload)

  ("i" my/date)
  ("w" wc-count)
  ("l" sort-lines-by-length)
  ("p" check-parens)
  ("d" duplicate-line)

  ("a" hydra-tangle/body)
  ("c" hydra-more-commands/body)
  ("k" my/tangle-reload-keys)
  ("," prelude-copy-file-name-to-clipboard)
  ("." my/copy-dir)

)

(defhydra hydra-more-commands (:color blue :hint nil :exit nil :foreign-keys nil)
  "
  ^
       ^More Commands^
       -------------------
       _a_: ivy resume
       _b_: def abbrev
       _c_: sort lines
       _d_: del dup lines

  "
  ("<escape>" nil)

  ("a" ivy-resume)
  ("b" define-global-abbrev)
  ("c" sort-lines)
  ("d" delete-duplicate-lines))

(defhydra hydra-quick-commands (:color blue :hint nil :exit nil :foreign-keys nil)
  "
  ^
       ^Quick Commands^
       --------------------------------------------------
       _l_: load theme    _r_: refresh packs  _m_: abbrev mode
       _u_: unload theme  _o_: org brain      _g_: goto spotify
       _i_: install pack  _a_: disable pack   _f_: define abbrev
       _d_: delete pack   _s_: enable pack    _t_: list packages
       _e_: describe pack _b_: eddit abbrevs
  "
("<escape>" nil)

("i" package-install)
("d" package-delete)
("e" describe-package)
("r" package-refresh-contents)

("l" load-theme)
("u" disable-theme)
("o" org-brain-visualize)

("a" disable-package)
("s" enable-package)


("b" edit-abbrevs)
("m" abbrev-mode)

("g" goto-spotify)
("f" define-global-abbrev)
("t" (package-list-packages)))

(defhydra hydra-text-main (:color blue :hint nil :exit nil :foreign-keys nil)
  "
  ^
       ^Commands^                        ^Modes^
       ---------------------------------------------------------
       _d_: delete blank lines           _f_: auto fill
       _e_: clean empty lines            _l_: auto capitalize
       _i_: duplicate inner paragraph    _t_: toggle truncate lines
       _z_: capitalize word or region    _h_: highlight sentences
       _d_: delete blank lines           _,_: org text hydra
       _c_: copy do chrome               _._: prose hydra
       _w_: copy to messenger            _p_: PDF
       ^^
"

  ("<escape>" nil)
  ("C-;" hydra-text-commands/body)
  (";" hydra-text-commands/body)
  ("<menu>" hydra-text-commands/body)

  ("d" delete-blank-lines)
  ("z" fix-word-capitalize)
  ("e" xah-clean-empty-lines)
  ("i" duplicate-inner-paragraph)

  ("c" copy-to-chrome)
  ("w" copy-to-messenger)
  ("t" toggle-truncate-lines)

  ("f" auto-fill-mode)
  ("s" show-fill-column)
  ("h" hl-sentence-mode)
  ("." hydra-prose/body)
  ("C-." hydra-prose/body)
  ("l" auto-capitalize-mode)
  ("," hydra-org-text-commands/body)
  ("C-," hydra-org-text-commands/body)
  ("p" hydra-pdf-view/body))

(defhydra hydra-text-commands (:color blue :hint nil)
  "
 ^
       ^More Text^
       ---------------------------------------------
       _s_: create new setq       _j_: move line
       _f_: create new hydra key  _k_: copy line
       _h_: create new hook       _o_: move region
       _p_: insert paragraph      _i_: copy region
       _m_: mark whole buffer     _d_: dup line and comment
       _c_: copy whole buffer     _v_: visible markup
       _e_: erase whole buffer    _=_: txt scale
       ^^                         _0_: txt scale reset

  "
  ("<escape>" nil)
  ("C-;" nil)
  (";" nil)
  ("<menu>" nil)

  ("s" create-setq)
  ("f" format-hydra-binding)
  ("h" add-hook-macro)
  ("p" Lorem-ipsum-insert-paragraphs)
  ("m" mark-whole-buffer)
  ("c" copy-whole-buffer)
  ("e" erase-buffer)
  ("j" avy-move-line)
  ("k" avy-copy-line)
  ("o" avy-move-region)
  ("i" avy-copy-region)
  ("d" my/comment-dupplicate-line)
  ("v" visible-mode)
  ("=" text-scale-adjust)
  ("0" text-scale-reset))


(defhydra hydra-org-text-commands (:color blue :hint nil :exit nil :foreign-keys nil)
  "
 ^
       ^Org Bold^         ^Org Code^         ^Org Emphasis^
       -------------------------------------------------------------------------------
       _br_: bold region  _cr_: code region  _er_: emphasis region   _lr_: remove link
       _bw_: bold word    _cw_: code word    _ew_: emphasis word     _li_: link for url
       _bd_: bold delete  _cd_: code delete  _ed_: emphasis delete

  "
  ("q" nil)
  ("<escape>" nil)

  ("br" org-bold)
  ("bw" org-bold-word)
  ("bd" org-remove-bold)

  ("cr" org-code)
  ("cw" org-code-word)
  ("cd" org-remove-code)

  ("er" org-emphasis)
  ("ew" org-emph-word)
  ("ed" org-remove-emph)
  ("lr" afs/org-remove-link)
  ("li" org-web-tools-insert-link-for-url))

(defhydra hydra-search (:color blue :hint nil :exit nil :foreign-keys nil)
  "
  ^
       ^Search^
       -------------------------------------------------
       _C-s_: grep/swiper  _u_: substitute  _j_: michaelis
       _s_:   evil         _p_: processes   _l_: dic informal
       _e_:   swiper       _l_: google      _m_: urban dic
       _c_:   occur        _g_: grep
       _o_:   outline      _h_: translate
       _i_:   ouline all   _i_: wordnut
  "
  ("<escape>" nil)

  ("C-s" counsel-grep-or-swiper)
  ("s" evil-ex-search-forward)
  ("e" swiper)
  ("c" occur)
  ("o" counsel-org-goto)
  ("i" counsel-org-goto-all)

  ("p" counsel-list-processes)
  ("l" engine/search-google)
  ("u" my/evil-substitute)
  ("g" counsel-grep)
  ("h" engine/search-translate)
  ("i" wordnut-search)
  ("I" wordnut-lookup-current-word)
  ("j" engine/search-michaelis)
  ("l" engine/search-dic-informal)
  ("m" engine/search-urban-dictionary))

(defhydra hydra-org-clock (:color blue :hint nil :exit nil :foreign-keys nil)
  "

   ^Org Clock^
   ------------------------------------
   _i_: in    _r_: report  _m_: clock recent ^^
   _o_: out   _c_: cancel
   _l_: last  _d_: display
   _s_: start _h_: history

  "
  ("q" nil)
  ("<escape>" nil)

  ("i" org-clock-in)
  ("o" org-clock-out)
  ("l" org-clock-in-last)
  ("s" my/org-started)

  ("r" org-clock-report)
  ("c" org-clock-cancel)
  ("d" org-clock-display)
  ("h" org-clock-history)
  ("m" org-mru-clock-in))


(defhydra hydra-org-mode (:color blue :hint nil :exit nil :foreign-keys nil)
  "

    ^Org^
    --------------------------------------------------
    _a_: capture    _h_: schedule   _p_: last capture
    _b_: agenda     _i_: sort       _q_: property commands
    _c_: align tags _l_: store link _r_: insert link for url
    _d_: archive    _m_: tags tree  _s_: cycle list bullets
    _e_: deadline   _n_: todo
    _g_: refile     _o_: tags

"
  ("<escape>" nil)

  ("a" counsel-org-capture)
  ("b" hydra-org-agenda/body)
  ("c" org-align-all-tags)
  ("d" org-archive-subtree-default)
  ("e" org-deadline)
  ("f" org-indent-mode)
  ("g" org-refile)
  ("h" org-schedule)
  ("i" org-sort)
  ("l" org-store-link)
  ("m" org-tags-sparse-tree)
  ("n" org-todo)
  ("o" counsel-org-tag)
  ("p" org-capture-goto-last-stored)
  ("q" my/org-property-commands)
  ("r" org-web-tools-insert-link-for-url)
  ("s" org-cycle-list-bullet))

(defhydra hydra-org-agenda (:color blue :hint nil :exit nil :foreign-keys nil)
  "

       ^Org Agenda^
       ---------------------------
       _a_: agenda  _l_: lock
       _1_: 1 day   _u_: unlock
       _2_: 2 days
       _3_: 3 days
       _7_: 7 days
  "
("q" nil)
("<escape>" nil)

("a" my/org-agenda)
("1" org-1-day-agenda)
("2" org-2-days-agenda)
("3" org-3-days-agenda)
("7" org-7-days-agenda)

("l" org-agenda-set-restriction-lock)
("u" org-agenda-remove-restriction-lock))

(defhydra hydra-help (:color blue :hint nil :exit t :foreign-keys nil)

  "

       ^^Help
       ----------------------------------------
       _f_: function  _k_: key       _i_: info
       _v_: variable  _l_: key long  _h_: helm-info
       _e_: package   _w_: where is
       _p_: at point  _a_: apropos
       _m_: major     _d_: docs
       _o_: modes     _c_: command

  "

  ("<escape>" nil)
  ("C-h" helpful-variable)
  ("C-f" helpful-callable)

  ("f" helpful-callable)
  ("e" describe-package)
  ("v" helpful-variable)
  ("p" helpful-at-point)
  ("m" show-major-mode)
  ("o" describe-mode)

  ("k" describe-key-briefly)
  ("l" helpful-key)
  ("w" where-is)

  ("a" counsel-apropos)
  ("c" helpful-command)
  ("d" apropos-documentation)
  ("i" info)
  ("h" helm-info))


(defhydra hydra-find-file (:hint nil :foreign-keys nil :exit t)

  "

     ^Files^
     ---------------------------
     _a_: scratch    _e_: emacs
     _b_: scratches  _f_: functions
     _c_: org        _g_: planning
     _d_: dotfiles   _h_: pcc
		   _i_: matérias

"
  ("<escape>" nil)
  ("C-o" hydra-find-emacs-files/body)

  ("a" my/goto-scratch-buffer)
  ("b" hydra-find-scratchs/body)
  ("c" ranger-find-org-dir)
  ("d" hydra-find-dotfiles/body)

  ("e" hydra-find-emacs-files/body)
  ("f" ranger-find-functions)
  ("g" ranger-find-planning)
  ("h" ranger-find-pcc-dir)
  ("i" ranger-find-materias)
  ("m" find-scratch-markdown))

(defhydra hydra-find-scratchs (:hint nil :foreign-keys nil :exit t)

  "

     ^Scratches^
     --------------
     _o_: org
     _m_: markdown
     _e_: messages
     _w_: warnings

"
  ("<escape>" nil)

  ("o" find-scratch-org)
  ("m" find-scratch-markdown)
  ("e" my/goto-messages-buffer)
  ("w" my/goto-warnings-buffer))

(defhydra hydra-find-dotfiles (:hint nil :color blue)
  "

     ^Bash^                   ^Others^
     -----------------------------------
     _i_: ~/.inputrc           _c_: $conf
     _p_: ~/.profile           _s_: ~/scripts
     _b_: ~/.bashrc            _n_: $conf/nvim
     _a_: ~/.bash aliases      _t_: ~/.tmux.conf
     _r_: ~/.bash profile      _3_: $conf/i3/config
     _d_: bashdot              _z_: $conf/zathura/zathurarc
"

  ("<escape>" nil)

  ("i" find-inputrc)
  ("p" find-profile)
  ("b" find-bashrc)
  ("a" find-bash-aliases)
  ("r" find-bash-profile)
  ("d" ranger-find-bashdot)

  ("n" ranger-find-nvim-dir)
  ("t" find-tmux-conf)
  ("z" find-zathurarc)
  ("c" ranger-find-config-dir)
  ("s" ranger-find-scripts-dir)
  ("3" find-i3-config))

(defhydra hydra-find-emacs-files (:hint nil :foreign-keys nil :exit t)
  "
  ^
     ^Org^           ^Elisp^                     ^Others^
     -------------------------------------------------------------
     _i_: init       _n_: init      _c_: custom    _d_: ~/.emacs.d
     _p_: packages   _a_: packs     _b_: gabbrevs  _j_: search pack
     _f_: functions  _u_: functions ^^             _l_: filesets.el
     _k_: keys       _e_: keys
     _m_: misc       _s_: misc
     _r_: macros     _o_: macros
     _h_: hydras     _y_: hydras
"
  ("<escape>" nil)
  ("C-," nil)
  ("C-o" my/search-pack)

  ("i" find-init)
  ("n" find-init.el)
  ("p" find-packs)
  ("ṕ" find-packs)
  ("a" find-packs.el)
  ("f" find-functions)
  ("u" find-functions.el)
  ("h" find-hydras)
  ("y" find-hydras.el)
  ("k" find-keys)
  ("e" find-keys.el)
  ("m" find-misc)
  ("s" find-misc.el)
  ("r" find-macros)
  ("o" find-macros.el)
  ("c" find-emacs-custom)
  ("b" find-abbrevs)
  ("d" ranger-find-emacs-dir)
  ("j" my/search-pack)
  ("l" find-filesets.el))
(defun line-numbers ()
  (interactive)
  (setq display-line-numbers 'visual)
  (setq display-line-numbers-widen nil)
  (setq display-line-numbers-current-absolute nil))

(defun line-numbers-absolute ()
  (interactive)
  (setq display-line-numbers 'visual)
  (setq display-line-numbers-widen nil)
  (setq display-line-numbers-current-absolute t))

(defun noct:relative ()
  (setq-local display-line-numbers 'visual))

(defun noct:absolute ()
  (setq-local display-line-numbers t))
(custom-set-faces '(line-number-current-line ((t :weight bold
                                                 :foreground "goldenrod"
                                                 :background "slate gray"))))
(defun line-no-numbers ()
  (interactive)
  (setq display-line-numbers nil))

;; (profiler-start 'cpu+mem)
;; (setq gc-cons-threshold 100000000)
;; (setq initial-major-mode 'fundamental-mode)
(setq initial-buffer-choice nil)
(setq initial-scratch-message nil)
(setq inhibit-startup-message t)

(load-file "~/.emacs.d/packs.el")

(load-file "~/.emacs.d/macros.el")

(load-file "~/.emacs.d/keys.el")

(load-file "~/.emacs.d/functions.el")

(load-file "~/.emacs.d/misc.el")

(use-package cus-face
:defer 1
:ensure nil
:config
(custom-set-faces
 '(default ((t (:family "Input Mono" :foundry "unknown" :slant normal :weight light :height 130 :width normal))))
 '(line-number-current-line ((t :weight bold :foreground "goldenrod" :background "slate gray")))))
(defhydra hydra-java-mode (:color blue :hint nil :foreign-keys run)
  "
  ^
       ^Java^
       ---------------------------------------
       _a_: quickrun        _f_ or _RET_: LSP
       _b_: quickrun shell  _g_ or _1_: LSP Java 1
       _c_: dumb jump go    _h_ or _2_: LSP Java 2
       _d_: flycheck        _i_ or _3_: LSP Java 3
       _e_: flymake

"
  ("<escape>" nil)
  ("q" nil)
  ("RET" hydra-lsp-mode/body)

  ("a" quickrun)
  ("b" quickrun-shell)
  ("c" dumb-jump-go)
  ("d" hydra-flycheck-mode/body)
  ("e" hydra-flymake-mode/body)
  ("f" hydra-lsp-mode/body)
  ("g" hydra-lsp-java-1/body)
  ("h" hydra-lsp-java-2/body)
  ("i" hydra-lsp-java-3/body)
  ("1" hydra-lsp-java-1/body)
  ("2" hydra-lsp-java-2/body)
  ("3" hydra-lsp-java-3/body))

(defhydra hydra-flycheck-mode (:color blue :hint nil :foreign-keys run)
  "
  ^
       ^Flycheck^
       ---------------------------------------------------
       _a_: check buffer          _e_: display error at point
       _b_: go to first error     _f_: explain error at point
       _c_: go to previous error  _g_: clear errors
       _d_: go to next error      _h_: flycheck mode

"
  ("q" nil)
  ("<escape>" nil)
  ("RET" hydra-flycheck-list-mode/body)

  ("a" flycheck-buffer)
  ("b" flycheck-first-error)
  ("c" flycheck-previous-error)
  ("d" flycheck-next-error)
  ("e" flycheck-display-error-at-point)
  ("f" flycheck-explain-error-at-point)
  ("g" flycheck-clear)
  ("h" flycheck-mode))

(defhydra hydra-flycheck-list-mode (:color blue :hint nil :foreign-keys run)
  "
  ^
       ^Flycheck List^
       ---------------------
       _a_: show error
       _b_: explain the error
       _c_: go to error
       _d_: previous error
       _e_: next error

"
  ("q" nil)
  ("<escape>" nil)
  ("RET" nil)

  ("a" flycheck-list-errors)
  ("b" flycheck-error-list-explain-error)
  ("c" flycheck-error-list-goto-error)
  ("d" flycheck-error-list-next-error)
  ("e" flycheck-error-list-previous-error))

(defhydra hydra-flymake-mode (:color blue :hint nil :foreign-keys run)
  "
  ^
       ^Flymake^
       ---------------------------------------------------
       _a_: go to diagnostic      _e_: show diagnostic buffer
       _b_: go to previous error  _f_: flymake start
       _c_: go to next error      _g_: switch to log buffer
       _d_: show diagnostic       _h_: flymake mode

"
  ("q" nil)
  ("<escape>" nil)
  ("RET" nil)

  ("a" flymake-goto-diagnostic)
  ("b" flymake-goto-prev-error)
  ("c" flymake-goto-next-error)
  ("d" flymake-show-diagnostic)

  ("e" flymake-show-diagnostics-buffer)
  ("f" flymake-start)
  ("g" flymake-switch-to-log-buffer)
  ("h" flymake-mode))

(defhydra hydra-lsp-mode (:color blue :hint nil :foreign-keys run)
  "
  ^
     ^LSP^
     -------------------------------------------------------------------
     _a_: describe at point        _h_: highlight references under point
     _b_: execute code action      _i_: add workspace folder
     _c_: format buffer            _j_: remove workspace folder
     _d_: go to implementation     _l_: switch workspace folder
     _e_: go to type definition    _1_ or _RET_: LSP Java 1
     _f_: rename at point          _2_: LSP Java 2
     _g_: restart language server  _3_: LSP Java 3

"
  ("q" nil)
  ("<escape>" nil)
  ("RET" hydra-lsp-java-1/body)

  ("a" lsp-describe-thing-at-point)
  ("b" lsp-execute-code-action)
  ("c" lsp-format-buffer)
  ("d" lsp-goto-implementation)
  ("e" lsp-goto-type-definition)
  ("f" lsp-rename)
  ("g" lsp-restart-workspace)

  ("h" lsp-symbol-highlight)
  ("i" lsp-workspace-folders-add)
  ("j" lsp-workspace-folders-remove)
  ("l" lsp-workspace-folders-switch)
  ("1" hydra-lsp-java-1/body)
  ("2" hydra-lsp-java-2/body)
  ("3" hydra-lsp-java-3/body))

(defhydra hydra-lsp-java-1 (:color blue :hint nil :foreign-keys run)
  "
  ^
       ^LSP JAVA 1^
       ---------------------------
       _a_: resolve notifications
       _b_: add missing imports
       _c_: add unimplemented methods
       _d_: build project
       _e_: browse classpath mode
       _RET_: LSP Java 2
"
  ("q" nil)
  ("<escape>" nil)
  ("RET" hydra-lsp-java-2/body)

  ("a" lsp-java-actionable-notifications)
  ("b" lsp-java-add-import)
  ("c" lsp-java-add-unimplemented-methods)
  ("d" lsp-java-build-project)
  ("e" lsp-java-classpath-browse)
  ("f" lsp-java-classpath-mode))

(defhydra hydra-lsp-java-2 (:color blue :hint nil :foreign-keys run)
  "
  ^
       ^LSP JAVA 2^
       ---------------------------------------
       _a_: Open object at path
       _b_: Create field refactoring
       _c_: Create local refactoring
       _d_: Extract method refactoring
       _e_: Extract constant refactoring
       _f_: Extract local variable refactoring
       _RET_: LSP Java 3

"
  ("q" nil)
  ("<escape>" nil)
  ("RET" hydra-lsp-java-3/body)

  ("a" lsp-java-classpath-open)
  ("b" lsp-java-create-field)
  ("c" lsp-java-create-local)
  ("d" lsp-java-extract-method)
  ("e" lsp-java-extract-to-constant)
  ("f" lsp-java-extract-to-local-variable))

(defhydra hydra-lsp-java-3 (:color blue :hint nil :foreign-keys run)
  "
  ^
       ^LSP JAVA 3^
       ----------------------------------
       _a_: organize imports
       _b_: update project configuration
       _c_: Update workspace project uris
       _d_: Update server
       _e_: Update user settings

"
  ("q" nil)
  ("<escape>" nil)
  ("RET" nil)

  ("a" lsp-java-organize-imports)
  ("b" lsp-java-update-project-configuration)
  ("c" lsp-java-update-project-uris)
  ("d" lsp-java-update-server)
  ("e" lsp-java-update-user-settings))
;; (define-key key-translation-map (kbd "<menu>") (kbd "C-c"))
(define-key key-translation-map (kbd "<f9>") (kbd "C-c"))

(general-define-key
 "C-c E m" 'evil-record-macro
 "C-c E e" 'evil-execute-macro
 "C-c DEL" 'my/bash-shebang
 "M-[" 'bs-cycle-next
 "M-]" 'bs-cycle-previous
 "M-9" 'delete-other-windows
 "<XF86Calculator>" 'quick-calc
 "C-0" 'delete-window
 "C-c 0" 'my/jump-to-register-91
 "<f8>" 'man
 "M-0" 'quit-window
 "M-e" 'evil-forward-sentence-begin
 "M-a" 'evil-backward-sentence-begin)

(general-define-key
 :keymaps 'override

 ;;;; MODES ;;;;

"C-c c"       'caps-lock-mode
"C-c m h v"     'describe-variable
"C-c m i"     'lisp-interaction-mode
"C-c m b"     'beacon-mode
"C-c m s"     'evil-swap-keys-mode
"C-c m o"     'org-mode
"C-c m n"     'org-noter
"C-c m l l"   'elmacro-mode
"C-c m m"     'magit-status
"C-c m y"     'yas-global-mode
"C-c m Y"     'yas-minor-mode-on
"C-c m f"     'flyspell-mode
"C-c m F"     'flycheck-mode
"C-c m w w"   'which-key-mode
"C-c m w s"   'which-key-show-major-mode
"C-c m g g"   'writegood-mode
"C-c m g e"   'writegood-reading-ease
"C-c m a"     'aggressive-indent-mode
"C-c m p"     'counsel-projectile-mode
"C-c m d"     'dimmer-mode
"C-c m z"     'zoom-mode
"C-c m u"     'unkillable-scratch

"C-c m e E"   'evil-mode
"C-c m e e"   'evil-local-mode
"C-c m e z"   'evil-emacs-state

"C-c m 2 l"   'org2blog/wp-login
"C-c m 2 o"   'org2blog/wp-logout
"C-c m 2 n"   'org2blog/wp-new-entry

"C-c 1" 'my/blog-post
"C-c 2" 'my/blog-publish

"C-c m 2 s p" 'org2blog/wp-post-subtree
"C-c m 2 s u" 'org2blog/wp-post-subtree-and-publish

"C-c m c" 'wc-mode
"C-c TAB" 'sr-speedbar-toggle

"C-c s" 'hydra-shell/body


;;;; FILE COMMANDS ;;;;
"C-c F -" 'show-server
"C-c F a" 'my/save-all
"C-c F 9" 'my/man-kill
"C-c F 0" 'my/server-edit
"C-c F c" 'my/magit-commit
"C-c F t" 'my/reopen-kill-file
"C-c F s" 'my/magit-stage-modified
"C-x C-n" 'org-noter-insert-note
"C-x C-p" 'org-noter-insert-precise-note
"C-x p"    'my/counsel-projectile-commands
"C-c r"    'restart-emacs
;; "C-c ç"   'my/goto-info-buffer-other-window

"C-c b" 'org2blog/wp-hydra/body
"C-c k" 'hydra-kill/body
"C-c ;" 'kill-buffer-and-window
;; "C-c p" 'my/search-pack
;; "C-c b i" 'emacs-init-time
;; "C-c b t" 'benchmark-init/show-durations-tree
;; "C-c b o" 'my/time-benchmark
"C-c x" 'my/show-variable-at-point

;;;; FILESETS ;;;;
"C-c f o" 'filesets-open
"C-c f c" 'filesets-close
"C-c w" 'rename-file-and-buffer

;;;; LOADING AND UNLOADING ;;;;
"C-c L t"   'load-theme
"C-c L d"   'disable-theme
"C-c L n"   'noctilux-on
"C-c L p d" 'poet-dark-on
"C-c L p m" 'poet-dark-monochrome-on
"C-c L d"   'disable-theme
"C-c L m"   'disable-modeline
"C-c L e"   'desktop-change-dir
"C-c L r"   'desktop-read
"C-c L w"   'my/new-theme

;;;; EDITING ;;;;
"C-S-j" 'my/move-line-down
"C-S-k" 'my/move-line-up
"C-c i a" 'align-regexp
"C-c i e" 'tiny-expand
"C-c i s" 'transpose-sentences
"C-c i l" 'transpose-lines
"C-c i p" 'transpose-paragraphs
"C-c i i" 'indent-block
"C-c i c" 'clipmon-autoinsert-toggle

;;;; QUICK KEYS ;;;;
"C-c ç" 'hydra-gro-prjct/body
;; "C-c x" 'my/kill-buffer-and-workspace
"M-." 'evil-window-next
"M-," 'evil-window-prev
"C-SPC" nil
"M-s" 'last-buffer
"M-t" 'transpose-words
"C-t" 'transpose-chars
"C-;" 'hydra-text-main/body
"C-x ," 'my/jump-to-register-91
"C-x ." 'my/jump-to-register-eight
"C-S-l" 'redraw-display
"C-9" 'delete-other-windows)
(fset 'del-ipar-insert
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("ndip" 0 "%d") arg)))
(fset 'del-par-insert
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("ndap" 0 "%d") arg)))
(fset 'shorten-home
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([58 37 115 47 92 47 104 111 109 101 92 47 109 114 98 105 103 92 47 backspace 47 126 backspace backspace backspace 47 126 backspace 92 126 left 97 97 backspace backspace right 47 return] 0 "%d") arg)))
(fset 'disable-package
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([48 47 112 97 99 107 115 46 101 108 return 67 100 105 115 97 98 108 101 46 101 108 escape] 0 "%d") arg)))
(fset 'enable-package
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([48 47 100 105 115 97 98 108 101 46 101 108 return 67 112 97 99 107 115 46 101 108 escape] 0 "%d") arg)))
(fset 'my/flyspell-insert-word
   "\244iy")
(fset 'format-buffer
   "g]Z\C-xhgq`Z")
(fset 'timestamp-remove-tail
   [?g ?_ ?B ?h ?C ?> escape])
(fset 'my/org-narrow-increase
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([32 111 110 32 119 61 61 escape 32 109 110] 0 "%d") arg)))

(fset 'org-inner-block
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([47 35 92 43 98 101 103 105 110 95 101 120 97 109 112 108 101 return 106 86 47 35 92 43 101 110 100 95 101 120 97 109 112 108 101 return 107] 0 "%d") arg)))

(fset 'org-outer-block
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([47 35 92 43 98 101 103 105 110 95 101 120 97 109 112 108 101 return 86 47 35 92 43 101 110 100 95 101 120 97 109 112 108 101 return] 0 "%d") arg)))

(fset 'org-code
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 96 60 105 126 escape 96 62 97 126 escape] 0 "%d") arg)))

(fset 'org-remove-code
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([58 115 47 126 47 47 103 return] 0 "%d") arg)))

(fset 'org-bold
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 96 60 105 42 escape 96 62 97 42 escape] 0 "%d") arg)))

  (fset 'org-remove-bold
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([58 115 47 42 47 47 103 return] 0 "%d") arg)))

(fset 'org-emphasis
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 96 60 105 47 escape 96 62 97 47 escape] 0 "%d") arg)))

(fset 'org-remove-emph
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([58 47 115 backspace backspace 115 47 92 47 47 47 103 return] 0 "%d") arg)))

(fset 'org-hide-all
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([21 tab] 0 "%d")) arg)))

(fset 'org-sort-todos
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("gg]^d" 0 "%d") arg)))

(fset 'my/widen-reset-no-switch
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '(" ow wa ml" 0 "%d") arg)))

(fset 'my/widen-reset
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("nw ml wazz\363" 0 "%d") arg)))

(fset 'my/narrow-to-inner-paragraph
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([103 93 122 118 105 112 32 99 110 escape 32 109 110 32 119 61 61 escape 96 122] 0 "%d") arg)))

(fset 'redo-two-changes-insert
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 103 93 122 50 18 96 122 97] 0 "%d") arg)))

(fset 'redo-two-changes-normal
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("2" 0 "%d") arg)))

(fset 'undo-two-changes-insert
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 103 93 122 50 117 96 122 97] 0 "%d") arg)))

(fset 'open-two-below-insert
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([111 return return up] 0 "%d") arg)))

(fset 'open-two-below-normal
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([111 return return up escape] 0 "%d") arg)))

(fset 'evil-paste-from-clipboard
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([134217848 101 118 105 108 45 112 97 115 116 101 45 102 114 111 109 45 114 101 103 105 115 return 43] 0 "%d") arg)))

(fset 'undo-two-changes-normal
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("uu" 0 "%d") arg)))

(fset 'org-emph-word
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([118 105 87 escape 96 60 105 47 escape 96 62 97 47 escape] 0 "%d") arg)))

(fset 'org-bold-word
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([118 105 87 escape 96 60 105 42 escape 96 62 97 42 escape] 0 "%d") arg)))

  (fset 'org-code-word
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([118 105 87 escape 96 60 105 126 escape 96 62 97 126 escape] 0 "%d") arg)))

(fset 'org-link-in-WORD
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([118 105 87 insert insert return return] 0 "%d") arg)))

(fset 'org-link-in-word
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([118 105 119 insert insert return return] 0 "%d") arg)))

(fset 'insert-link-in-list
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([48 119 103 114 insert insert return return] 0 "%d") arg)))

(fset 'my/delete-region
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("\"_d" 0 "%d") arg)))

(fset 'select-paragraph
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("vap" 0 "%d") arg)))

(fset 'select-inner-paragraph
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("vip" 0 "%d") arg)))

(fset 'my/below-line-macro
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([65 return escape] 0 "%d") arg)))

(fset 'my/above-line-macro
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([73 return escape] 0 "%d") arg)))

(fset 'duplicate-line
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("g]zyyp`zj" 0 "%d") arg)))

(fset 'yank-inner-paragraph
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("yip" 0 "%d") arg)))

(fset 'yank-paragraph-macro
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("yap" 0 "%d") arg)))

(fset 'duplicate-a-paragrah
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("vapy`>p" 0 "%d") arg)))

(fset 'duplicate-inner-paragraph
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("vipy`>gop" 0 "%d") arg)))


(fset 'my/show-variable-at-point
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([8 118 return] 0 "%d") arg)))

(fset 'my/disable-current-theme
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("Ld
" 0 "%d") arg)))

(fset 'adjust-cheatsheet-window
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([32 116 106 escape] 0 "%d") arg)))

(fset 'adjust-vertigo-cheat-sheet
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([32 116 106 106 106 escape 24 67108912 61 61 escape] 0 "%d") arg)))

(fset 'adjust-server-name
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([32 74 32 116 106 106 106 escape 118 105 34 24 110 110 escape 24 67108912 61 61 61 201326640] 0 "%d") arg)))

(fset 'my/book-set
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([24 114 109 return] 0 "%d") arg)))

(fset 'goto-pdf-buffer
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([24 98 46 112 100 102 return] 0 "%d") arg)))

(fset 'my/undo-save
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("ru1" 0 "%d") arg)))

(fset 'my/undo-restore
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("rU1" 0 "%d") arg)))

(fset 'clone-to-workspace
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("4cg]Z0 f`Z" 0 "%d") arg)))

(fset 'insert-leader
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape C-f9] 0 "%d") arg)))

(fset 'i3-toggle-keys
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([103 93 90 C-f11 103 103 47 48 48 115 99 return 134217853 106 103 99 105 112 134217853 106 103 99 105 112 C-f12 96 90 0] 0 "%d") arg)))

(fset 'eyebrowse-swap-workspace
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([32 110 return 134217829 32 110 return 134217829] 0 "%d") arg)))

(fset 'show-text-objects
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([103 103 47 101 118 105 108 32 111 114 103 32 116 101 120 116 return 122 105 122 116 122 110] 0 "%d") arg)))

(fset 'my/python-paste-exercise
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([103 111 103 111 112 103 119 97 112 103 99 105 112 escape] 0 "%d") arg)))

(fset 'my/python-make-string
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([118 103 102 41 104 83 41 105 115 116 114 escape 108] 0 "%d") arg)))

(fset 'indent-block
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([134217837 M-return 134217837] 0 "%d") arg)))

(fset 'add-hook-macro
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("I(add-hook ' ')\342" 0 "%d") arg)))

(fset 'eval-next-sexp
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([118 97 40 escape 24 5] 0 "%d") arg)))

(fset 'c-goto-vars
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([109 113 103 103 47 115 101 116 108 111 99 97 108 101 return 50 106] 0 "%d") arg)))

(fset 'py-open-beg
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([111 home] 0 "%d") arg)))

(fset 'run-c-with-arguments
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([10 109 121 32 99 111 112 121 32 102 105 108 101 110 return 32 101 46 47 escape 112 105 backspace backspace 32] 0 "%d") arg)))

(fset 'py-enclose
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("vg_S)i" 0 "%d") arg)))

(fset 'copy-line-no-newline
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("g]Z0Y`Z" 0 "%d") arg)))

(fset 'my/comment-dupplicate-line
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("g]Zyyp`Zjg]X`Zgcc`X" 0 "%d") arg)))

(fset 'duplicate-line
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("g]zyyp`zj" 0 "%d") arg)))

(fset 'python-open-two-lines-insert
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([end return return return] 0 "%d") arg)))

(fset 'python-open-two-line
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([111 13 13 home] 0 "%d") arg)))

(fset 'my/run-python-all
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([134217848 114 117 110 45 112 121 116 104 111 110 return 134217848 101 118 105 108 45 110 111 114 109 97 108 45 115 97 116 backspace backspace 116 97 116 101 return 48 12 32 119 114 98 106 escape 67] 0 "%d") arg)))

(fset 'org-quote-selection
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 103 93 90 79 35 43 86 69 71 S-backspace S-backspace S-backspace 66 69 71 73 78 95 81 85 79 84 69 escape 96 62 111 35 43 69 66 68 S-backspace S-backspace 78 68 43 S-backspace 95 81 85 79 84 69 escape 96 60 103 111 escape 100 100] 0 "%d") arg)))

(fset 'org-markdown-to-clipboard
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '(" omhyk" 0 "%d") arg)))

(fset 'reset-scratch-c
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '(" xdimsc" 0 "%d") arg)))

(fset 'adjust-show-fill-colum
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([118 105 112 24 110 110 escape 32 119 61 escape 32 119 114 106 106 escape 32 109 69] 0 "%d") arg)))

(fset 'c-widen
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("g]Z ow wa ml" 0 "%d") arg)))

(fset 'c-narrow-to-block
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([103 93 90 118 105 112 24 110 110 escape 32 119 61 61 escape 32 109 110 96 90] 0 "%d") arg)))

(fset 'duplicate-workspace-buffer
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("g]Z\363 f`Z" 0 "%d") arg)))
(fset 'new-eval-src-block
      [?g ?\] ?Z ?v ?i ?E ?  ?c ?r escape ?` ?Z ?z ?z])
(fset 'run-c-block
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([118 105 69 121 32 119 115 11 116 101 109 112 46 99 return 24 104 112 backspace 114] 0 "%d") arg)))

(fset 'run-c-block-insert
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 118 105 69 121 32 119 115 11 116 101 109 112 46 99 return 24 104 112 backspace 114] 0 "%d") arg)))

(fset 'adjust-eshell-window
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 32 119 114 106 97] 0 "%d") arg)))

(fset 'adjust-eshell-window
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 32 119 114 106 escape 97] 0 "%d") arg)))

(fset 'my/debug-c-macro
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([32 98 112 134217766 103 100 98 32 45 45 98 97 116 99 104 32 45 45 101 120 32 114 32 45 45 101 120 32 98 114 32 45 45 101 120 32 113 32 45 45 97 114 103 115 32 insert 127 127 13] 0 "%d") arg)))

(fset 'c-complete-newline
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 103 93 90 97 59 escape 96 90 97] 0 "%d") arg)))

(fset 'adjust-term
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 32 119 114 106 escape 105 115 112 13] 0 "%d") arg)))

(fset 'adjust-python-term
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 32 116 106 escape] 0 "%d") arg)))

(fset 'adjust-term-c
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 32 119 114 106 escape 105] 0 "%d") arg)))

(fset 'format-hydra-binding
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([48 103 114 83 41 96 60 97 34 right 32 left left] 0 "%d") arg)))

(fset 'eval-line
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([103 93 122 86 32 99 114 escape 96 122] 0 "%d") arg)))

(fset 'create-setq
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([48 103 114 83 41 96 60 97 115 101 116 113 32 escape 96 62 105 32] 0 "%d") arg)))

(fset 'create-setq-from-visual
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([83 41 96 60 97 115 101 116 113 32 escape 96 62 97 escape 105 32] 0 "%d") arg)))

(fset 'alg-goto-var-ins
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 103 103 47 94 118 97 114 36 return 106 106 105] 0 "%d") arg)))

(fset 'alg-goto-inicio-ins
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([escape 103 103 47 94 105 110 105 99 105 111 36 return 106 106 105] 0 "%d") arg)))

(fset 'alg-goto-var
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([103 103 47 118 97 114 return 106 106] 0 "%d") arg)))

(fset 'alg-goto-inicio
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([103 103 47 105 110 105 99 105 111 return 106 106] 0 "%d") arg)))

(fset 'evaluate-parentheses
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([103 93 122 118 97 40 32 99 114 escape 96 122] 0 "%d") arg)))

(fset 'my/calc-region
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([121 XF86Calculator insert return 103 111 112] 0 "%d") arg)))

(fset 'term-ls-p
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([115 109 97 108 108 112 114 111 109 112 116 return 99 108 101 97 114 return 108 115 return 112 32] 0 "%d") arg)))

(fset 'term-gcc
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '([103 99 99 32 45 119 32 45 108 109 32 escape 112 97 32 38 38 32 46 47 46 backspace 97 46 44 backspace backspace 46 111 117 116 escape 48 107 119 119 119 119 105 escape 48 107 108 108 108 108 108 105 home 99 108 101 97 114 32 38 38 32 return] 0 "%d") arg)))

(fset 'select-next-block
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([47 35 92 43 66 69 71 73 78 95 83 82 67 return 86 47 35 92 43 69 78 68 95 83 82 67 return] 0 "%d")) arg)))

(fset 'select-next-inner-block
      (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([47 35 92 43 66 69 71 73 78 95 83 82 67 return 106 86 47 35 92 43 69 78 68 95 83 82 67 return 107] 0 "%d")) arg)))

(fset 'my-yank-region
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item '("y" 0 "%d") arg)))
(defalias 'org 'org-mode)
(defalias 'evil 'evil-mode)
(defalias 'par 'package-delete)
(defalias 'pai 'package-install)
(defalias 'cug 'customize-group)
(defalias 'path 'prelude-copy-file-name-to-clipboard)

(setq-default word-wrap t)
(setq word-wrap t)
(put 'narrow-to-region 'disabled nil)
(setq scroll-conservatively 0)
(setq-default display-line-numbers nil)
(setq visible-bell nil)
(setq calc-display-trail nil)
(fset 'yes-or-no-p 'y-or-n-p)
(setq-default fringe-indicator-alist (assq-delete-all 'truncation fringe-indicator-alist))
(setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
(setq apropos-do-all t)
(setq debug-on-error nil)
(setq use-dialog-box nil)
(setq window-resize-pixelwise t)
;; org-clock-save.el - gunther at <2019-01-17 Thu 13:06>
(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
		    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
;; (package-initialize)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages (quote (use-package))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(use-package quelpa
  :init
  (setq quelpa-update-melpa-p nil)
  :ensure t)

(use-package quelpa-use-package
  :ensure t)

;; (setq custom-file "/dev/null")
(setq custom-file "~/.emacs.d/etc/custom.el")
;; (load-file "~/.emacs.d/etc/custom.el")


(use-package general
  :ensure t
  :config
  (load-file "~/.emacs.d/lisp/functions/general_shift_avoidance.el")

  (general-unbind 'global
    "<C-next>"
    "C-w"
    "C-c w"
    "M-u"
    "M-h"
    "M-o"
    "S-SPC"
    "C-o")

  (general-unbind 'lisp-interaction-mode-map
    :with 'evil-ex-nohighlight
    [remap my/quiet-save-buffer])

  (general-unbind '(normal visual)
    :with 'hydra-kill/body
    "K")

  (general-create-definer leader
    :prefix "SPC")
  (leader
    :states '(normal visual)
    :keymaps 'override
    ;; "SPC" 'projectile-command-map
    "u" 'counsel-org-capture
    "s" 'my/split-below
    "l" 'my/split-right
    "b" 'my/evil-botright
    "k" 'split-window-below
    "q" 'kill-this-buffer
    "0" 'delete-window
    "y" 'my/term-botright
    "j" 'my/split-vertically
    "h" 'split-window-horizontally
    "W" 'widenToCenter
    "e" 'widen
    "n" 'recursive-narrow-or-widen-dwim
    "w" 'recursive-widen)

  (general-define-key
   :keymaps 'global
   "M-n" 'my/paragraph-forward
   "M-p" 'my/paragraph-backwards)
  (general-evil-setup t))

(use-package org
  :defer t
  :ensure t
  :init
  (add-hook 'before-save-hook 'org-align-all-tags)
  (add-hook 'org-archive-hook 'org-hide-other)
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'org-mode-hook 'org-bullets-mode)
  (remove-hook 'org-cycle-hook #'org-optimize-window-after-visibility-change)

  (remove-hook 'calendar-mode-hook (lambda ()
				     (evil-window-move-very-bottom)))
  (add-hook 'org-agenda-mode-hook
	    (lambda ()
	      (setq display-line-numbers nil)
	      (setq truncate-lines t)))

  (add-hook 'org-capture-mode-hook (lambda ()
				     (evil-insert-state)
				     (evil-window-move-very-bottom)))

  (remove-hook 'org-cycle-hook #'org-cycle-hide-drawers)
  (load-file "~/.emacs.d/lisp/functions/org_func.el")
  :config
  (defun my/org-property-commands ()
    (interactive)
    (counsel-M-x "^org property "))
  (plist-put org-format-latex-options :scale 2.0)
  (setq org-bookmark-names-plist nil)
  (setq org-agenda-files '("~/org/Planning"))
  (setq org-enforce-todo-checkbox-dependencies nil)
  (setq org-link-file-path-type 'adaptive)
  (setq org-export-with-toc nil)

  (defun my/save-archive ()
    (interactive)
    (save-buffer "~/org/Config/.archive.org::* From %s"))

;; (setq org-clock-persist nil)
;; (org-clock-persistence-insinuate)
(setq org-clock-in-resume t)
(setq org-pretty-entities t)
(setq org-clock-into-drawer t)
(setq org-clock-out-when-done t)
(setq org-clock-history-length 10)
(setq org-clock-mode-line-total 'auto)
(setq org-clock-clocked-in-display t)
(setq org-clock-persist-query-resume t)
(setq org-clock-out-remove-zero-time-clocks nil)
(setq org-clock-report-include-clocking-task t)
(setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
(setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))  ;; Separate drawers for clocking and logs
(setq org-log-into-drawer t)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)))
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-confirm-babel-evaluate t)
(setq org-babel-no-eval-on-ctrl-c-ctrl-c t)
(setq org-src-preserve-indentation t)
(setq org-edit-src-content-indentation 1)
(setq org-src-ask-before-returning-to-edit-buffer nil)


(setq org-pretty-entities-include-sub-superscripts nil)
(setq org-format-latex-options
      (plist-put org-format-latex-options :scale 1.3))
(setq org-archive-location "~/org/Config/archive.org::* From %s")
;; (setq org-archive-location "::* Archived")
(setq org-export-html-postamble nil)
(setq org-indent-mode t)
(setq org-link-frame-setup ( quote ((file . find-file))))
(setq org-allow-promoting-top-level-subtree nil)
(setq org-image-actual-width nil)
(setq org-use-speed-commands t)
(setq org-cycle-level-faces t)
(setq org-return-follows-link t)
(setq org-fontify-whole-heading-line t)
(setq org-hide-emphasis-markers t)
(setq org-startup-indented t)
(setq org-replace-disputed-keys t)
(setq org-ellipsis ".")
(setq org-babel-temporary-directory "~/.emacs.d/babel-temp")
(setq org-fontify-done-headline t)

(setq org-todo-keywords
      '((sequence "TODO(t!)" "STARTED(s!)" "|"  "DONE(d!)")))

(setq org-tags-column -69)
(setq org-agenda-tags-column -80)


(setq org-refile-targets '((nil :maxlevel . 9)
                                (org-agenda-files :maxlevel . 9)))

;; (setq org-refile-targets '((nil :maxlevel . 9)))

(setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
;; (setq org-refile-use-outline-path file)                  ; Show full paths for refiling
(setq org-refile-use-outline-path 'file)
(setq org-refile-allow-creating-parent-nodes (quote confirm))


(setq org-file-apps (quote ((auto-mode . emacs)
                            ("\\.mm\\'" . default)
                            ("\\.x?html?\\'" . default)
                            ("\\.jpg\\'" . "viewnior %s")
                            ("\\.pdf\\'" . default))))

;; (setq org-file-apps (quote ((auto-mode . emacs)
;;                             ("\\.mm\\'" . default)
;;                             ("\\.x?html?\\'" . default)
;;                             ("\\.jpg\\'" . "viewnior %s")
;;                             ("\\.odt\\'" . "lowriter %s")
;;                             ("\\.pdf\\'" . "zathura %s"))))


(add-to-list 'org-structure-template-alist '("ll" "\\begin{equation*}\n\\begin{split}\n?\n\\end{split}\n\\end{equation*}"))
(add-to-list 'org-structure-template-alist '("cc" "#+BEGIN_SRC C\n?\n#+END_SRC"))
(add-to-list 'org-structure-template-alist '("s" "#+BEGIN_SRC shell \n?\n#+END_SRC"))
(add-to-list 'org-structure-template-alist '("use" nil))
(add-to-list 'org-structure-template-alist '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
(add-to-list 'org-structure-template-alist '("l" "#+BEGIN_SRC lisp :comments link :tangle ~/Code/01_game.lisp\n\n?\n\n#+END_SRC"))
(add-to-list 'org-structure-template-alist '("lisp" "#+BEGIN_SRC lisp\n\n?\n\n#+END_SRC"))
(add-to-list 'org-structure-template-alist '("p" "#+BEGIN_SRC python :tangle yes\n?\n#+END_SRC"))
(add-to-list 'org-structure-template-alist '("u" "#+begin_quote\n?\n#+end_quote"))

(setq org-capture-templates
      '(
	;; ("m" "Matemática" entry (file+headline "~/Matérias/matematica.org" "Refile") "** %u %i%?" :empty-lines 1)
	;; ("d" "Des_Social" entry (file+headline "~/Matérias/desenvolvimento_social.org" "Refile") "** %u %i%?" :empty-lines 1)
	;; ("g" "Ger_de TI" entry (file+headline "~/Matérias/gerencia_de_ti.org" "Refile") "** %u %i%?" :empty-lines 1)
	;; ("a" "Arquitetura" entry (file+headline "~/Matérias/arquitetura_de_computatores.org" "Refile") "** %u %i%?" :empty-lines 1)
	;; ("p" "POO" entry (file+headline "~/Matérias/programacao_orientada_a_objetos.org" "Refile") "** %t %i%?" :empty-lines 1)
	("s" "Social" entry  (file+headline "~/org/Creative/Social/Public/social_public.org" "Refile") "* %u %i%?")
	("r" "Refile" entry  (file+headline "~/org/Planning/planning.org" "Refile") "* %u %i%?")
	("0" "Daily"  entry  (file+headline "~/org/Planning/planning.org" "Daily")  "* TODO %u %i%?")
	("1" "Agora"  entry  (file+headline "~/org/Planning/planning.org" "Agora")  "* TODO %u %i%?")
	("2" "Logo"   entry  (file+headline "~/org/Planning/planning.org" "Logo")   "* TODO %u %i%?")
	("3" "Depois" entry  (file+headline "~/org/Planning/planning.org" "Depois") "* TODO %u %i%?")
	("4" "Um Dia" entry  (file+headline "~/org/Planning/planning.org" "Um Dia") "* TODO %u %i%?")))


(general-define-key
 :keymaps 'org-src-mode-map
 "M-m" 'org-edit-src-exit)

(general-define-key
 :keymaps 'org-mode-map
 "C-c C-s" 'org-emphasize
 "C-j" 'counsel-M-x
 "C-M-j" 'org-metadown
 "C-c C-b" nil
 "C-c C-b C-b" 'org-reset-checkbox-state-subtree
 "C-c C-b C-c" 'org-update-checkbox-count
 "C-c C-b C-t" 'org-toggle-checkbox
 "C-c t" 'org-toggle-timestamp-type
 "C-M-k" 'org-metaup)

(general-nvmap
  :keymaps 'org-mode-map
  "zm" 'org-hide-all
  "C-j" 'counsel-M-x
  "M-m" 'org-edit-special
  "<insert>" 'org-insert-link
  "M-n" 'org-forward-paragraph
  "RET" 'hydra-spell/body
  "M-p" 'org-backward-paragraph
  "M-e" 'evil-forward-sentence-begin
  "M-a" 'evil-backward-sentence-begin
  "SPC TAB" 'outline-hide-subtree
  "SPC s" 'org-show-subtree)

(general-define-key
 :keymaps 'org-capture-mode-map
 "<M-return>" 'org-capture-kill
 "<C-return>" 'org-capture-finalize)

(general-unbind 'org-capture-mode-map
  :with 'org-capture-kill
  [remap my/quiet-save-buffer])


)

(use-package org-bullets
:ensure t)
  ;; :init
  ;; (setq org-bullets-bullet-list (quote ("◐" "◑" "◒" "◓" "☉" "◎" "◉")))

(use-package org-noter
:defer t
:ensure t)

(use-package ox-asciidoc
:after org
:ensure t)

(use-package org-web-tools
:after org
:ensure t)

(use-package ox-epub
:after org
:ensure t)

(use-package toc-org
:defer t
:ensure t)

(use-package org2blog
  :init
  (setq org2blog/wp-blog-alist
	'(("daviramos-en"
	   :url "http://daviramos.com/en/xmlrpc.php"
	   :username "daviramos"
	   :default-title "Hello World"
	   :default-categories ("sci-fi")
	   :tags-as-categories nil)
	  ("daviramos-br"
	   :url "http://daviramos.com/br/xmlrpc.php"
	   :username "daviramos"
	   :default-title "Hello World"
	   :default-categories ("sci-fi")
	   :tags-as-categories nil)))
  :ensure t)

(use-package adoc-mode
:ensure t
:init
(add-to-list 'auto-mode-alist '("\\.adoc\\'" . adoc-mode)))

(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t)
  (setq evil-vsplit-window-right t)
  (setq evil-search-module 'evil-search)
  (setq evil-want-keybinding nil)
  (setq evil-want-fine-undo t)
  (setq evil-ex-substitute-global t)
  (setq evil-jumps-cross-buffers nil)
  (setq evil-disable-insert-state-bindings t)
  (setq evil-want-Y-yank-to-eol t)
  :config
  (evil-mode 1)
  (load-file "~/.emacs.d/lisp/functions/evil_keys.el")

  (setq evil-insert-state-message nil)
  (setq evil-respect-visual-line-mode nil)

  (add-to-list 'evil-normal-state-modes 'lisp-interaction-mode)
  (add-to-list 'evil-insert-state-modes 'org-journal-mode)
  (add-to-list 'evil-emacs-state-modes 'org-brain-visualize-mode)
  (add-to-list 'evil-emacs-state-modes 'bongo-library-mode)
  (add-to-list 'evil-emacs-state-modes 'bongo-library-mode)
  (add-to-list 'evil-emacs-state-modes 'bongo-playlist-mode) (add-to-list 'evil-emacs-state-modes 'bongo-progressive-playback-mode) (add-to-list 'evil-emacs-state-modes 'bongo-sprinkle-mode) (add-to-list 'evil-emacs-state-modes 'bongo-header-line-mode))

(use-package evil-org
  :ensure t
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

(use-package evil-commentary
  :after evil
  :ensure t
  :config
  (evil-commentary-mode 1))

(use-package evil-collection
:after evil
:ensure t
:config
(evil-collection-init))

(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))


(use-package evil-rsi
  :after evil
  :ensure t
  :config
  (evil-rsi-mode))

(use-package evil-numbers
  :defer t
  :ensure t
  :config
  (general-nvmap
    :keymaps 'override
    "C-M-i" 'evil-numbers/inc-at-pt
    "C-M-o" 'evil-numbers/dec-at-pt))

(use-package typo
:defer t
:ensure t)

(use-package writegood-mode
  :defer t
  :ensure t)

(use-package hl-sentence
  :defer t
  :ensure t)

(use-package flyspell
  :defer t
  :custom
  (flyspell-abbrev-p t)
  (flyspell-issue-message-flag nil)
  (flyspell-issue-welcome-flag nil)
  (flyspell-default-dictionary "american")
  :config
  (general-nvmap
    :keymaps 'override
    "z-" 'my/flyspell-insert-word))

(use-package flyspell-correct-ivy
  :after flyspell
  :custom
  (flyspell-correct-interface 'flyspell-correct-ivy))

(use-package ispell
:defer t
:ensure nil
:config
(general-nvmap
  :keymaps 'override
  "z[" 'ispell-insert-word))

(setq auto-capitalize-ask nil)
(autoload 'auto-capitalize-mode "auto-capitalize"
  "Toggle `auto-capitalize' minor mode in this buffer." t)
(autoload 'turn-on-auto-capitalize-mode "auto-capitalize"
  "Turn on `auto-capitalize' minor mode in this buffer." t)
(autoload 'enable-auto-capitalize-mode "auto-capitalize"
  "Enable `auto-capitalize' minor mode in this buffer." t)

(use-package fix-word
:defer t
:ensure t)

(use-package wc-mode
:defer 3
:ensure t)

(use-package olivetti
:defer t
  :ensure t
  :init
  (setq-default olivetti-body-width 90)
  (setq olivetti-body-width 90))

(use-package markdown-mode
  :defer t
  :ensure t
  :init
  (add-hook 'markdown-mode-hook 'prose-enable)
  ;; (remove-hook 'markdown-after-export-hook 'my/browse-current-url)
  (setq markdown-hide-urls t)
  (setq markdown-hide-markup nil)
  (setq-default markdown-hide-markup nil)
  (setq markdown-enable-wiki-links t)
  :config
  (setq markdown-css-paths '("/home/mrbig/org/Creative/Web/md_themes/retro/css/retro.css"))

  (general-nmap
    :keymaps 'markdown-mode-map
    "<escape>" 'my/quiet-save-buffer-markdown)

  (general-imap
    :keymaps 'markdown-mode-map
    "C-;" 'hydra-text-main/body)

  (general-nvmap
    :keymaps 'markdown-mode-map
    "C-;" 'hydra-text-main/body
    "}" 'markdown-forward-paragraph
    "RET" 'hydra-spell/body
    "[" 'markdown-previous-link
    "]" 'markdown-next-link
    "C-;" 'hydra-text-main/body
    "<insert>" 'markdown-insert-link)

  (general-define-key
   :keymaps 'markdown-mode-map
   "C-;" 'hydra-text-main/body
   "M-p" 'markdown-backward-paragraph
   "M-n" 'my/markdown-forward-paragraph
   "TAB" 'markdown-cycle
   "<insert>" 'markdown-insert-link))

(use-package markdown-toc
  :ensure t)

(use-package savehist
  :init
  (setq history-length 500)
  (setq savehist-autosave-interval (* 1 60))
  (setq savehist-file "~/.emacs.d/var/savehist.el")
  (setq savehist-additional-variables '(kill-ring search-ring filesets-data))
  :config
  (savehist-mode t))

(use-package no-littering
  :ensure t)

(use-package saveplace
  :ensure nil
  :init
  (setq save-place-file "~/.emacs.d/var/save-place.el")
  :config
  (save-place-mode 1))

(use-package vimrc-mode
  :defer t
  :ensure t
  :init
  (add-to-list 'auto-mode-alist '("\\.vim\\'" . vimrc-mode)))

(use-package vlf
:ensure t)

(use-package unkillable-scratch
  :ensure t
  :config
  (setq unkillable-buffers '("^\\*scratch\\*$"
			     "*Bongo Playlist*"
			     "*Bongo Library*"))
  (setq unkillable-scratch-behavior 'bury)
  :config
  (unkillable-scratch))

(use-package evil-better-visual-line
  :after evil
  :ensure t
  :config
  (evil-better-visual-line-on))

(use-package centered-cursor-mode
  :defer nil
  :ensure t
  :config
  (setq ccm-step-size 4)
  (setq ccm-step-delay 0.02)
  (setq ccm-recenter-at-end-of-file t))

(use-package buffer-move
:defer t
:ensure t)

(use-package avy
  :defer 2
  :ensure t
  :config
  (setq avy-timeout-seconds 0.3)
  (setq avy-highlight-first t)
  (setq avy-single-candidate-jump t)

  (general-nvmap
    "F" 'avy-goto-char-2-above
    "f" 'avy-goto-char-2-below
    "gf" 'evil-find-char
    "gF" 'evil-find-char-backward)

  (setq avy-background t)
  (setq avy-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l
		      ?q ?w ?e ?r ?t ?y ?u))
  (setq avy-all-windows nil))

(use-package dired
  :defer t
  :ensure nil
  :config
  (setq dired-omit-mode t)
  (setq delete-by-moving-to-trash t)
  (setq dired-listing-switches "-lsh")
  (setq dired-hide-details-mode t)
  (setq truncate-lines t)
  (add-hook 'dired-mode-hook 'line-numbers))

(use-package dired+
  :quelpa (dired+ :fetcher url :url "https://www.emacswiki.org/emacs/download/dired+.el")
  :after dired
  :ensure nil
  :config
  (setq diredp-hide-details-initially-flag t)
  (setq diredp-hide-details-propagate-flag t)
  (diredp-toggle-find-file-reuse-dir t))

(use-package ranger
  :ensure t
  :init
  (setq ranger-override-dired t)
  (setq ranger-listing-switches "-l --almost-all --no-group --size --human-readable --dereference-command-line")
  :config
  (add-hook 'ranger-mode-hook 'my/ranger-options)
  (add-hook 'ranger-parent-dir-hook 'my/ranger-options-parent)
  (load-file "~/.emacs.d/lisp/functions/ranger/ranger_func.el")
  (load-file "~/.emacs.d/lisp/functions/ranger/ranger_find_functions.el")
  (setq ranger-minimal nil)
  (setq ranger-footer-delay 0)
  (setq ranger-parent-depth 1)
  (setq ranger-show-hidden nil)
  (setq ranger-preview-file nil)
  (setq ranger-dont-show-binary t)
  (setq ranger-max-preview-size 0.1)
  (setq ranger-width-preview 0.40)
  (setq ranger-deer-show-details nil)
  (setq ranger-persistent-sort t)
  (setq ranger-excluded-extensions '("mkv" "iso" "mp4" "bin" "exe" "msi" "pdf" "doc" "docx"))

  (setq ranger-cleanup-eagerly t)
  (setq ranger-cleanup-on-disable t)
  (setq ranger-return-to-ranger t)

  (setq ranger-width-parents 0.20)
  (setq ranger-max-parent-width 0.45)

  (general-create-definer leader
    :prefix "SPC")

  (leader
    :states '(normal visual)
    :keymaps 'override
    "SPC" 'ranger-find-links-dir
    "r" 'ranger)

  (general-define-key
   :keymaps 'ranger-mode-map
   "," 'olivetti-mode
   "<S-return>" 'ranger-find-file-in-workspace
   "<escape>" 'ranger-close
   "<insert>" 'dired-create-empty-file
   "C-j" 'counsel-M-x
   "C-k" 'counsel-find-file
   "C-l" 'ranger-find-links-dir
   "C-n" 'ignore
   "D" 'dired-do-flagged-delete
   "d" 'dired-flag-file-deletion
   "gg" 'ranger-goto-top
   "i" 'ranger-go
   "m" 'my/ranger-toggle-mark
   "tp" 'delete-file
   "<C-return>" 'my/dired-do-find-marked-files
   "C-c <return>" 'dired-do-find-marked-files
   "x" 'diredp-delete-this-file
   "zi" 'ranger-toggle-details
   "C-h" 'hydra-help/body
   "zp" 'ranger-preview-toggle
   "çcm" 'dired-create-directory)

  (general-define-key
   :keymaps 'ranger-mode-map
   :prefix "SPC"
   "f" 'hydra-find-file/body'
   "0" 'delete-window
   "v" 'hydra-more-commands/body
   "z" 'hydra-window/body
   "h" 'split-window-horizontally
   "j" 'my/split-vertically
   "l" 'my/split-right
   "k" 'split-window-below
   ";" 'hydra-text-main/body
   "m" 'hydra-modes/body
   "c" 'hydra-commands/body
   "o" 'hydra-org-mode/body
   "i" 'hydra-org-text-commands/body
   "a" 'hydra-org-clock/body
   "d" 'hydra-quick-commands/body
   "b" 'my/evil-botright
   "q" 'kill-this-buffer
   "y" 'my/term-botright))


(use-package windmove
  :config
  (setq windmove-wrap-around nil)
  (general-nvmap
    :keymaps 'override
    "M-k" 'windmove-up
    "M-h" 'windmove-left
    "M-j" 'windmove-down
    "M-l" 'windmove-right)

  (general-define-key
   :keymaps 'override
   "M-k" 'windmove-up
   "M-h" 'windmove-left
   "M-j" 'windmove-down
   "M-l" 'windmove-right))

(use-package ivy
  :init
  (load-file "~/.emacs.d/lisp/functions/ivy_ignore_buffers.el")
  :ensure t
  :config
  (setq ivy-wrap t)
  (setq ivy-on-del-error-function #'ignore)
  (setq counsel-ag-base-command "ag --nocolor --group -f --skip-vcs-ignores %s")
  (setq ivy-use-virtual-buffers nil)
  (setq ivy-count-format "(%d/%d) ")
  (setq counsel-bookmark-avoid-dired t)
  (setq counsel-find-file-at-point t)
  (setq counsel-outline-display-style 'title)
  (setq counsel-find-file-ignore-regexp (regexp-opt '( "log")))
  (setq counsel-find-file-ignore-regexp nil)
  (setq ivy-extra-directories nil)

  (setq ivy-views '(("{} pcc_book.pdf pcc_notes.org"
		     (horz (file "/home/Documents/Org/Studying/Programming/Python/PCC/pcc_notes/pcc_book.pdf")
			   (file "/home/overlord/PCC/pcc_notes/pcc_notes.org")))))

  (general-unbind 'ivy-minibuffer-map
    :with 'ignore
    [remap windmove-up]
    [remap windmove-left]
    [remap windmove-right])

  (general-unbind 'ivy-minibuffer-map
    :with 'ivy-kill-ring-save
    [remap eyebrowse-next-window-config])

  (general-unbind 'ivy-minibuffer-map
    :with 'ivy-alt-done
    [remap windmove-down])

  (general-define-key
   :keymaps 'ivy-minibuffer-map
   "<insert>" 'clipboard-yank
   "TAB" 'ivy-alt-done
   "M-m" 'ivy-done
   "C-m" 'ivy-done
   "C-c o" 'ivy-kill-ring-save
   [escape] 'abort-recursive-edit
   "M-d" 'ivy-next-line
   "M-u" 'ivy-previous-line
   "C-w" 'evil-delete-backward-word
   "C-u" 'backward-kill-line
   "<XF86Calculator>" 'abort-recursive-edit)

  (general-define-key
   :keymaps 'ivy-mode-map
   "C-c v p" 'ivy-push-view
   "C-c v P" 'ivy-pop-view
   "C-c v v" 'ivy-switch-view)

  (general-nvmap
    :keymaps 'ivy-mode-map
    "M-d" 'ivy-switch-buffer)

  (ivy-mode 1))

(use-package counsel
  :ensure t
  :config
  (setq counsel-fzf-cmd "fzf -f \"%s\"")
  (general-unbind '(normal visual insert)
    :with 'counsel-M-x
    "C-j")
  (general-nvmap
    :keymaps 'override
    "C-k" 'counsel-find-file)

  (general-unbind 'ivy-minibuffer-map
    :with 'minibuffer-keyboard-quit
    [remap counsel-yank-pop])

  (general-define-key
   :keymaps 'counsel-mode-map
   "M-y" 'counsel-yank-pop)

  (counsel-mode 1))

(use-package eyebrowse
;; :defer t
  :ensure t
  :config
  (setq eyebrowse-new-workspace nil)
  (setq eyebrowse-wrap-around nil)
  (setq eyebrowse-new-workspace t)
  (setq eyebrowse-mode-line-style 'smart)
  (setq eyebrowse-switch-back-and-forth nil)
  (setq eyebrowse-mode-line-left-delimiter " [ ")
  (setq eyebrowse-mode-line-right-delimiter " ]  ")
  (setq eyebrowse-mode-line-separator " | ")
  (general-nvmap
    :prefix "SPC"
    :keymaps 'override
    "V" 'eyebrowse-create-window-config
    "x" 'eyebrowse-close-window-config
    "1" 'eyebrowse-switch-to-window-config-1
    "2" 'eyebrowse-switch-to-window-config-2
    "3" 'eyebrowse-switch-to-window-config-3
    "4" 'eyebrowse-switch-to-window-config-4
    "5" 'eyebrowse-switch-to-window-config-5)

  (general-define-key
   :keymaps 'override
   "M-w" 'eyebrowse-next-window-config
   "M-q" 'eyebrowse-prev-window-config
   "M-1" 'eyebrowse-switch-to-window-config-1
   "M-2" 'eyebrowse-switch-to-window-config-2
   "M-3" 'eyebrowse-switch-to-window-config-3
   "M-4" 'eyebrowse-switch-to-window-config-4
   "M-5" 'eyebrowse-switch-to-window-config-5)

  (general-nvmap
    :keymaps 'override
    "M-1" 'eyebrowse-switch-to-window-config-1
    "M-2" 'eyebrowse-switch-to-window-config-2
    "M-3" 'eyebrowse-switch-to-window-config-3
    "M-4" 'eyebrowse-switch-to-window-config-4
    "M-5" 'eyebrowse-switch-to-window-config-5)

  (general-unbind 'eyebrowse-mode-map
    "C-c C-w")
  (eyebrowse-mode t))

(use-package ace-window
:defer t
  :ensure t
  :init
  (setq aw-background nil)
  (custom-set-faces
   '(aw-leading-char-face ((t (:foreground "red" :height 1.8)))))
  (setq aw-keys '(?h ?j ?k ?l ?ç))
  (setq aw-dispatch-always t)
  :config
  (general-define-key
   "M-ç" 'ace-window))

(use-package winner
  :defer 3
  :ensure nil
  :config

  (general-define-key
   :keymaps 'override
   "M--" 'winner-undo
   "M-=" 'winner-redo)

  (general-define-key
   :states '(visual normal insert)
   "M--" 'winner-undo
   "M-=" 'winner-redo)

  (winner-mode 1))

(use-package hydra
  :ensure t
  :config
  (load-file "~/.emacs.d/hydras.el")
  (load-file "~/.emacs.d/java_hydras.el")
  (general-nvmap
    :keymaps 'override
    :prefix "SPC"
    "f" 'hydra-find-file/body'
    "0" 'delete-window
    "v" 'hydra-more-commands/body
    "z" 'hydra-window/body
    "h" 'split-window-horizontally
    "j" 'my/split-vertically
    "l" 'my/split-right
    "k" 'split-window-below
    ";" 'hydra-text-main/body
    "m" 'hydra-modes/body
    "c" 'hydra-commands/body
    "o" 'hydra-org-mode/body
    "i" 'hydra-org-text-commands/body
    "a" 'hydra-org-clock/body
    "d" 'hydra-quick-commands/body
    "b" 'my/evil-botright
    "q" 'kill-this-buffer
    "y" 'my/term-botright)

  (general-define-key
   "C-c l" 'hydra-python-mode/body
   "C-;" 'hydra-text-main/body)

  (general-nvmap
    "C-o" 'hydra-find-file/body)

  (general-imap
    :keymaps 'override
    "C-o" 'hydra-find-file/body)

  (general-define-key
   "C-o" 'hydra-find-file/body)

  (general-define-key
   :keymaps 'override
   "C-h" 'hydra-help/body
   ;; "C-c u" 'counsel-org-capture
   "M-;" 'hydra-yasnippet/body
   "C-s" 'hydra-search/body
   "<f1>" 'hydra-help/body
   "C-M-h" 'hydra-help/body
   "C-," 'hydra-find-emacs-files/body))

(use-package ivy-hydra
:after hydra
:ensure t)

(use-package targets
  :load-path "~/.emacs.d/lisp/"
  :config
  (targets-setup t))

(use-package disable-mouse
  :ensure t
  :config
  (setq disable-mouse-mode-global-lighter nil)
  (mapc #'disable-mouse-in-keymap
	(list evil-motion-state-map
	      evil-normal-state-map
	      evil-visual-state-map
	      evil-insert-state-map))
  (global-disable-mouse-mode +1))

(use-package wordnut
  :defer t
  :ensure t)

(use-package adaptive-wrap
  :after wordnut
  :ensure t)


;; ;; (package-install-file "~/.emacs.d/lisp/buffer-expose/buffer-expose.el")
;; (use-package buffer-expose
;;   :ensure t
;;   :config
;;   (load-file "~/.emacs.d/lisp/buffer-expose/buffer-expose-settings.el")

;;   (general-define-key
;;    :keymaps 'buffer-expose-mode-map
;;    "<s-tab>"     'buffer-expose
;;    "<C-tab>"     'buffer-expose-no-stars
;;    "C-c <C-tab>" 'buffer-expose-current-mode
;;    "C-c C-d"     'buffer-expose-dired-buffers
;;    "C-c C-*"     'buffer-expose-stars)

;;   (general-define-key
;;    :keymaps 'buffer-expose-grid-map
;;    "h" 'buffer-expose-left-window
;;    "k" 'windmove-up
;;    "j" 'windmove-down
;;    "l" 'buffer-expose-right-window
;;    "m" 'buffer-expose-choose)

;;   (buffer-expose-mode 1))

(use-package sr-speedbar
  :defer t
  :init
(setq sr-speedbar-right-side nil)
  :ensure t)

(use-package auto-compile
  :defer t
  :ensure t
  :config
  (setq auto-compile-display-buffer nil)
  (setq auto-compile-mode-line-counter t)
  (setq load-prefer-newer t)
  (auto-compile-on-load-mode)
  (auto-compile-on-save-mode))

(use-package restart-emacs
:defer t
:ensure t
:ensure t)

(use-package which-key
  :defer t
  :ensure t
  :config
  (load-file "~/.emacs.d/lisp/functions/which_key_replacements.el")
  (load-file "~/.emacs.d/lisp/functions/which_key_replacements_projectile.el")
  (setq which-key-special-keys '("SPC" "TAB" "RET" "ESC" "DEL" "C" "M"))
  (setq which-key-max-display-columns nil)
  (setq which-key-add-column-padding 4)
  (setq which-key-show-remaining-keys t)
  (setq which-key-allow-evil-operators nil)
  (setq which-key--god-mode-support-enabled t)
  (setq which-key-lighter " wk")
  (setq which-key-max-description-length 15)
  (setq which-key-enable-extended-define-key nil)
  (setq which-key-idle-delay 0.2)
  (setq which-key-idle-secondary-delay 0)
  (setq which-key-use-C-h-commands t)
  (setq which-key-is-verbose t)
  (general-define-key
   :keymaps 'which-key-C-h-map
   "C-n" nil
   "C-l" 'which-key-abort
   "C-p" nil))

(use-package elmacro
  :defer t
  :ensure t
  :config
  (general-define-key
   "C-c m l m" 'elmacro-show-last-macro
   "C-c m l c" 'elmacro-show-last-commands))

(use-package evil-swap-keys
:defer t
:ensure t)

(use-package super-save
  :ensure t
  :config
  (setq super-save-triggers
	'(switch-to-buffer
	  other-window
	  windmove-up
	  windmove-down
	  windmove-left
	  windmove-right
	  next-buffer
	  previous-buffer
	  evil-window-prev
	  evil-window-next
	  eyebrowse-next-window-config
	  eyebrowse-prev-window-config
	  eyebrowse-create-window-config
	  my/unpop-shell-other-window))
  (setq super-save-auto-save-when-idle t)
  (setq super-save-idle-duration 180)
  (setq auto-save-default nil)
  (super-save-mode +1))

(use-package engine-mode
  :defer t
  :ensure t
  :config
  (defengine google "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s")
  (defengine devdocs-io "https://devdocs.io/#q=%s")
  (defengine emacs-wiki "https://duckduckgo.com/?q=%s site:emacswiki.org")
  (defengine github "https://github.com/search?ref=simplesearch&q=%s")
  (defengine stack-overflow "https://stackoverflow.com/search?q=%s")
  (defengine reddit "https://old.reddit.com/search?q=%s")
  (defengine dic-informal "https://www.dicionarioinformal.com.br/sinonimos/%s")
  (defengine michaelis "https://michaelis.uol.com.br/moderno-portugues/busca/portugues-brasileiro/%s")
  (defengine asimov-wikia "http://asimov.wikia.com/wiki/Special:Search?query=%s")
  (defengine wiki-en "https://en.wikipedia.org/wiki/%s")
  (defengine wiki-pt "https://pt.wikipedia.org/wiki/%s")
  (defengine plato "https://plato.stanford.edu/search/searcher.py?query=%s")
  (defengine translate "https://translate.google.com/?source=osdd#view=home&op=translate&sl=auto&tl=pt&text=%s")
  (defengine urban-dictionary "https://www.urbandictionary.com/define.php?term=%s")
  (engine-mode t))




(use-package beacon
  :defer t
  :init
  (add-hook 'beacon-dont-blink-predicates
	    (lambda () (bound-and-true-p centered-cursor-mode)))

  :ensure t
  :config
  ;; (setq beacon-dont-blink-commands '(next-line previous-line forward-line))
  (setq beacon-dont-blink-commands '(find-packs find-keys find-misc find-functions find-macros find-hydras find-file counsel-find-file))
  (setq beacon-blink-when-point-moves-vertically nil)
  (setq beacon-blink-when-point-moves-horizontally nil)
  (setq beacon-blink-when-focused t)
  (setq beacon-blink-duration 0.2)
  (setq beacon-blink-delay 0.2)
  (setq beacon-blink-when-window-scrolls t)
  (setq beacon-blink-when-window-changes t)
  (beacon-mode 1))

(use-package vertigo
  :defer 2
  :ensure t
  :config
  (general-nvmap
    "," 'vertigo-visual-jump-down
    "." 'vertigo-visual-jump-up)
  (setq vertigo-cut-off 3)
  (setq vertigo-home-row '(?a ?s ?d ?f ?g ?h ?j ?k ?l ?o)))

;; (setq vertigo-home-row '(?q ?w ?e ?r ?t ?y ?u ?i ?o ?p)

(use-package god-mode
:defer t
:ensure t)

(use-package evil-god-state
  :after god-mode
  :ensure t
  :config
  ;; (general-nvmap
  ;;   :keymaps 'override
  ;;   "," 'evil-execute-in-god-state)
  (evil-define-key 'god global-map [escape] 'evil-god-state-bail))

(use-package bug-hunter
:defer t
:ensure t)

(use-package recursive-narrow
  :ensure t)

(use-package caps-lock
:defer t
:ensure t)

(use-package aggressive-fill-paragraph
:defer t
:ensure t)

(use-package helpful
  :defer nil
  :ensure t
  :init
  (add-hook 'helpful-mode-hook 'line-numbers)
  (add-hook 'helpful-mode-hook 'hl-line-mode)
  :config
  (setq helpful-max-buffers 2)

  (general-nmap
    :keymaps 'helpful-mode-map
    "<escape>" 'evil-ex-nohighlight)

  (general-unbind 'helpful-mode-map
    :with 'quit-window
    [remap my/quiet-save-buffer])

  (general-define-key
   :keymaps 'helpful-mode-map
   "M-p" 'my/paragraph-backwards
   "M-n" 'my/paragraph-forward))

(use-package benchmark-init
  :ensure t
  :init
  (add-hook 'after-init-hook 'benchmark-init/deactivate)
  :config
  (general-unbind 'benchmark-init/tree-mode-map
    :with 'quit-window
    [remap my/quiet-save-buffer])

  (general-unbind 'benchmark-init/tabulated-mode-map
    :with 'quit-window
    [remap my/quiet-save-buffer]))

(use-package filesets
  :init
  (load-file "~/.emacs.d/lisp/functions/filesets.el" )
  :ensure nil
  :config
  (filesets-init))

(use-package c-mode
  :defer t
  :ensure cc-mode
  :init
  (setq-default c-default-style "linux")
  (add-hook 'c-mode-hook 'my/prog-mode-hooks)
  :config
  (defun my/execute-c-program ()
    (interactive)
    (defvar foo)
    (setq foo (concat "gcc " (buffer-name) " && ./a.out" ))
    (shell foo))

  (defun my/execute-c-program-shell ()
    (interactive)
    (progn
      (prelude-copy-file-name-to-clipboard)
      (shell)
      (insert "sp")
      (comint-send-input)
      (insert "gcc ")
      (yank)
      (insert " && ./a.out")
      (comint-send-input)
      (sit-for 0.3)
      (comint-clear-buffer)))

  (general-imap
    :keymaps 'c-mode-map
    "<M-return>" 'indent-buffer
    "C-;" 'my/c-semicolon-del-blank-lines)
  (general-nvmap
    :keymaps 'c-mode-map
    "zk" 'flycheck-previous-error
    "zj" 'flycheck-next-error
    "$" 'c-end-of-statement
    "0" 'c-beginning-of-statement
    "M-v" 'c-goto-vars
    "<C-backspace>" 'xah-clean-empty-lines
    "<escape>" 'my/quiet-save-buffer-c
    "<M-return>" 'indent-buffer
    "<backspace>" 'hydra-c-mode/body))

(use-package shell
  :defer t
  :ensure nil
  :init
  (setq comint-terminfo-terminal "ansi")
  (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
  (add-hook 'shell-mode-hook 'my/shell-mode-hooks)
  (add-hook 'shell-mode-hook
	    (lambda ()
	      (face-remap-set-base 'comint-highlight-prompt :inherit nil)))
  :config
  (general-imap
    :keymaps 'shell-mode-map
    "C-u" 'comint-kill-input
    "C-p" 'comint-previous-input
    "C-n" 'comint-next-input
    "C-c u" 'universal-argument
    "C-l" 'comint-clear-buffer
    "M-u" 'my/shell-go-up
    "C-t" 'my/shell-go-back
    "C-c ;" 'kill-buffer-and-window
    "C-/" 'my/shell-clear-and-list
    "M-p" 'my/shell-go-previous
    "C-c j" 'my/evil-shell-bottom)

  (vmap
    :keymaps 'shell-mode-map
    "C-;" 'my/yank-shell-to-notes)

  (nvmap
    :keymaps 'shell-mode-map
    "C-c u" 'universal-argument
    "C-l" 'comint-clear-buffer
    "M-u" 'my/shell-go-up
    "C-t" 'my/shell-go-back
    "C-c ;" 'kill-buffer-and-window
    "M-p" 'my/shell-go-previous
    "C-/" 'my/shell-clear-and-list
    "C-c ;" 'kill-buffer-and-window
    "C-j" 'counsel-M-x)

  (general-define-key
   :keymaps 'shell-mode-map
   "C-j" 'counsel-M-x
   "M-u" 'my/shell-go-up
   "C-u" 'comint-kill-input
   "<M-return>" nil
   "C-;" 'kill-buffer-and-window
   "C-t" 'my/shell-go-back
   "C-c 0" 'my/jump-to-register-91
   "M-e" 'counsel-shell-history
   "C-n" 'comint-next-input
   "C-l" 'comint-clear-buffer
   "C-c u" 'universal-argument
   "M-p" 'my/shell-go-previous
   "C-p" 'comint-previous-input
   "C-c j" 'my/evil-shell-bottom)

  (general-unbind 'shell-mode-map
    :with 'ignore
    [remap my/quiet-save-buffer])

  (general-unbind 'shell-mode-map
    :with nil
    [remap hydra-text-main/body]))

(use-package eshell
  :defer t
  :ensure nil
  :init
  (setq eshell-banner-message "")
  (setq comint-terminfo-terminal "ansi")
  (add-hook 'eshell-mode-hook 'my/load-eshell-keybindings)
  (defun my/load-eshell-keybindings ()
    (interactive)
    (load-file "~/.emacs.d/lisp/functions/eshell_keybindings.el")))

(use-package calc
:defer t
  :ensure nil
  :config

  (general-vmap
    :keymaps 'override
    "<XF86Calculator>" 'my/calc-region
    "X" 'my/calc-region)

  (general-nmap
    :keymaps 'override
    "C-c p" 'quick-calc
    "<XF86Calculator>" 'quick-calc)

  (general-nvmap
    :keymaps 'calc-mode-map
    "C-l" 'calc-reset
    "<escape>" 'calc-quit))

(use-package compilation-mode
  :defer t
  :ensure nil
  :config
  (general-unbind 'compilation-mode-map
    :with 'ignore
    [remap my/quiet-save-buffer]))

(use-package conf-mode
  :defer t
  :ensure nil
  :config
  (general-define-key
   :keymaps 'conf-mode-map
   "M-p" 'my/paragraph-backwards
   "M-n" 'my/paragraph-forward))

(use-package with-editor
  :defer t
  :ensure nil
  :config
  (general-define-key
   :keymaps 'with-editor-mode-map
   "<C-return>" 'with-editor-finish
   "<M-return>" 'with-editor-cancel))

;; (use-package desktop
;;   :ensure nil
;;   :init
;;   (setq desktop-load-locked-desktop nil)
;;   (setq desktop-save t)
;;   (setq desktop-dirname "~/.emacs.d/var/desktop")
;;   (setq desktop-auto-save-timeout 30)
;;   :config
;;   (desktop-save-mode t))

(use-package text-mode
  :init
  (add-hook 'text-mode-hook 'my/text-hooks)
  (defun my/text-hooks ()
    (interactive)
    (electric-pair-local-mode 1)
    (subword-mode 1)
    (tab-jump-out-mode 1)
    (company-mode 1))
  :ensure nil
  :config

  (defun prose-enable ()
    (interactive)
    (olivetti-mode 1)
    (flyspell-mode 1)
    (auto-capitalize-mode 1)
    (tab-jump-out-mode 1)
    (company-mode 1)
    (hl-sentence-mode 1)
    (electric-operator-mode 1)
    (wc-mode 1)
    (message "prose on"))

  (general-nvmap
    :keymaps 'text-mode-map
    ;; "ç" 'flyspell-goto-next-error
    ;; "C-ç" 'ispell-word
    "RET" 'hydra-spell/body)
  (general-define-key
   :keymaps 'text-mode-map
   "C-c C-k" 'pdf-annot-edit-contents-abort
   "M-p" 'my/paragraph-backwards
   "M-n" 'my/paragraph-forward))

(use-package Custom-mode
  :defer t
  :ensure nil
  :config
  (general-nvmap
    :keymaps 'custom-mode-map
    "q" 'Custom-buffer-done)
  (general-nvmap
    :keymaps 'custom-mode-map
    "C-j" 'counsel-M-x
    "M-p" 'my/paragraph-backwards
    "M-n" 'my/paragraph-forward)
  (general-define-key
   :keymaps 'custom-mode-map
   "C-j" 'counsel-M-x
   "M-p" 'my/paragraph-backwards
   "M-n" 'my/paragraph-forward))

(use-package hippie-exp
:defer t
  :ensure nil
  :config
  (general-imap
    "M-/" 'hippie-expand))

(use-package term
:defer t
  :init
  (defun my/term-mode-hooks ()
    (interactive)
    (beacon-mode 1)
    (subword-mode 1)
    (dimmer-mode 1)
    (smartparens-mode 1)
    (tab-jump-out-mode 1)
    (electric-pair-local-mode 1))

  (add-hook 'term-load-hook 'evil-insert-state)
  (add-hook 'term-mode-hook 'my/term-mode-hooks)
  (setq comint-terminfo-terminal "ansi")
  :defer t
  :ensure nil
  :config
  (general-unbind 'term-mode-map
    :with 'ignore
    [remap my/quiet-save-buffer]
    [remap evil-emacs-state])

  (general-unbind 'term-raw-map
    :with 'term-send-raw
    [remap delete-backward-char]
    [remap evil-delete-backward-word]
    [remap delete-backward-word]
    [remap evil-paste-from-register]
    [remap backward-kill-word])

  (general-define-key
   :keymaps 'term-mode-map
   "C-j" 'counsel-M-x
   "C-l" 'term-send-raw
   "C-;" 'kill-buffer-and-window
   "C-p" 'term-send-raw
   "C-n" 'term-send-raw
   "C-a" 'term-send-raw
   "C-e" 'term-send-raw
   "C-k" 'kill-visual-line
   "C-u" 'term-send-raw
   "C-w" 'term-send-raw)

  (general-imap
    :keymaps 'term-mode-map
    "C-l" 'term-send-raw
    "C-;" 'kill-buffer-and-window
    "C-p" 'term-send-raw
    "C-n" 'term-send-raw
    "C-a" 'term-send-raw
    "C-e" 'term-send-raw
    "C-k" 'kill-visual-line
    "C-u" 'term-send-raw
    "C-w" 'term-send-raw)

  (general-nvmap
    :keymaps 'term-mode-map
    "C-j" 'counsel-M-x
    "C-l" 'term-send-raw
    "C-p" 'term-send-raw
    "C-n" 'term-send-raw
    "C-;" 'kill-buffer-and-window
    "C-u" 'term-send-raw
    "C-w" 'term-send-raw)

  (general-imap
    :keymaps 'term-raw-map
    "C-;" 'kill-buffer-and-window
    "M-r" nil))

(use-package abbrev
  :defer t
  :ensure nil
  :config
(setq-default abbrev-mode t)
(setq save-abbrevs 'silently)
;; (setq abbrev-file-name "~/.emacs.d/etc/abbrev_defs")
(general-define-key
 :keymaps 'edit-abbrevs-map
 "<C-return>" 'abbrev-edit-save-close)
  (general-nvmap
    :keymaps 'edit-abbrevs-mode-map
    [escape] 'abbrev-edit-save-buffer
    "q" 'kill-this-buffer))

(use-package prog-mode
  :defer t
  :ensure nil
  :init
  (add-to-list 'auto-mode-alist '("\\por\\'" . prog-mode))
  (add-hook 'prog-mode-hook 'my/prog-mode-hooks)
  :config
  (defun my/prog-mode-hooks ()
    (interactive)
    (electric-operator-mode 1)
    (highlight-operators-mode 1)
    (highlight-numbers-mode 1)
    (subword-mode 1)
    (company-mode 1)
    (hl-line-mode 1)
    (smartparens-mode 1)
    (tab-jump-out-mode 1)
    (flycheck-mode 1)
    (electric-pair-local-mode 1)
    (yas-minor-mode 1)
    (highlight-indent-guides-mode 1))

  (general-imap
    :keymaps 'prog-mode-map
    "<M-return>" 'indent-buffer)
  (general-nvmap
    :keymaps 'prog-mode-map
    "RET" 'hydra-prog-mode/body)

  (general-define-key
   :keymaps 'prog-mode-map
   "M-p" 'my/paragraph-backwards
   "M-n" 'my/paragraph-forward
   "<C-return>" 'hydra-prog-mode/body
   ;; "C-c u" 'executable-interpret
   "<M-return>" 'indent-buffer))

(use-package help-mode
  :defer 1
  :ensure nil
  :init
  (add-hook 'help-mode-hook 'line-numbers)
  (add-hook 'help-mode-hook 'hl-line-mode)
  :config

  (setq help-window-select t)

  (general-nmap
    :keymaps 'help-mode-map
    "<escape>" 'evil-ex-nohighlight)
  (general-nvmap
    :keymaps 'help-mode-map
    "M-p" 'my/paragraph-backwards
    "M-n" 'my/paragraph-forward
    "gs" 'evil-ex-nohighlight)
  (general-nmap
    :keymaps 'help-mode-map
    "<escape>" 'evil-ex-nohighlight)
  (general-define-key
   :keymaps 'help-mode-map
   "M-p" 'my/paragraph-backwards
   "M-n" 'my/paragraph-forward
   "gs" 'evil-ex-nohighlight))

(use-package man
  :defer t
  :ensure nil
  :init
  (add-hook 'Man-mode-hook 'my/man-internal)

  (defun my/man-internal ()
    (interactive)
    (other-window -1)
    (delete-other-windows))

  :config
  (set-face-attribute 'Man-overstrike nil :inherit 'bold :foreground "orange red")
  (set-face-attribute 'Man-underline nil :inherit 'underline :foreground "forest green")

  (general-nvmap
    :keymaps 'Man-mode-map
    "q" 'Man-kill
    "RET" 'my/push-button
    "C-n" 'my/Man-next-section
    "M-n" 'my/paragraph-forward
    "M-p" 'my/paragraph-backwards
    "C-p" 'my/Man-previous-section
    "C-c RET" 'Man-follow-manual-reference)

  (general-define-key
   :keymaps 'Man-mode-map
   "<f9>" 'Man-kill
   "q" 'Man-kill)

  (general-unbind 'Man-mode-map
    :with 'counsel-M-x
    [remap Man-next-section])

  (general-unbind 'Man-mode-map
    :with 'my/push-button
    [remap push-button])

  (general-unbind 'Man-mode-map
    :with 'evil-ex-nohighlight
    [remap my/quiet-save-buffer])

  (general-unbind 'Man-mode-map
    :with 'ignore
    [remap evil-insert]))

(use-package scroll-bar
  :defer 1
  :ensure nil
  :config
  (horizontal-scroll-bar-mode -1)
  (scroll-bar-mode -1))

(use-package tool-bar
  :defer 1
  :ensure nil
  :config
  (setq tool-bar-mode nil)
  (tool-bar-mode -1))

(use-package eldoc
  :defer 1
  :ensure nil
  :config
  (global-eldoc-mode -1))

(use-package menu-bar
  :defer 1
  :ensure nil
  :config
  (menu-bar-mode -1))

(use-package paren
  :defer 1
  :ensure nil
  :config
  (show-paren-mode 1))

(use-package frame
  :defer 1
  :ensure nil
  :config
  (blink-cursor-mode 0))

(use-package autorevert
  :defer 1
  :ensure nil
  :config
  (global-auto-revert-mode 1))

(use-package mouse
  :defer 1
  :ensure nil
  :config
  (setq mouse-yank-at-point t))

;; (use-package paragraphs
;;   :defer 1
;;   :ensure nil
;;   :config
;;   (setq sentence-end-double-space nil)
;;   (setq sentence-end nil))
  (setq sentence-end-double-space nil)
  (setq sentence-end nil)

(use-package hl-line
  :defer 1
  :ensure nil
  :config
  (setq global-hl-line-mode nil))

(use-package simple
  :ensure nil
  :config
  (setq save-interprogram-paste-before-kill nil)
  (setq backward-delete-char-untabify-method 'hungry)
  (setq kill-whole-line t)

  (general-unbind 'special-mode-map
    :with 'ignore
    [remap my/quiet-save-buffer])

  (general-define-key
   :keymaps 'messages-buffer-mode-map
   "M-d" 'ivy-switch-buffer)

  (general-unbind 'messages-buffer-mode-map
    :with 'ignore
    [remap my/quiet-save-buffer])

  (global-visual-line-mode t))

(use-package warning
  :defer 1
  :ensure nil
  :config
  (setq warning-minimum-level :emergency))

(use-package custom
  :defer 1
  :ensure nil
  :config
  (setq custom-safe-themes t))

(use-package comint
  :defer 1
  :ensure nil
  :config
  (setq comint-prompt-read-only t))

(use-package sh-script
  :defer 1
  :ensure nil
  :config
  (add-to-list 'auto-mode-alist '("\\.inputrc\\'" . sh-mode))
  (add-to-list 'auto-mode-alist '("\\.bash_aliases\\'" . sh-mode)))

(use-package files
  :defer 1
  :ensure nil
  :init
  (add-hook 'before-save-hook  'force-backup-of-buffer)
  :config
  (setq save-silently t)
  (setq delete-old-versions -1)
  (add-to-list 'find-file-hook 'line-numbers)

  (setq version-control t	        ;; Use version numbers for backups
	kept-new-versions 16		;; Number of newest versions to keep
	kept-old-versions 2		;; Number of oldest versions to keep
	delete-old-versions t		;; Do not aks to delete excess backup versions
	backup-by-copying-when-linked t	;; Copy linked files, don't rename.
	backup-directory-alist
	'(("." . "~/.emacs.d/backups"))

	vc-make-backup-files t
	auto-save-visited-mode t
	auto-save-file-name-transforms `((".*" "~/.emacs.d/auto-save-list/" t))
	auto-save-default t)

  (defun force-backup-of-buffer ()
    (let ((buffer-backed-up nil))
      (backup-buffer)))

  (setq large-file-warning-threshold nil)
  (setq buffer-save-without-query t)
  (setq find-file-suppress-same-file-warnings t)
  )

(use-package files
  :defer 1
  :ensure nil
  :config
  (setq bookmark-save-flag 1))

(use-package vc-mode
  :defer nil
  :ensure nil
  :init
  (setq vc-follow-symlinks t))

(use-package register
  :defer 1
  :ensure nil
  :config
(setq register-preview-delay 0.15))

(use-package doc-view
  :defer t
  :ensure nil
  :config
  (setq doc-view-continuous t))

(use-package loaddefs
  :defer 1
  :ensure nil
  :config
  (setq browse-url-generic-program "google-chrome")
  (setq browse-url-browser-function 'browse-url-generic))

(use-package focus
  :defer t
  :ensure t)

(use-package delight
  :ensure t
  :config
  (delight 'sh-mode " sh " "Shell-script[bash]")
  (delight 'org-mode " org" "Org")
  (delight 'special-mode " special" "special")
  (delight 'message-mode " messages" "Messages")
  (delight 'markdown-mode " md" "Markdown")
  (delight 'fundamental-mode " fund" "Fundamental")
  (delight 'web-mode " web" "Web")
  (delight 'python-mode " py" " Python")
  (delight 'emacs-lisp-mode " elisp" "Emacs-Lisp")
  (delight 'lisp-interaction-mode " lisp int" "Lisp Interaction"))

(use-package smart-mode-line
  :ensure t
  :defer 0.5
  :config
  (setq sml/line-number-format " %3l")
  (setq sml/name-width '20)
  (setq sml/theme 'respectful)
  (setq sml/show-file-name t)
  (setq sml/no-confirm-load-theme t)
  (setq sml/directory-truncation-string " ")
  (setq sml/replacer-regexp-list
	`((,(concat "^" (if (boundp 'org-directory)
			    (regexp-quote org-directory) "~/org/")) ":Org:")
	  ("^~/\\.emacs\\.d/elpa/" ":ELPA:")
	  ("^/home/Documents/Org" ":org:")
	  ("^/home/Documents/Study/Adventure" ":adv:")
	  ("^/home/mrbig/Documents/Study" ":study:")
	  ("^/home/Documents/Ebooks/IT" ":it:")
	  ("^/home/Documents/Ebooks/" ":bks:")
	  ("^~/Documents/" ":docs:")
	  ("^/home/maps" ":maps:")
	  ("^~/\\.emacs\\.d/" ":emacs:")
	  ("^~\\.config/" ":config:")
	  ("^/home/dotfiles/emacs/emacs_default/" ":emacs:")
	  ("^/home/dotfiles/scripts" ":scripts:")
	  ("^/home/dotfiles/" ":dotfiles:")
	  ("^~/Dropbox/" ":DB:")
	  ("^/sudo:.*:" ":SU:")
	  ("^:\\([^:]*\\):Documento?s/" ":\\1/Doc:")
	  ("^~/[Gg]it/" ":Git:")
	  ("^~/[Gg]it[Hh]ub/" ":Git:")
	  ("^~/[Gg]it\\([Hh]ub\\|\\)-?[Pp]rojects/" ":Git:")))

  (setq rm-blacklist '( " (*)" " hl-p"  " ivy" " counsel" " EvilOrg" " rsi"
			" Undo-Tree" " Wrap" " Abbrev"
			" ACap" " Ind" " yas" " ," " s-/"
			" company" " es" " SP" " h-i-g" " _+_" " PDFView"
			" Helpful" " :master" " Shell-script" " P/???"
			" Flymake[0 0]" " Flymake:Wait[0 0]" " Elpy" " Pabbrev" " Olv" " Fly" " WE" " Fill" " super-save" " Emmet"))
  (sml/setup))

;; (use-package smart-mode-line-atom-one-dark-theme
;;   :ensure t)

;; (use-package smart-mode-line-powerline-theme
;;   :ensure t)

(use-package dimmer
  :unless window-system
  :defer t
  :ensure t
  :init
  (setq dimmer-fraction 0.2))

(use-package noctilux-theme
:ensure t
:init
(setq custom-safe-themes t)
(load-theme 'noctilux))

(use-package poet-theme
  :defer t
  :ensure t)

(use-package elisp-mode
  :defer t
  :ensure nil
  :init
  (add-hook 'lisp-interaction-mode-hook 'line-numbers))

(use-package indent-tools
  :defer t
  :ensure t)

(use-package quickrun
  :defer t
  :ensure t
  :config
  (general-unbind 'quickrun--mode-map
    :with 'quit-window
    [remap my/quiet-save-buffer])
  (general-unbind 'compilation-mode-map
    :with 'quit-window
    [remap my/quiet-save-buffer]))

(use-package cc-mode
  :ensure nil
  :init
  (add-hook 'java-mode-hook
	    (lambda ()
	      (c-set-style "linux")
	      (lsp)))
  :config
  (general-nvmap
    :keymaps 'java-mode-map
    "RET" 'hydra-java-mode/body))

;; (use-package eclim
;;   :defer t
;;   :ensure t
;;   :init
;;   ;; (setq eclimd-autostart nil)
;;   (setq eclimd-wait-for-process t)
;;   (add-hook 'eclim-mode-hook 'company-emacs-eclim-setup)
;;   (custom-set-variables
;;    '(eclim-eclipse-dirs '("~/maps/eclipse"))
;;    '(eclim-executable "~/.p2/pool/plugins/org.eclim_2.8.0/bin/eclim")
;;    '(eclim-executable "~/.p2/pool/plugins/org.eclim_2.8.0/bin/eclim")
;;    '(eclimd-default-workspace "~/Java/default-workspace"))
;;   :config
;;   (eclim-mode 1))

;; (use-package company-emacs-eclim
;;  :defer t
;;   :ensure t)

(use-package lsp-java
:defer t
:ensure t)

(use-package lsp-mode
  :defer t
  :ensure t)

(use-package company-lsp
  :defer t
  :ensure t)

(use-package lsp-ui
  :defer t
  :init
  (setq lsp-ui-sideline-delay 3)
  (setq lsp-ui-sideline-ignore-duplicate t)
  (setq lsp-ui-sideline-show-hover t)
  (setq lsp-ui-sideline-show-symbol 't)
  (setq lsp-ui-sideline-show-diagnostics 't)
  (setq lsp-ui-sideline-show-code-actions 't)
  (setq lsp-ui-sideline-show-hover 't)
  (setq lsp-ui-doc-max-width 150)
  (setq lsp-ui-doc-max-height 30)
  :ensure t)

(use-package lsp-java
  :ensure t
  :after lsp
  :init
  (setq lsp-java-workspace-dir "~/Java/.workspace")
  (setq lsp-java-workspace-cache-dir "~/Java/.workspace/.cache/"))

(use-package dap-mode
  :ensure t
  :after lsp-mode
  :config
  (dap-mode t)
  (dap-ui-mode t))

(use-package dap-java
  :after (lsp-java))


(use-package elpy
  :unless window-system
  :defer t
  :ensure t
  :init
  ;; (setq elpy-autodoc-delay 2)
  (setq python-shell-completion-native-enable t)
  (setq elpy-rpc-python-command "/usr/bin/python3")
  (setq python-shell-interpreter "/usr/bin/python3")
  (add-hook 'elpy-mode-hook (lambda () (highlight-indentation-mode -1)))
  (add-hook 'elpy-mode-hook (lambda () (elpy-shell-toggle-dedicated-shell 1)))
  :config
  (general-unbind 'elpy-mode-map
    :with 'ignore
    [remap elpy-shell-send-statement-and-step])
  (elpy-enable))

(use-package blacken
  :unless window-system
  :defer t
  :ensure t
  :config
  (setq blacken-line-length 79))

(use-package pyenv-mode
  :unless window-system
  :after python
  :defer t
  :ensure t)

(use-package python
  :defer t
  :ensure nil
  :init
  (setq python-indent-offset 4)
  (add-hook 'python-mode-hook 'my/python-mode-hooks)
  (add-hook 'python-mode-hook #'evil-swap-keys-swap-double-single-quotes)
  (add-hook 'python-mode-hook #'evil-swap-keys-swap-colon-semicolon)
  ;; (remove-hook 'python-mode-hook #'evil-swap-keys-swap-number-row)
  (add-hook 'inferior-python-mode-hook 'my/inferior-python-mode-hooks)

  (defun my/python-mode-hooks ()
    (interactive)
    (hl-line-mode 1)
    (my/company-idle-zero-prefix-two)
    ;; (blacken-mode 1)
    (flycheck-mode 1)
    (aggressive-fill-paragraph-mode 1)
    (highlight-numbers-mode 1)
    (electric-operator-mode 1)
    (rainbow-delimiters-mode 1)
    (elpy-mode 1))

  (defun my/inferior-python-mode-hooks ()
    (interactive) (line-numbers)
    (tab-jump-out-mode 1)
    (subword-mode 1)
    (my/company-idle-zero-prefix-one)
    (electric-operator-mode 1)
    (highlight-numbers-mode 1))

  :config

  (general-define-key
   :keymaps 'inferior-python-mode-map
   "M-e" 'counsel-shell-history
   "C-c j" 'my/evil-shell-bottom
   "C-c u" 'universal-argument
   "C-u" 'comint-kill-input
   "C-l" 'comint-clear-buffer
   "C-j" 'counsel-M-x
   "C-;" 'kill-buffer-and-window
   "C-n" 'comint-next-input
   "C-p" 'comint-previous-input)

  (general-nvmap
    :keymaps 'inferior-python-mode-map
    "C-j" 'counsel-M-x)

  (general-unbind 'inferior-python-mode-map
    :with 'ignore
    [remap my/quiet-save-buffer])

  (general-unbind 'python-mode-map
    :with 'my/python-shebang
    [remap my/bash-shebang])

  (general-define-key
   :keymaps 'python-mode-map
   "C-." 'my/indent-tools-hydra/body
   "M-e" 'python-nav-forward-statement
   "M-a" 'python-nav-backward-statement
   "M-m" 'elpy-autopep8-fix-code)

  (general-imap
    :keymaps 'python-mode-map
    "M-e" 'python-nav-forward-statement
    "M-a" 'python-nav-backward-statement
    "<S-backspace>" 'python-indent-dedent-line-backspace
    "<M-return>" 'indent-buffer
    "<C-return>" 'python-open-two-lines-insert)

  (general-unbind 'python-mode-map
    :with 'my/quiet-save-python
    [remap my/quiet-save-buffer])

  (defun my/quiet-save-python () (interactive)
	 (evil-ex-nohighlight)
	 (let ((inhibit-message t))
	   (save-buffer)))

  ;; (defun my/quiet-save-python () (interactive)
  ;; 	 (evil-ex-nohighlight)
  ;; 	 (let ((inhibit-message t))
  ;; 	   (progn
  ;; 	     (elpy-autopep8-fix-code)
  ;; 	     (save-buffer))))

  (defun my/python-make-string ()
    (interactive)
    (set-mark-command nil)
    (end-of-visual-line 1)
    (insert ")")
    (exchange-point-and-mark nil)
    (insert "str(")
    (left-char)
    (set-mark-command nil))

  (defun my/python-make-input ()
    (interactive)
    (set-mark-command nil)
    (end-of-visual-line 1)
    (insert ")")
    (exchange-point-and-mark nil)
    (insert "input(")
    (left-char)
    (set-mark-command nil))

  (general-nvmap
    :keymaps 'python-mode-map
    "C-." 'my/indent-tools-hydra/body
    "RET" 'hydra-python-mode/body
    "zm" 'evil-close-folds
    "M-e" 'python-nav-forward-statement
    "M-a" 'python-nav-backward-statement
    "gh" 'outline-up-heading
    "gl" 'outline-next-heading
    "zl" 'outline-show-subtree
    "<M-return>" 'indent-buffer
    "<" 'python-indent-shift-left
    "M-m" 'blacken-buffer
    ">" 'python-indent-shift-right
    "gj" 'outline-forward-same-level
    "gk" 'outline-backward-same-level
    "<C-return>" 'python-open-two-line
    "<backspace>" 'hydra-prog-mode/body))

(use-package projectile
  :defer t
  :ensure t
  :config

  (general-define-key
   :keymaps 'projectile-mode-map
   "M-[" 'projectile-next-project-buffer
   "M-]" 'projectile-previous-project-buffer)

  (load-file "~/.emacs.d/lisp/functions/projectile/projectile_ignore_buffers.el")

  (setq projectile-globally-ignored-modes '("erc-mode" "help-mode" "completion-list-mode" "Buffer-menu-mode" "gnus-.*-mode" "occur-mode" "org-mode"))
  (setq projectile-project-search-path '("~/org/" "~/.emacs.d/" "~/PCC"))
  (setq projectile-mode-line-prefix " <p>")
  (setq projectile-mode-line-function '(lambda () (format " <p> [%s]" (projectile-project-name))))

  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "<f10>") 'projectile-command-map)

  (general-unbind 'projectile-command-map
    "ESC")

  (general-define-key
   "M-u" 'counsel-projectile-switch-to-buffer)

  (general-define-key
   :keymaps 'projectile-command-map
   "ESC" 'keyboard-quit
   "TAB" 'projectile-project-buffers-other-buffer))

(use-package counsel-projectile
  :unless window-system
  :defer t
  :ensure t
  :config
  (counsel-projectile-mode +1))

;; (use-package insert-shebang
;;   :defer t
;;   :init
;;   (setq insert-shebang-ignore-extensions '("txt" "org" "pdf"))
;;   (setq insert-shebang-file-types '
;; 	(("py" . "python3")
;; 	 ("groovy" . "groovy")
;; 	 ("fish" . "fish")
;; 	 ("robot" . "robot")
;; 	 ("rb" . "ruby")
;; 	 ("lua" . "lua")
;; 	 ("php" . "php")
;; 	 ("sh" . "bash")
;; 	 ("pl" . "perl")))
;;   :ensure t)

(use-package smart-hungry-delete
  :defer 5
  :ensure t
  :config
  (general-nvmap
    :keymaps 'override
    "X" 'smart-hungry-delete-forward-char)
  (smart-hungry-delete-add-default-hooks))

(use-package web-mode
  :unless window-system
  :defer t
  :ensure t
  :init
  (add-hook 'web-mode-hook 'emmet-mode)
  :config
  (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)))

(use-package emmet-mode
:unless window-system
:after web-mode
:ensure t)

(use-package smartparens
  :defer 3
  :ensure t
  :config
  (smartparens-global-mode +1))

(use-package dumb-jump
:defer t
:ensure t
:config
(setq dumb-jump-selector 'ivy))

(use-package highlight-numbers
:defer t
:ensure t)

(use-package highlight-operators
:defer t
:ensure t)

(use-package string-inflection
:defer t
:ensure t)

(use-package evil-string-inflection
:defer t
:ensure t)

(use-package flycheck
  :defer t
  :ensure t
  :init
  (add-hook 'flycheck-mode-hook 'flycheck-buffer)
  :config
  (setq flycheck-mode-line nil)
  (setq flycheck-gcc-warnings nil)
  (setq flycheck-clang-warnings nil)
  (setq flycheck-display-errors-delay 3)
  (setq flycheck-check-syntax-automatically '(idle-change))
  (setq flycheck-idle-change-delay 0.5)
  ;; (setq flycheck-check-syntax-automatically '(save))
  (setq flycheck-check-syntax-automatically '(save idle-change new-line mode-enabled))
  (setq flymake-mode nil)
  (setq flycheck-clang-pedantic t)
  (setq flycheck-gcc-pedantic t))

(use-package subword
:defer 3
:ensure nil
:config
(subword-mode +1))

(use-package elec-pair
:defer t
:config
(electric-pair-mode))

(use-package company
  :defer 3
  :ensure t
  :init
  (defun my/company-mode-hooks ()
    (interactive)
    (company-prescient-mode 1)
    (prescient-persist-mode 1)
    (company-quickhelp-mode 1))
  (add-hook 'global-company-mode-hook 'my/company-mode-hooks)
  (add-hook 'company-mode-hook 'my/company-mode-hooks)
  (setq company-auto-complete-chars '(40 46 41))
  (setq company-auto-complete t)
  ;; (setq company-auto-complete-chars nil)
  (setq company-dabbrev-code-ignore-case t)
  (setq company-show-numbers t)
  (setq company-dabbrev-code-modes t)
  (setq company-dabbrev-downcase nil)
  (setq company-dabbrev-code-everywhere t)
  (setq company-dabbrev-other-buffers t)
  (setq company-dabbrev-ignore-buffers "nil")
  (setq company-selection-wrap-around t)

  :config

  (setq company-idle-delay 0.2)
  (setq company-tooltip-limit 5)
  (setq company-minimum-prefix-length 2)
  (advice-add 'company-complete-common :before (lambda () (setq my/company-point (point))))
  (advice-add 'company-complete-common :after (lambda ()
						(when (equal my/company-point (point))
						  (yas-expand))))
  (general-define-key
   :keymaps 'company-active-map
   "1" 'company-complete-number
   "2" 'company-complete-number
   "3" 'company-complete-number
   "4" 'company-complete-number
   "5" 'company-complete-number
   "6" 'company-complete-number
   "7" 'company-complete-number
   "8" 'company-complete-number
   "9" 'company-complete-number
   "0" 'company-complete-number
   "M-h" 'company-quickhelp-manual-begin
   "M-d" 'company-filter-candidates
   "M-h" nil
   "M-j" nil
   "M-k" nil
   "M-l" nil
   "C-w" 'evil-delete-backward-word
   "C-h" 'delete-backward-char
   "<tab>" 'my/company-complete-first
   "<escape>" 'company-abort
   "<return>" 'company-complete
   ;; "C-h" 'company-complete
   "C-j" 'company-complete
   ;; "C-l" 'my/company-complete-comint
   "C-k" 'my/company-complete-first-comint
   "M-o" 'my/company-yasnippet)

  (general-define-key
   :keymaps 'company-filter-map
   "TAB" 'my/company-complete-first
   "M-h" 'company-quickhelp-manual-begin
   "M-d" 'company-filter-candidates
   "C-l" 'company-complete
   "C-k" 'my/company-complete
   "M-o" 'my/company-yasnippet
   "RET" 'company-complete)

  (general-define-key
   :keymaps 'company-mode-map
   "C-x m" 'my/company-show-options)

  (general-imap
    :keymaps 'company-mode-map
    "C-ç" 'company-complete
    "M-/" 'hippie-expand)
  (global-company-mode 1))


(use-package company-shell
  :after company
  :ensure t
  :init
  (add-to-list 'company-backends 'company-shell t)
  (setq company-shell-modes '(sh-mode fish-mode shell-mode eshell-mode text-mode prog-mode lisp-interaction-mode markdown-mode))
  :config
  (setq company-shell-delete-duplicates t)
  (setq company-fish-shell-modes nil))

(use-package company-quickhelp
:after company
:ensure t
:config
(setq company-quickhelp-use-propertized-text t)
(setq company-quickhelp-delay 3))

(use-package company-prescient
  :after company
  :ensure t)
(use-package prescient
  :after company
  :ensure t)

(use-package pos-tip
:defer t
:ensure t
:config
(setq pos-tip-border-width 3)
(setq pos-tip-internal-border-width 3)
(setq pos-tip-background-color "grey9")
(setq pos-tip-foreground-color "yellow1"))

(use-package tab-jump-out
  :defer 3
  :ensure t
  :config
  (tab-jump-out-mode t))

(use-package electric-operator
:ensure t
:config
(electric-operator-add-rules-for-mode 'python-mode
                                      (cons "+" " + ")
                                      (cons "-" " - ")
                                      (cons "ndd" " and ")
                                      (cons "ntt" " not ")))

(use-package aggressive-indent
  :defer t
  :ensure t
  :config
  (setq aggressive-indent-sit-for-time 0.05))

(use-package yasnippet
  :defer 1
  :ensure t
  :init
  (setq yas--default-user-snippets-dir "~/.emacs.d/etc/yasnippet/snippets")
  (add-hook 'yas-before-expand-snippet-hook 'my/yas-before-hooks)
  (add-hook 'yas-after-exit-snippet-hook 'my/yas-after-hooks)
  :config

  (defun my/yas-before-hooks ()
    (interactive)
    (electric-operator-mode -1))

  (defun my/yas-after-hooks ()
    (interactive)
    (electric-operator-mode +1))

  (general-define-key
   :keymaps 'yas-minor-mode-map
    "M-u" 'ivy-yasnippet)

  (general-imap
    :keymaps 'yas-minor-mode-map
    "M-o" 'yas-expand)

  (general-unbind 'snippet-mode-map
    :with 'ignore
    [remap my/quiet-save-buffer])

  (general-nvmap
    :keymaps 'snippet-mode-map
    "<C-return>" 'yas-load-snippet-buffer-and-close
    "M-;" 'hydra-yasnippet/body)

  (general-imap
    :keymaps 'snippet-mode-map
    "M-;" 'hydra-yasnippet/body
    "DEL" 'evil-delete-backward-char-and-join)

  (setq yas-triggers-in-field nil)
  (yas-global-mode +1))

(use-package yasnippet-classic-snippets
  :after yasnippet
  :ensure t)

(use-package yasnippet-snippets
  :after yasnippet
  :ensure t
  :config
  (yasnippet-snippets-initialize))

(use-package ivy-yasnippet
  :after yasnippet
  :ensure t)

(use-package java-snippets
  :after yasnippet
  :ensure t)

(use-package rainbow-delimiters
:unless window-system
:defer t
:ensure t)

(use-package highlight-indent-guides
:defer t
:ensure t)

(use-package pdf-tools
  :ensure t
  :init
  (setq pdf-view-resize-factor 1.03)
  (setq pdf-view-continuous nil)
  (add-hook 'pdf-view-mode-hook 'pdf-annot-minor-mode)
  (add-hook 'pdf-view-mode-hook 'pdf-links-minor-mode)
  (add-hook 'pdf-outline-buffer-mode-hook 'disable-modeline)
  (add-hook 'pdf-outline-buffer-mode-hook 'outline-minor-mode)
  (add-hook 'pdf-outline-buffer-mode-hook 'hl-line-mode)
  (setq pdf-annot-activate-created-annotations t)
  (add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-view-mode))
  :config
  (load-file "~/.emacs.d/lisp/functions/pdf_view.el")
  (add-hook 'pdf-view-mode-hook 'pdf-history-minor-mode)
  (setq pdf-view-display-size 'fit-page)
  (setq pdf-misc-size-indication-minor-mode t))
