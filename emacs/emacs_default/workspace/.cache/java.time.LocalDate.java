 // Failed to get sources. Instead, stub sources have been generated by the disassembler.
 // Implementation of methods is unavailable.
package java.time;
public final class LocalDate implements java.time.temporal.Temporal, java.time.temporal.TemporalAdjuster, java.time.chrono.ChronoLocalDate, java.io.Serializable {
  
  public static final java.time.LocalDate MIN;
  
  public static final java.time.LocalDate MAX;
  
  private static final long serialVersionUID = 2942565459149668126L;
  
  private static final int DAYS_PER_CYCLE = 146097;
  
  static final long DAYS_0000_TO_1970 = 719528L;
  
  private final int year;
  
  private final short month;
  
  private final short day;
  
  public static java.time.LocalDate now() {
    return null;
  }
  
  public static java.time.LocalDate now(java.time.ZoneId arg0) {
    return null;
  }
  
  public static java.time.LocalDate now(java.time.Clock arg0) {
    return null;
  }
  
  public static java.time.LocalDate of(int arg0, java.time.Month arg1, int arg2) {
    return null;
  }
  
  public static java.time.LocalDate of(int arg0, int arg1, int arg2) {
    return null;
  }
  
  public static java.time.LocalDate ofYearDay(int arg0, int arg1) {
    return null;
  }
  
  public static java.time.LocalDate ofEpochDay(long arg0) {
    return null;
  }
  
  public static java.time.LocalDate from(java.time.temporal.TemporalAccessor arg0) {
    return null;
  }
  
  public static java.time.LocalDate parse(java.lang.CharSequence arg0) {
    return null;
  }
  
  public static java.time.LocalDate parse(java.lang.CharSequence arg0, java.time.format.DateTimeFormatter arg1) {
    return null;
  }
  
  private static java.time.LocalDate create(int arg0, int arg1, int arg2) {
    return null;
  }
  
  private static java.time.LocalDate resolvePreviousValid(int arg0, int arg1, int arg2) {
    return null;
  }
  
  private LocalDate(int arg0, int arg1, int arg2) {
  }
  
  public boolean isSupported(java.time.temporal.TemporalField arg0) {
    return false;
  }
  
  public boolean isSupported(java.time.temporal.TemporalUnit arg0) {
    return false;
  }
  
  public java.time.temporal.ValueRange range(java.time.temporal.TemporalField arg0) {
    return null;
  }
  
  public int get(java.time.temporal.TemporalField arg0) {
    return 0;
  }
  
  public long getLong(java.time.temporal.TemporalField arg0) {
    return 0;
  }
  
  private int get0(java.time.temporal.TemporalField arg0) {
    return 0;
  }
  
  private long getProlepticMonth() {
    return 0;
  }
  
  public java.time.chrono.IsoChronology getChronology() {
    return null;
  }
  
  public java.time.chrono.Era getEra() {
    return null;
  }
  
  public int getYear() {
    return 0;
  }
  
  public int getMonthValue() {
    return 0;
  }
  
  public java.time.Month getMonth() {
    return null;
  }
  
  public int getDayOfMonth() {
    return 0;
  }
  
  public int getDayOfYear() {
    return 0;
  }
  
  public java.time.DayOfWeek getDayOfWeek() {
    return null;
  }
  
  public boolean isLeapYear() {
    return false;
  }
  
  public int lengthOfMonth() {
    return 0;
  }
  
  public int lengthOfYear() {
    return 0;
  }
  
  public java.time.LocalDate with(java.time.temporal.TemporalAdjuster arg0) {
    return null;
  }
  
  public java.time.LocalDate with(java.time.temporal.TemporalField arg0, long arg1) {
    return null;
  }
  
  public java.time.LocalDate withYear(int arg0) {
    return null;
  }
  
  public java.time.LocalDate withMonth(int arg0) {
    return null;
  }
  
  public java.time.LocalDate withDayOfMonth(int arg0) {
    return null;
  }
  
  public java.time.LocalDate withDayOfYear(int arg0) {
    return null;
  }
  
  public java.time.LocalDate plus(java.time.temporal.TemporalAmount arg0) {
    return null;
  }
  
  public java.time.LocalDate plus(long arg0, java.time.temporal.TemporalUnit arg1) {
    return null;
  }
  
  public java.time.LocalDate plusYears(long arg0) {
    return null;
  }
  
  public java.time.LocalDate plusMonths(long arg0) {
    return null;
  }
  
  public java.time.LocalDate plusWeeks(long arg0) {
    return null;
  }
  
  public java.time.LocalDate plusDays(long arg0) {
    return null;
  }
  
  public java.time.LocalDate minus(java.time.temporal.TemporalAmount arg0) {
    return null;
  }
  
  public java.time.LocalDate minus(long arg0, java.time.temporal.TemporalUnit arg1) {
    return null;
  }
  
  public java.time.LocalDate minusYears(long arg0) {
    return null;
  }
  
  public java.time.LocalDate minusMonths(long arg0) {
    return null;
  }
  
  public java.time.LocalDate minusWeeks(long arg0) {
    return null;
  }
  
  public java.time.LocalDate minusDays(long arg0) {
    return null;
  }
  
  public <R> R query(java.time.temporal.TemporalQuery<R> arg0) {
    return null;
  }
  
  public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal arg0) {
    return null;
  }
  
  public long until(java.time.temporal.Temporal arg0, java.time.temporal.TemporalUnit arg1) {
    return 0;
  }
  
  long daysUntil(java.time.LocalDate arg0) {
    return 0;
  }
  
  private long monthsUntil(java.time.LocalDate arg0) {
    return 0;
  }
  
  public java.time.Period until(java.time.chrono.ChronoLocalDate arg0) {
    return null;
  }
  
  public java.lang.String format(java.time.format.DateTimeFormatter arg0) {
    return null;
  }
  
  public java.time.LocalDateTime atTime(java.time.LocalTime arg0) {
    return null;
  }
  
  public java.time.LocalDateTime atTime(int arg0, int arg1) {
    return null;
  }
  
  public java.time.LocalDateTime atTime(int arg0, int arg1, int arg2) {
    return null;
  }
  
  public java.time.LocalDateTime atTime(int arg0, int arg1, int arg2, int arg3) {
    return null;
  }
  
  public java.time.OffsetDateTime atTime(java.time.OffsetTime arg0) {
    return null;
  }
  
  public java.time.LocalDateTime atStartOfDay() {
    return null;
  }
  
  public java.time.ZonedDateTime atStartOfDay(java.time.ZoneId arg0) {
    return null;
  }
  
  public long toEpochDay() {
    return 0;
  }
  
  public int compareTo(java.time.chrono.ChronoLocalDate arg0) {
    return 0;
  }
  
  int compareTo0(java.time.LocalDate arg0) {
    return 0;
  }
  
  public boolean isAfter(java.time.chrono.ChronoLocalDate arg0) {
    return false;
  }
  
  public boolean isBefore(java.time.chrono.ChronoLocalDate arg0) {
    return false;
  }
  
  public boolean isEqual(java.time.chrono.ChronoLocalDate arg0) {
    return false;
  }
  
  public boolean equals(java.lang.Object arg0) {
    return false;
  }
  
  public int hashCode() {
    return 0;
  }
  
  public java.lang.String toString() {
    return null;
  }
  
  private java.lang.Object writeReplace() {
    return null;
  }
  
  private void readObject(java.io.ObjectInputStream arg0) throws java.io.InvalidObjectException {
  }
  
  void writeExternal(java.io.DataOutput arg0) throws java.io.IOException {
  }
  
  static java.time.LocalDate readExternal(java.io.DataInput arg0) throws java.io.IOException {
    return null;
  }
  
  public bridge java.time.temporal.Temporal minus(long arg0, java.time.temporal.TemporalUnit arg1) {
    return null;
  }
  
  public bridge java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount arg0) {
    return null;
  }
  
  public bridge java.time.temporal.Temporal plus(long arg0, java.time.temporal.TemporalUnit arg1) {
    return null;
  }
  
  public bridge java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount arg0) {
    return null;
  }
  
  public bridge java.time.temporal.Temporal with(java.time.temporal.TemporalField arg0, long arg1) {
    return null;
  }
  
  public bridge java.time.temporal.Temporal with(java.time.temporal.TemporalAdjuster arg0) {
    return null;
  }
  
  public bridge java.time.chrono.ChronoLocalDateTime atTime(java.time.LocalTime arg0) {
    return null;
  }
  
  public bridge java.time.chrono.ChronoPeriod until(java.time.chrono.ChronoLocalDate arg0) {
    return null;
  }
  
  public bridge java.time.chrono.ChronoLocalDate minus(long arg0, java.time.temporal.TemporalUnit arg1) {
    return null;
  }
  
  public bridge java.time.chrono.ChronoLocalDate minus(java.time.temporal.TemporalAmount arg0) {
    return null;
  }
  
  public bridge java.time.chrono.ChronoLocalDate plus(long arg0, java.time.temporal.TemporalUnit arg1) {
    return null;
  }
  
  public bridge java.time.chrono.ChronoLocalDate plus(java.time.temporal.TemporalAmount arg0) {
    return null;
  }
  
  public bridge java.time.chrono.ChronoLocalDate with(java.time.temporal.TemporalField arg0, long arg1) {
    return null;
  }
  
  public bridge java.time.chrono.ChronoLocalDate with(java.time.temporal.TemporalAdjuster arg0) {
    return null;
  }
  
  public bridge java.time.chrono.Chronology getChronology() {
    return null;
  }
  
  public bridge int compareTo(java.lang.Object arg0) {
    return 0;
  }
  
  static {} {
  }
}